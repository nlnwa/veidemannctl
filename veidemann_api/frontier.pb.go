// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frontier.proto

package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CrawlSeedRequest struct {
	JobExecutionId string    `protobuf:"bytes,1,opt,name=job_execution_id,json=jobExecutionId" json:"job_execution_id,omitempty"`
	Job            *CrawlJob `protobuf:"bytes,5,opt,name=job" json:"job,omitempty"`
	Seed           *Seed     `protobuf:"bytes,6,opt,name=seed" json:"seed,omitempty"`
}

func (m *CrawlSeedRequest) Reset()                    { *m = CrawlSeedRequest{} }
func (m *CrawlSeedRequest) String() string            { return proto.CompactTextString(m) }
func (*CrawlSeedRequest) ProtoMessage()               {}
func (*CrawlSeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *CrawlSeedRequest) GetJobExecutionId() string {
	if m != nil {
		return m.JobExecutionId
	}
	return ""
}

func (m *CrawlSeedRequest) GetJob() *CrawlJob {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *CrawlSeedRequest) GetSeed() *Seed {
	if m != nil {
		return m.Seed
	}
	return nil
}

func init() {
	proto.RegisterType((*CrawlSeedRequest)(nil), "veidemann.api.CrawlSeedRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Frontier service

type FrontierClient interface {
	CrawlSeed(ctx context.Context, in *CrawlSeedRequest, opts ...grpc.CallOption) (*CrawlExecutionStatus, error)
}

type frontierClient struct {
	cc *grpc.ClientConn
}

func NewFrontierClient(cc *grpc.ClientConn) FrontierClient {
	return &frontierClient{cc}
}

func (c *frontierClient) CrawlSeed(ctx context.Context, in *CrawlSeedRequest, opts ...grpc.CallOption) (*CrawlExecutionStatus, error) {
	out := new(CrawlExecutionStatus)
	err := grpc.Invoke(ctx, "/veidemann.api.Frontier/CrawlSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Frontier service

type FrontierServer interface {
	CrawlSeed(context.Context, *CrawlSeedRequest) (*CrawlExecutionStatus, error)
}

func RegisterFrontierServer(s *grpc.Server, srv FrontierServer) {
	s.RegisterService(&_Frontier_serviceDesc, srv)
}

func _Frontier_CrawlSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontierServer).CrawlSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Frontier/CrawlSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontierServer).CrawlSeed(ctx, req.(*CrawlSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Frontier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Frontier",
	HandlerType: (*FrontierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrawlSeed",
			Handler:    _Frontier_CrawlSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontier.proto",
}

func init() { proto.RegisterFile("frontier.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x89, 0x80, 0x8a, 0x1e, 0x34, 0xaa, 0xcc, 0xd0, 0x28, 0x0b, 0x55, 0x19, 0x08, 0x8b,
	0x87, 0x32, 0xb0, 0x17, 0x81, 0x04, 0x13, 0x4a, 0x36, 0x96, 0xc8, 0xae, 0xaf, 0x95, 0x23, 0x7a,
	0x17, 0x62, 0x07, 0xf8, 0x19, 0xfc, 0x64, 0x54, 0x97, 0x16, 0x8a, 0x32, 0xda, 0xf7, 0xdd, 0x7b,
	0xef, 0x1e, 0xc4, 0x8b, 0x86, 0xc9, 0x5b, 0x6c, 0x64, 0xdd, 0xb0, 0x67, 0x31, 0x78, 0x47, 0x6b,
	0x70, 0xa5, 0x88, 0xa4, 0xaa, 0x6d, 0x7a, 0x36, 0x67, 0x5a, 0xd8, 0xe5, 0x66, 0x98, 0xc6, 0x2b,
	0x74, 0x4e, 0x2d, 0xd1, 0x6d, 0xde, 0x93, 0xaf, 0x08, 0x86, 0x77, 0x8d, 0xfa, 0x78, 0x2d, 0x10,
	0x4d, 0x8e, 0x6f, 0x2d, 0x3a, 0x2f, 0x32, 0x18, 0x56, 0xac, 0x4b, 0xfc, 0xc4, 0x79, 0xeb, 0x2d,
	0x53, 0x69, 0x4d, 0x12, 0x8d, 0xa3, 0xac, 0x9f, 0xc7, 0x15, 0xeb, 0xfb, 0xed, 0xf7, 0xa3, 0x11,
	0xd7, 0x70, 0x58, 0xb1, 0x4e, 0x8e, 0xc7, 0x51, 0x76, 0x3a, 0x1d, 0xc9, 0x3d, 0x67, 0x19, 0x74,
	0x9f, 0x58, 0xe7, 0x6b, 0x46, 0x5c, 0xc1, 0x91, 0x43, 0x34, 0x49, 0x2f, 0xb0, 0xe7, 0xff, 0xd8,
	0x60, 0x1f, 0x80, 0x69, 0x09, 0x27, 0x0f, 0x3f, 0x17, 0x89, 0x02, 0xfa, 0xbb, 0x74, 0xe2, 0xa2,
	0x4b, 0xff, 0x4f, 0xee, 0xf4, 0xb2, 0x0b, 0xd8, 0xc5, 0x2d, 0xbc, 0xf2, 0xad, 0x9b, 0x1c, 0xcc,
	0x6e, 0x61, 0x44, 0x2c, 0x49, 0x4b, 0x22, 0xb5, 0xbf, 0x31, 0x1b, 0x6c, 0x9d, 0x9f, 0xd7, 0xed,
	0xbc, 0xfc, 0x56, 0x59, 0xaa, 0xda, 0xea, 0x5e, 0xe8, 0xec, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0xfd, 0x68, 0x6a, 0x1a, 0x72, 0x01, 0x00, 0x00,
}
