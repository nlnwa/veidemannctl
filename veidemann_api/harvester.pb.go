// Code generated by protoc-gen-go. DO NOT EDIT.
// source: harvester.proto

package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A request telling which page to harvest.
type HarvestPageRequest struct {
	QueuedUri            *QueuedUri   `protobuf:"bytes,1,opt,name=queued_uri,json=queuedUri" json:"queued_uri,omitempty"`
	CrawlConfig          *CrawlConfig `protobuf:"bytes,2,opt,name=crawl_config,json=crawlConfig" json:"crawl_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HarvestPageRequest) Reset()         { *m = HarvestPageRequest{} }
func (m *HarvestPageRequest) String() string { return proto.CompactTextString(m) }
func (*HarvestPageRequest) ProtoMessage()    {}
func (*HarvestPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_harvester_14f00e887095b0f7, []int{0}
}
func (m *HarvestPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HarvestPageRequest.Unmarshal(m, b)
}
func (m *HarvestPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HarvestPageRequest.Marshal(b, m, deterministic)
}
func (dst *HarvestPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HarvestPageRequest.Merge(dst, src)
}
func (m *HarvestPageRequest) XXX_Size() int {
	return xxx_messageInfo_HarvestPageRequest.Size(m)
}
func (m *HarvestPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HarvestPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HarvestPageRequest proto.InternalMessageInfo

func (m *HarvestPageRequest) GetQueuedUri() *QueuedUri {
	if m != nil {
		return m.QueuedUri
	}
	return nil
}

func (m *HarvestPageRequest) GetCrawlConfig() *CrawlConfig {
	if m != nil {
		return m.CrawlConfig
	}
	return nil
}

type HarvestPageReply struct {
	// The outlinks found in the harvested page
	Outlinks             []*QueuedUri `protobuf:"bytes,1,rep,name=outlinks" json:"outlinks,omitempty"`
	UriCount             int32        `protobuf:"varint,2,opt,name=uri_count,json=uriCount" json:"uri_count,omitempty"`
	BytesDownloaded      int64        `protobuf:"varint,3,opt,name=bytes_downloaded,json=bytesDownloaded" json:"bytes_downloaded,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HarvestPageReply) Reset()         { *m = HarvestPageReply{} }
func (m *HarvestPageReply) String() string { return proto.CompactTextString(m) }
func (*HarvestPageReply) ProtoMessage()    {}
func (*HarvestPageReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_harvester_14f00e887095b0f7, []int{1}
}
func (m *HarvestPageReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HarvestPageReply.Unmarshal(m, b)
}
func (m *HarvestPageReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HarvestPageReply.Marshal(b, m, deterministic)
}
func (dst *HarvestPageReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HarvestPageReply.Merge(dst, src)
}
func (m *HarvestPageReply) XXX_Size() int {
	return xxx_messageInfo_HarvestPageReply.Size(m)
}
func (m *HarvestPageReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HarvestPageReply.DiscardUnknown(m)
}

var xxx_messageInfo_HarvestPageReply proto.InternalMessageInfo

func (m *HarvestPageReply) GetOutlinks() []*QueuedUri {
	if m != nil {
		return m.Outlinks
	}
	return nil
}

func (m *HarvestPageReply) GetUriCount() int32 {
	if m != nil {
		return m.UriCount
	}
	return 0
}

func (m *HarvestPageReply) GetBytesDownloaded() int64 {
	if m != nil {
		return m.BytesDownloaded
	}
	return 0
}

type CleanupExecutionRequest struct {
	ExecutionId          string   `protobuf:"bytes,1,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanupExecutionRequest) Reset()         { *m = CleanupExecutionRequest{} }
func (m *CleanupExecutionRequest) String() string { return proto.CompactTextString(m) }
func (*CleanupExecutionRequest) ProtoMessage()    {}
func (*CleanupExecutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_harvester_14f00e887095b0f7, []int{2}
}
func (m *CleanupExecutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanupExecutionRequest.Unmarshal(m, b)
}
func (m *CleanupExecutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanupExecutionRequest.Marshal(b, m, deterministic)
}
func (dst *CleanupExecutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanupExecutionRequest.Merge(dst, src)
}
func (m *CleanupExecutionRequest) XXX_Size() int {
	return xxx_messageInfo_CleanupExecutionRequest.Size(m)
}
func (m *CleanupExecutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanupExecutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CleanupExecutionRequest proto.InternalMessageInfo

func (m *CleanupExecutionRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func init() {
	proto.RegisterType((*HarvestPageRequest)(nil), "veidemann.api.HarvestPageRequest")
	proto.RegisterType((*HarvestPageReply)(nil), "veidemann.api.HarvestPageReply")
	proto.RegisterType((*CleanupExecutionRequest)(nil), "veidemann.api.CleanupExecutionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HarvesterClient is the client API for Harvester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HarvesterClient interface {
	// Harvest a page
	HarvestPage(ctx context.Context, in *HarvestPageRequest, opts ...grpc.CallOption) (*HarvestPageReply, error)
	// Request cleanup of caches after all pages for a seed are harvested.
	CleanupExecution(ctx context.Context, in *CleanupExecutionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type harvesterClient struct {
	cc *grpc.ClientConn
}

func NewHarvesterClient(cc *grpc.ClientConn) HarvesterClient {
	return &harvesterClient{cc}
}

func (c *harvesterClient) HarvestPage(ctx context.Context, in *HarvestPageRequest, opts ...grpc.CallOption) (*HarvestPageReply, error) {
	out := new(HarvestPageReply)
	err := c.cc.Invoke(ctx, "/veidemann.api.Harvester/HarvestPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harvesterClient) CleanupExecution(ctx context.Context, in *CleanupExecutionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/veidemann.api.Harvester/CleanupExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Harvester service

type HarvesterServer interface {
	// Harvest a page
	HarvestPage(context.Context, *HarvestPageRequest) (*HarvestPageReply, error)
	// Request cleanup of caches after all pages for a seed are harvested.
	CleanupExecution(context.Context, *CleanupExecutionRequest) (*empty.Empty, error)
}

func RegisterHarvesterServer(s *grpc.Server, srv HarvesterServer) {
	s.RegisterService(&_Harvester_serviceDesc, srv)
}

func _Harvester_HarvestPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HarvestPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarvesterServer).HarvestPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Harvester/HarvestPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarvesterServer).HarvestPage(ctx, req.(*HarvestPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harvester_CleanupExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarvesterServer).CleanupExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Harvester/CleanupExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarvesterServer).CleanupExecution(ctx, req.(*CleanupExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Harvester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Harvester",
	HandlerType: (*HarvesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HarvestPage",
			Handler:    _Harvester_HarvestPage_Handler,
		},
		{
			MethodName: "CleanupExecution",
			Handler:    _Harvester_CleanupExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "harvester.proto",
}

func init() { proto.RegisterFile("harvester.proto", fileDescriptor_harvester_14f00e887095b0f7) }

var fileDescriptor_harvester_14f00e887095b0f7 = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0xae, 0x93, 0x40,
	0x14, 0x7d, 0xd8, 0x68, 0x1e, 0x43, 0x7d, 0xaf, 0x99, 0x85, 0x25, 0x74, 0x61, 0xcb, 0xc2, 0xd4,
	0xcd, 0x34, 0xa9, 0x26, 0xba, 0xd0, 0x4d, 0xb1, 0x49, 0xdd, 0x55, 0xd4, 0x8d, 0x1b, 0x32, 0xc0,
	0x2d, 0x4e, 0xa4, 0x33, 0x74, 0x98, 0x69, 0xe5, 0x1f, 0x5c, 0xf8, 0x35, 0x7e, 0x9f, 0x61, 0x10,
	0x6a, 0xd1, 0x74, 0xc7, 0x3d, 0x73, 0xee, 0xe5, 0x9c, 0x7b, 0x0f, 0xba, 0xff, 0x4a, 0xe5, 0x11,
	0x4a, 0x05, 0x92, 0x14, 0x52, 0x28, 0x81, 0x1f, 0x1f, 0x81, 0xa5, 0xb0, 0xa7, 0x9c, 0x13, 0x5a,
	0x30, 0xef, 0x6e, 0x0f, 0x65, 0x49, 0x33, 0x28, 0x9b, 0x67, 0x6f, 0x98, 0x08, 0xbe, 0x63, 0xd9,
	0x9f, 0x6a, 0x92, 0x09, 0x91, 0xe5, 0xb0, 0x30, 0x55, 0xac, 0x77, 0x0b, 0xd8, 0x17, 0xaa, 0x6a,
	0x1e, 0xfd, 0x1f, 0x16, 0xc2, 0x9b, 0x66, 0xfa, 0x96, 0x66, 0x10, 0xc2, 0x41, 0x43, 0xa9, 0xf0,
	0x2b, 0x84, 0x0e, 0x1a, 0x34, 0xa4, 0x91, 0x96, 0xcc, 0xb5, 0xa6, 0xd6, 0xdc, 0x59, 0xba, 0xe4,
	0xe2, 0xaf, 0xe4, 0x83, 0x21, 0x7c, 0x96, 0x2c, 0xb4, 0x0f, 0xed, 0x27, 0x7e, 0x8b, 0x86, 0x89,
	0xa4, 0xa7, 0x3c, 0x6a, 0x24, 0xb8, 0x0f, 0x4c, 0xab, 0xd7, 0x6b, 0x0d, 0x6a, 0x4a, 0x60, 0x18,
	0xa1, 0x93, 0x9c, 0x0b, 0xff, 0xa7, 0x85, 0x46, 0x17, 0x72, 0x8a, 0xbc, 0xc2, 0x2f, 0xd1, 0xad,
	0xd0, 0x2a, 0x67, 0xfc, 0x5b, 0xe9, 0x5a, 0xd3, 0xc1, 0x55, 0x29, 0x1d, 0x13, 0x4f, 0x90, 0xad,
	0x25, 0x8b, 0x12, 0xa1, 0xb9, 0x32, 0x32, 0x1e, 0x86, 0xb7, 0x5a, 0xb2, 0xa0, 0xae, 0xf1, 0x73,
	0x34, 0x8a, 0x2b, 0x05, 0x65, 0x94, 0x8a, 0x13, 0xcf, 0x05, 0x4d, 0x21, 0x75, 0x07, 0x53, 0x6b,
	0x3e, 0x08, 0xef, 0x0d, 0xfe, 0xae, 0x83, 0xfd, 0x37, 0x68, 0x1c, 0xe4, 0x40, 0xb9, 0x2e, 0xd6,
	0xdf, 0x21, 0xd1, 0x8a, 0x09, 0xde, 0x6e, 0x69, 0x86, 0x86, 0xd0, 0x62, 0x11, 0x4b, 0xcd, 0x9e,
	0xec, 0xd0, 0xe9, 0xb0, 0xf7, 0xe9, 0xf2, 0x97, 0x85, 0xec, 0x4d, 0x7b, 0x3d, 0xfc, 0x11, 0x39,
	0x7f, 0xb9, 0xc3, 0xb3, 0x9e, 0x8d, 0x7f, 0x0f, 0xe1, 0x3d, 0xbd, 0x46, 0x29, 0xf2, 0xca, 0xbf,
	0xc1, 0x9f, 0xd0, 0xa8, 0x2f, 0x10, 0x3f, 0xeb, 0x2f, 0xfc, 0xff, 0x0e, 0xbc, 0x27, 0xa4, 0x09,
	0x07, 0x69, 0xc3, 0x41, 0xd6, 0x75, 0x38, 0xfc, 0x9b, 0xd5, 0x6b, 0x34, 0xe6, 0x82, 0xf0, 0x98,
	0x70, 0x4e, 0x2f, 0x87, 0xad, 0xee, 0x3a, 0x43, 0xdb, 0xba, 0xeb, 0xcb, 0x39, 0x8d, 0x11, 0x2d,
	0x58, 0xfc, 0xc8, 0xcc, 0x7a, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xe5, 0x92, 0x25, 0xb6,
	0x02, 0x00, 0x00,
}
