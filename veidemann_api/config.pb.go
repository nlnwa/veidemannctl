// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package veidemann_api is a generated protocol buffer package.

It is generated from these files:
	config.proto
	contentwriter.proto
	controller.proto
	dnsresolver.proto
	frontier.proto
	harvester.proto
	messages.proto
	report.proto
	robotsevaluator.proto
	status.proto

It has these top-level messages:
	Meta
	Selector
	Label
	CrawlEntity
	Seed
	CrawlJob
	CrawlConfig
	CrawlScheduleConfig
	CrawlScope
	CrawlLimitsConfig
	BrowserConfig
	PolitenessConfig
	ExtraConfig
	BrowserScript
	CrawlHostGroupConfig
	LogLevels
	RoleMapping
	Data
	WriteRequestMeta
	WriteRequest
	WriteResponseMeta
	WriteReply
	ListRequest
	CrawlEntityListReply
	SeedListRequest
	SeedListReply
	CrawlJobListRequest
	CrawlJobListReply
	CrawlConfigListReply
	CrawlScheduleConfigListReply
	PolitenessConfigListReply
	BrowserConfigListReply
	BrowserScriptListRequest
	BrowserScriptListReply
	CrawlHostGroupConfigListReply
	RunCrawlRequest
	RunCrawlReply
	AbortCrawlRequest
	RoleList
	RoleMappingsListRequest
	RoleMappingsListReply
	ResolveRequest
	ResolveReply
	CrawlSeedRequest
	HarvestPageRequest
	HarvestPageReply
	CleanupExecutionRequest
	CrawlExecutionStatus
	CrawlLog
	PageLog
	CrawledContent
	ExtractedText
	CrawlHostGroup
	FetchError
	QueuedUri
	Cookie
	Screenshot
	Filter
	CrawlLogListRequest
	CrawlLogListReply
	PageLogListRequest
	PageLogListReply
	ScreenshotListRequest
	ScreenshotListReply
	IsAllowedRequest
	IsAllowedReply
	ExecutionsRequest
	ExecutionsListReply
	StatusDetail
*/
package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	// Any authenticated user
	Role_ANY_USER Role = 0
	// Any user including unauthenticated users
	Role_ANY Role = 1
	// Administrator
	Role_ADMIN Role = 2
	// Curator
	Role_CURATOR Role = 3
	// A user with permission to read internal data
	Role_READONLY Role = 4
)

var Role_name = map[int32]string{
	0: "ANY_USER",
	1: "ANY",
	2: "ADMIN",
	3: "CURATOR",
	4: "READONLY",
}
var Role_value = map[string]int32{
	"ANY_USER": 0,
	"ANY":      1,
	"ADMIN":    2,
	"CURATOR":  3,
	"READONLY": 4,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PolitenessConfig_RobotsPolicy int32

const (
	PolitenessConfig_OBEY_ROBOTS   PolitenessConfig_RobotsPolicy = 0
	PolitenessConfig_IGNORE_ROBOTS PolitenessConfig_RobotsPolicy = 1
	PolitenessConfig_CUSTOM_ROBOTS PolitenessConfig_RobotsPolicy = 2
)

var PolitenessConfig_RobotsPolicy_name = map[int32]string{
	0: "OBEY_ROBOTS",
	1: "IGNORE_ROBOTS",
	2: "CUSTOM_ROBOTS",
}
var PolitenessConfig_RobotsPolicy_value = map[string]int32{
	"OBEY_ROBOTS":   0,
	"IGNORE_ROBOTS": 1,
	"CUSTOM_ROBOTS": 2,
}

func (x PolitenessConfig_RobotsPolicy) String() string {
	return proto.EnumName(PolitenessConfig_RobotsPolicy_name, int32(x))
}
func (PolitenessConfig_RobotsPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

type LogLevels_Level int32

const (
	LogLevels_UNDEFINED LogLevels_Level = 0
	LogLevels_ALL       LogLevels_Level = 1
	LogLevels_TRACE     LogLevels_Level = 2
	LogLevels_DEBUG     LogLevels_Level = 3
	LogLevels_INFO      LogLevels_Level = 4
	LogLevels_WARN      LogLevels_Level = 5
	LogLevels_ERROR     LogLevels_Level = 6
	LogLevels_FATAL     LogLevels_Level = 7
	LogLevels_OFF       LogLevels_Level = 8
)

var LogLevels_Level_name = map[int32]string{
	0: "UNDEFINED",
	1: "ALL",
	2: "TRACE",
	3: "DEBUG",
	4: "INFO",
	5: "WARN",
	6: "ERROR",
	7: "FATAL",
	8: "OFF",
}
var LogLevels_Level_value = map[string]int32{
	"UNDEFINED": 0,
	"ALL":       1,
	"TRACE":     2,
	"DEBUG":     3,
	"INFO":      4,
	"WARN":      5,
	"ERROR":     6,
	"FATAL":     7,
	"OFF":       8,
}

func (x LogLevels_Level) String() string {
	return proto.EnumName(LogLevels_Level_name, int32(x))
}
func (LogLevels_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

type Meta struct {
	Name           string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description    string                     `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Created        *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	CreatedBy      string                     `protobuf:"bytes,4,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	LastModified   *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
	LastModifiedBy string                     `protobuf:"bytes,6,opt,name=last_modified_by,json=lastModifiedBy" json:"last_modified_by,omitempty"`
	Label          []*Label                   `protobuf:"bytes,7,rep,name=label" json:"label,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Meta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Meta) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Meta) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Meta) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Meta) GetLastModified() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastModified
	}
	return nil
}

func (m *Meta) GetLastModifiedBy() string {
	if m != nil {
		return m.LastModifiedBy
	}
	return ""
}

func (m *Meta) GetLabel() []*Label {
	if m != nil {
		return m.Label
	}
	return nil
}

type Selector struct {
	Label []*Label `protobuf:"bytes,1,rep,name=label" json:"label,omitempty"`
}

func (m *Selector) Reset()                    { *m = Selector{} }
func (m *Selector) String() string            { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()               {}
func (*Selector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Selector) GetLabel() []*Label {
	if m != nil {
		return m.Label
	}
	return nil
}

type Label struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Label) Reset()                    { *m = Label{} }
func (m *Label) String() string            { return proto.CompactTextString(m) }
func (*Label) ProtoMessage()               {}
func (*Label) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Label) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Label) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// A crawl entity (might be an organisation with one or more seeds)
type CrawlEntity struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta *Meta  `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
}

func (m *CrawlEntity) Reset()                    { *m = CrawlEntity{} }
func (m *CrawlEntity) String() string            { return proto.CompactTextString(m) }
func (*CrawlEntity) ProtoMessage()               {}
func (*CrawlEntity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CrawlEntity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlEntity) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type Seed struct {
	Id       string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta     *Meta       `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	EntityId string      `protobuf:"bytes,3,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	Scope    *CrawlScope `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty"`
	JobId    []string    `protobuf:"bytes,5,rep,name=job_id,json=jobId" json:"job_id,omitempty"`
	Disabled bool        `protobuf:"varint,18,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *Seed) Reset()                    { *m = Seed{} }
func (m *Seed) String() string            { return proto.CompactTextString(m) }
func (*Seed) ProtoMessage()               {}
func (*Seed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Seed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Seed) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Seed) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Seed) GetScope() *CrawlScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *Seed) GetJobId() []string {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *Seed) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type CrawlJob struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta *Meta  `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	// Types that are valid to be assigned to ScheduleConfigOrId:
	//	*CrawlJob_ScheduleId
	//	*CrawlJob_Schedule
	//	*CrawlJob_ScheduleSelector
	ScheduleConfigOrId isCrawlJob_ScheduleConfigOrId `protobuf_oneof:"schedule_config_or_id"`
	Limits             *CrawlLimitsConfig            `protobuf:"bytes,4,opt,name=limits" json:"limits,omitempty"`
	// Types that are valid to be assigned to CrawlConfigOrId:
	//	*CrawlJob_CrawlConfigId
	//	*CrawlJob_CrawlConfig
	//	*CrawlJob_CrawlConfigSelector
	CrawlConfigOrId isCrawlJob_CrawlConfigOrId `protobuf_oneof:"crawl_config_or_id"`
	Disabled        bool                       `protobuf:"varint,18,opt,name=disabled" json:"disabled,omitempty"`
}

func (m *CrawlJob) Reset()                    { *m = CrawlJob{} }
func (m *CrawlJob) String() string            { return proto.CompactTextString(m) }
func (*CrawlJob) ProtoMessage()               {}
func (*CrawlJob) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isCrawlJob_ScheduleConfigOrId interface {
	isCrawlJob_ScheduleConfigOrId()
}
type isCrawlJob_CrawlConfigOrId interface {
	isCrawlJob_CrawlConfigOrId()
}

type CrawlJob_ScheduleId struct {
	ScheduleId string `protobuf:"bytes,3,opt,name=schedule_id,json=scheduleId,oneof"`
}
type CrawlJob_Schedule struct {
	Schedule *CrawlScheduleConfig `protobuf:"bytes,16,opt,name=schedule,oneof"`
}
type CrawlJob_ScheduleSelector struct {
	ScheduleSelector *Selector `protobuf:"bytes,30,opt,name=schedule_selector,json=scheduleSelector,oneof"`
}
type CrawlJob_CrawlConfigId struct {
	CrawlConfigId string `protobuf:"bytes,5,opt,name=crawl_config_id,json=crawlConfigId,oneof"`
}
type CrawlJob_CrawlConfig struct {
	CrawlConfig *CrawlConfig `protobuf:"bytes,17,opt,name=crawl_config,json=crawlConfig,oneof"`
}
type CrawlJob_CrawlConfigSelector struct {
	CrawlConfigSelector *Selector `protobuf:"bytes,31,opt,name=crawl_config_selector,json=crawlConfigSelector,oneof"`
}

func (*CrawlJob_ScheduleId) isCrawlJob_ScheduleConfigOrId()       {}
func (*CrawlJob_Schedule) isCrawlJob_ScheduleConfigOrId()         {}
func (*CrawlJob_ScheduleSelector) isCrawlJob_ScheduleConfigOrId() {}
func (*CrawlJob_CrawlConfigId) isCrawlJob_CrawlConfigOrId()       {}
func (*CrawlJob_CrawlConfig) isCrawlJob_CrawlConfigOrId()         {}
func (*CrawlJob_CrawlConfigSelector) isCrawlJob_CrawlConfigOrId() {}

func (m *CrawlJob) GetScheduleConfigOrId() isCrawlJob_ScheduleConfigOrId {
	if m != nil {
		return m.ScheduleConfigOrId
	}
	return nil
}
func (m *CrawlJob) GetCrawlConfigOrId() isCrawlJob_CrawlConfigOrId {
	if m != nil {
		return m.CrawlConfigOrId
	}
	return nil
}

func (m *CrawlJob) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlJob) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlJob) GetScheduleId() string {
	if x, ok := m.GetScheduleConfigOrId().(*CrawlJob_ScheduleId); ok {
		return x.ScheduleId
	}
	return ""
}

func (m *CrawlJob) GetSchedule() *CrawlScheduleConfig {
	if x, ok := m.GetScheduleConfigOrId().(*CrawlJob_Schedule); ok {
		return x.Schedule
	}
	return nil
}

func (m *CrawlJob) GetScheduleSelector() *Selector {
	if x, ok := m.GetScheduleConfigOrId().(*CrawlJob_ScheduleSelector); ok {
		return x.ScheduleSelector
	}
	return nil
}

func (m *CrawlJob) GetLimits() *CrawlLimitsConfig {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *CrawlJob) GetCrawlConfigId() string {
	if x, ok := m.GetCrawlConfigOrId().(*CrawlJob_CrawlConfigId); ok {
		return x.CrawlConfigId
	}
	return ""
}

func (m *CrawlJob) GetCrawlConfig() *CrawlConfig {
	if x, ok := m.GetCrawlConfigOrId().(*CrawlJob_CrawlConfig); ok {
		return x.CrawlConfig
	}
	return nil
}

func (m *CrawlJob) GetCrawlConfigSelector() *Selector {
	if x, ok := m.GetCrawlConfigOrId().(*CrawlJob_CrawlConfigSelector); ok {
		return x.CrawlConfigSelector
	}
	return nil
}

func (m *CrawlJob) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CrawlJob) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CrawlJob_OneofMarshaler, _CrawlJob_OneofUnmarshaler, _CrawlJob_OneofSizer, []interface{}{
		(*CrawlJob_ScheduleId)(nil),
		(*CrawlJob_Schedule)(nil),
		(*CrawlJob_ScheduleSelector)(nil),
		(*CrawlJob_CrawlConfigId)(nil),
		(*CrawlJob_CrawlConfig)(nil),
		(*CrawlJob_CrawlConfigSelector)(nil),
	}
}

func _CrawlJob_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CrawlJob)
	// schedule_config_or_id
	switch x := m.ScheduleConfigOrId.(type) {
	case *CrawlJob_ScheduleId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ScheduleId)
	case *CrawlJob_Schedule:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Schedule); err != nil {
			return err
		}
	case *CrawlJob_ScheduleSelector:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ScheduleSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrawlJob.ScheduleConfigOrId has unexpected type %T", x)
	}
	// crawl_config_or_id
	switch x := m.CrawlConfigOrId.(type) {
	case *CrawlJob_CrawlConfigId:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CrawlConfigId)
	case *CrawlJob_CrawlConfig:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CrawlConfig); err != nil {
			return err
		}
	case *CrawlJob_CrawlConfigSelector:
		b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CrawlConfigSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrawlJob.CrawlConfigOrId has unexpected type %T", x)
	}
	return nil
}

func _CrawlJob_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CrawlJob)
	switch tag {
	case 3: // schedule_config_or_id.schedule_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ScheduleConfigOrId = &CrawlJob_ScheduleId{x}
		return true, err
	case 16: // schedule_config_or_id.schedule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CrawlScheduleConfig)
		err := b.DecodeMessage(msg)
		m.ScheduleConfigOrId = &CrawlJob_Schedule{msg}
		return true, err
	case 30: // schedule_config_or_id.schedule_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.ScheduleConfigOrId = &CrawlJob_ScheduleSelector{msg}
		return true, err
	case 5: // crawl_config_or_id.crawl_config_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.CrawlConfigOrId = &CrawlJob_CrawlConfigId{x}
		return true, err
	case 17: // crawl_config_or_id.crawl_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CrawlConfig)
		err := b.DecodeMessage(msg)
		m.CrawlConfigOrId = &CrawlJob_CrawlConfig{msg}
		return true, err
	case 31: // crawl_config_or_id.crawl_config_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.CrawlConfigOrId = &CrawlJob_CrawlConfigSelector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CrawlJob_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CrawlJob)
	// schedule_config_or_id
	switch x := m.ScheduleConfigOrId.(type) {
	case *CrawlJob_ScheduleId:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ScheduleId)))
		n += len(x.ScheduleId)
	case *CrawlJob_Schedule:
		s := proto.Size(x.Schedule)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrawlJob_ScheduleSelector:
		s := proto.Size(x.ScheduleSelector)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// crawl_config_or_id
	switch x := m.CrawlConfigOrId.(type) {
	case *CrawlJob_CrawlConfigId:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CrawlConfigId)))
		n += len(x.CrawlConfigId)
	case *CrawlJob_CrawlConfig:
		s := proto.Size(x.CrawlConfig)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrawlJob_CrawlConfigSelector:
		s := proto.Size(x.CrawlConfigSelector)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CrawlConfig struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta *Meta  `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	// Types that are valid to be assigned to BrowserConfigOrId:
	//	*CrawlConfig_BrowserConfigId
	//	*CrawlConfig_BrowserConfig
	//	*CrawlConfig_BrowserConfigSelector
	BrowserConfigOrId isCrawlConfig_BrowserConfigOrId `protobuf_oneof:"browser_config_or_id"`
	// Types that are valid to be assigned to PolitenessOrId:
	//	*CrawlConfig_PolitenessId
	//	*CrawlConfig_Politeness
	//	*CrawlConfig_PolitenessSelector
	PolitenessOrId isCrawlConfig_PolitenessOrId `protobuf_oneof:"politeness_or_id"`
	Extra          *ExtraConfig                 `protobuf:"bytes,9,opt,name=extra" json:"extra,omitempty"`
	MinimumDnsTtlS int32                        `protobuf:"varint,10,opt,name=minimum_dns_ttl_s,json=minimumDnsTtlS" json:"minimum_dns_ttl_s,omitempty"`
	DepthFirst     bool                         `protobuf:"varint,20,opt,name=depth_first,json=depthFirst" json:"depth_first,omitempty"`
}

func (m *CrawlConfig) Reset()                    { *m = CrawlConfig{} }
func (m *CrawlConfig) String() string            { return proto.CompactTextString(m) }
func (*CrawlConfig) ProtoMessage()               {}
func (*CrawlConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isCrawlConfig_BrowserConfigOrId interface {
	isCrawlConfig_BrowserConfigOrId()
}
type isCrawlConfig_PolitenessOrId interface {
	isCrawlConfig_PolitenessOrId()
}

type CrawlConfig_BrowserConfigId struct {
	BrowserConfigId string `protobuf:"bytes,7,opt,name=browser_config_id,json=browserConfigId,oneof"`
}
type CrawlConfig_BrowserConfig struct {
	BrowserConfig *BrowserConfig `protobuf:"bytes,16,opt,name=browser_config,json=browserConfig,oneof"`
}
type CrawlConfig_BrowserConfigSelector struct {
	BrowserConfigSelector *Selector `protobuf:"bytes,17,opt,name=browser_config_selector,json=browserConfigSelector,oneof"`
}
type CrawlConfig_PolitenessId struct {
	PolitenessId string `protobuf:"bytes,8,opt,name=politeness_id,json=politenessId,oneof"`
}
type CrawlConfig_Politeness struct {
	Politeness *PolitenessConfig `protobuf:"bytes,18,opt,name=politeness,oneof"`
}
type CrawlConfig_PolitenessSelector struct {
	PolitenessSelector *Selector `protobuf:"bytes,19,opt,name=politeness_selector,json=politenessSelector,oneof"`
}

func (*CrawlConfig_BrowserConfigId) isCrawlConfig_BrowserConfigOrId()       {}
func (*CrawlConfig_BrowserConfig) isCrawlConfig_BrowserConfigOrId()         {}
func (*CrawlConfig_BrowserConfigSelector) isCrawlConfig_BrowserConfigOrId() {}
func (*CrawlConfig_PolitenessId) isCrawlConfig_PolitenessOrId()             {}
func (*CrawlConfig_Politeness) isCrawlConfig_PolitenessOrId()               {}
func (*CrawlConfig_PolitenessSelector) isCrawlConfig_PolitenessOrId()       {}

func (m *CrawlConfig) GetBrowserConfigOrId() isCrawlConfig_BrowserConfigOrId {
	if m != nil {
		return m.BrowserConfigOrId
	}
	return nil
}
func (m *CrawlConfig) GetPolitenessOrId() isCrawlConfig_PolitenessOrId {
	if m != nil {
		return m.PolitenessOrId
	}
	return nil
}

func (m *CrawlConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlConfig) GetBrowserConfigId() string {
	if x, ok := m.GetBrowserConfigOrId().(*CrawlConfig_BrowserConfigId); ok {
		return x.BrowserConfigId
	}
	return ""
}

func (m *CrawlConfig) GetBrowserConfig() *BrowserConfig {
	if x, ok := m.GetBrowserConfigOrId().(*CrawlConfig_BrowserConfig); ok {
		return x.BrowserConfig
	}
	return nil
}

func (m *CrawlConfig) GetBrowserConfigSelector() *Selector {
	if x, ok := m.GetBrowserConfigOrId().(*CrawlConfig_BrowserConfigSelector); ok {
		return x.BrowserConfigSelector
	}
	return nil
}

func (m *CrawlConfig) GetPolitenessId() string {
	if x, ok := m.GetPolitenessOrId().(*CrawlConfig_PolitenessId); ok {
		return x.PolitenessId
	}
	return ""
}

func (m *CrawlConfig) GetPoliteness() *PolitenessConfig {
	if x, ok := m.GetPolitenessOrId().(*CrawlConfig_Politeness); ok {
		return x.Politeness
	}
	return nil
}

func (m *CrawlConfig) GetPolitenessSelector() *Selector {
	if x, ok := m.GetPolitenessOrId().(*CrawlConfig_PolitenessSelector); ok {
		return x.PolitenessSelector
	}
	return nil
}

func (m *CrawlConfig) GetExtra() *ExtraConfig {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *CrawlConfig) GetMinimumDnsTtlS() int32 {
	if m != nil {
		return m.MinimumDnsTtlS
	}
	return 0
}

func (m *CrawlConfig) GetDepthFirst() bool {
	if m != nil {
		return m.DepthFirst
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CrawlConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CrawlConfig_OneofMarshaler, _CrawlConfig_OneofUnmarshaler, _CrawlConfig_OneofSizer, []interface{}{
		(*CrawlConfig_BrowserConfigId)(nil),
		(*CrawlConfig_BrowserConfig)(nil),
		(*CrawlConfig_BrowserConfigSelector)(nil),
		(*CrawlConfig_PolitenessId)(nil),
		(*CrawlConfig_Politeness)(nil),
		(*CrawlConfig_PolitenessSelector)(nil),
	}
}

func _CrawlConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CrawlConfig)
	// browser_config_or_id
	switch x := m.BrowserConfigOrId.(type) {
	case *CrawlConfig_BrowserConfigId:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.BrowserConfigId)
	case *CrawlConfig_BrowserConfig:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BrowserConfig); err != nil {
			return err
		}
	case *CrawlConfig_BrowserConfigSelector:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BrowserConfigSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrawlConfig.BrowserConfigOrId has unexpected type %T", x)
	}
	// politeness_or_id
	switch x := m.PolitenessOrId.(type) {
	case *CrawlConfig_PolitenessId:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PolitenessId)
	case *CrawlConfig_Politeness:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Politeness); err != nil {
			return err
		}
	case *CrawlConfig_PolitenessSelector:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PolitenessSelector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrawlConfig.PolitenessOrId has unexpected type %T", x)
	}
	return nil
}

func _CrawlConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CrawlConfig)
	switch tag {
	case 7: // browser_config_or_id.browser_config_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.BrowserConfigOrId = &CrawlConfig_BrowserConfigId{x}
		return true, err
	case 16: // browser_config_or_id.browser_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BrowserConfig)
		err := b.DecodeMessage(msg)
		m.BrowserConfigOrId = &CrawlConfig_BrowserConfig{msg}
		return true, err
	case 17: // browser_config_or_id.browser_config_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.BrowserConfigOrId = &CrawlConfig_BrowserConfigSelector{msg}
		return true, err
	case 8: // politeness_or_id.politeness_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PolitenessOrId = &CrawlConfig_PolitenessId{x}
		return true, err
	case 18: // politeness_or_id.politeness
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolitenessConfig)
		err := b.DecodeMessage(msg)
		m.PolitenessOrId = &CrawlConfig_Politeness{msg}
		return true, err
	case 19: // politeness_or_id.politeness_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.PolitenessOrId = &CrawlConfig_PolitenessSelector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CrawlConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CrawlConfig)
	// browser_config_or_id
	switch x := m.BrowserConfigOrId.(type) {
	case *CrawlConfig_BrowserConfigId:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BrowserConfigId)))
		n += len(x.BrowserConfigId)
	case *CrawlConfig_BrowserConfig:
		s := proto.Size(x.BrowserConfig)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrawlConfig_BrowserConfigSelector:
		s := proto.Size(x.BrowserConfigSelector)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// politeness_or_id
	switch x := m.PolitenessOrId.(type) {
	case *CrawlConfig_PolitenessId:
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PolitenessId)))
		n += len(x.PolitenessId)
	case *CrawlConfig_Politeness:
		s := proto.Size(x.Politeness)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CrawlConfig_PolitenessSelector:
		s := proto.Size(x.PolitenessSelector)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CrawlScheduleConfig struct {
	Id             string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta           *Meta                      `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	CronExpression string                     `protobuf:"bytes,3,opt,name=cron_expression,json=cronExpression" json:"cron_expression,omitempty"`
	ValidFrom      *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=valid_from,json=validFrom" json:"valid_from,omitempty"`
	ValidTo        *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=valid_to,json=validTo" json:"valid_to,omitempty"`
}

func (m *CrawlScheduleConfig) Reset()                    { *m = CrawlScheduleConfig{} }
func (m *CrawlScheduleConfig) String() string            { return proto.CompactTextString(m) }
func (*CrawlScheduleConfig) ProtoMessage()               {}
func (*CrawlScheduleConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CrawlScheduleConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlScheduleConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlScheduleConfig) GetCronExpression() string {
	if m != nil {
		return m.CronExpression
	}
	return ""
}

func (m *CrawlScheduleConfig) GetValidFrom() *google_protobuf.Timestamp {
	if m != nil {
		return m.ValidFrom
	}
	return nil
}

func (m *CrawlScheduleConfig) GetValidTo() *google_protobuf.Timestamp {
	if m != nil {
		return m.ValidTo
	}
	return nil
}

type CrawlScope struct {
	SurtPrefix string `protobuf:"bytes,1,opt,name=surt_prefix,json=surtPrefix" json:"surt_prefix,omitempty"`
}

func (m *CrawlScope) Reset()                    { *m = CrawlScope{} }
func (m *CrawlScope) String() string            { return proto.CompactTextString(m) }
func (*CrawlScope) ProtoMessage()               {}
func (*CrawlScope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CrawlScope) GetSurtPrefix() string {
	if m != nil {
		return m.SurtPrefix
	}
	return ""
}

type CrawlLimitsConfig struct {
	// How deep from a seed to crawl
	Depth int32 `protobuf:"varint,1,opt,name=depth" json:"depth,omitempty"`
	// Maximum time in seconds allowed for crawl to finish
	MaxDurationS int64 `protobuf:"varint,2,opt,name=max_duration_s,json=maxDurationS" json:"max_duration_s,omitempty"`
	// Maximum number of bytes to fetch before ending crawl
	MaxBytes int64 `protobuf:"varint,3,opt,name=max_bytes,json=maxBytes" json:"max_bytes,omitempty"`
}

func (m *CrawlLimitsConfig) Reset()                    { *m = CrawlLimitsConfig{} }
func (m *CrawlLimitsConfig) String() string            { return proto.CompactTextString(m) }
func (*CrawlLimitsConfig) ProtoMessage()               {}
func (*CrawlLimitsConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CrawlLimitsConfig) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *CrawlLimitsConfig) GetMaxDurationS() int64 {
	if m != nil {
		return m.MaxDurationS
	}
	return 0
}

func (m *CrawlLimitsConfig) GetMaxBytes() int64 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

type BrowserConfig struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta                 *Meta             `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	UserAgent            string            `protobuf:"bytes,3,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	WindowWidth          int32             `protobuf:"varint,4,opt,name=window_width,json=windowWidth" json:"window_width,omitempty"`
	WindowHeight         int32             `protobuf:"varint,5,opt,name=window_height,json=windowHeight" json:"window_height,omitempty"`
	PageLoadTimeoutMs    int64             `protobuf:"varint,6,opt,name=page_load_timeout_ms,json=pageLoadTimeoutMs" json:"page_load_timeout_ms,omitempty"`
	ScriptSelector       *Selector         `protobuf:"bytes,7,opt,name=script_selector,json=scriptSelector" json:"script_selector,omitempty"`
	ScriptId             []string          `protobuf:"bytes,8,rep,name=script_id,json=scriptId" json:"script_id,omitempty"`
	Headers              map[string]string `protobuf:"bytes,16,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ScriptParameters     map[string]string `protobuf:"bytes,17,rep,name=script_parameters,json=scriptParameters" json:"script_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SleepAfterPageloadMs int64             `protobuf:"varint,18,opt,name=sleep_after_pageload_ms,json=sleepAfterPageloadMs" json:"sleep_after_pageload_ms,omitempty"`
}

func (m *BrowserConfig) Reset()                    { *m = BrowserConfig{} }
func (m *BrowserConfig) String() string            { return proto.CompactTextString(m) }
func (*BrowserConfig) ProtoMessage()               {}
func (*BrowserConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BrowserConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BrowserConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BrowserConfig) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *BrowserConfig) GetWindowWidth() int32 {
	if m != nil {
		return m.WindowWidth
	}
	return 0
}

func (m *BrowserConfig) GetWindowHeight() int32 {
	if m != nil {
		return m.WindowHeight
	}
	return 0
}

func (m *BrowserConfig) GetPageLoadTimeoutMs() int64 {
	if m != nil {
		return m.PageLoadTimeoutMs
	}
	return 0
}

func (m *BrowserConfig) GetScriptSelector() *Selector {
	if m != nil {
		return m.ScriptSelector
	}
	return nil
}

func (m *BrowserConfig) GetScriptId() []string {
	if m != nil {
		return m.ScriptId
	}
	return nil
}

func (m *BrowserConfig) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *BrowserConfig) GetScriptParameters() map[string]string {
	if m != nil {
		return m.ScriptParameters
	}
	return nil
}

func (m *BrowserConfig) GetSleepAfterPageloadMs() int64 {
	if m != nil {
		return m.SleepAfterPageloadMs
	}
	return 0
}

type PolitenessConfig struct {
	Id                             string                        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta                           *Meta                         `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	RobotsPolicy                   PolitenessConfig_RobotsPolicy `protobuf:"varint,3,opt,name=robots_policy,json=robotsPolicy,enum=veidemann.api.PolitenessConfig_RobotsPolicy" json:"robots_policy,omitempty"`
	MinimumRobotsValidityDurationS int32                         `protobuf:"varint,11,opt,name=minimum_robots_validity_duration_s,json=minimumRobotsValidityDurationS" json:"minimum_robots_validity_duration_s,omitempty"`
	CustomRobots                   string                        `protobuf:"bytes,20,opt,name=custom_robots,json=customRobots" json:"custom_robots,omitempty"`
	MinTimeBetweenPageLoadMs       int64                         `protobuf:"varint,4,opt,name=min_time_between_page_load_ms,json=minTimeBetweenPageLoadMs" json:"min_time_between_page_load_ms,omitempty"`
	MaxTimeBetweenPageLoadMs       int64                         `protobuf:"varint,5,opt,name=max_time_between_page_load_ms,json=maxTimeBetweenPageLoadMs" json:"max_time_between_page_load_ms,omitempty"`
	// *
	// The fetch time of the URI is multiplied with this value to get the delay time before fetching the next URI.
	// If min_time_between_page_load_ms and/or max_time_between_page_load_ms are set, then those values are used as
	// the upper/lower limits for delay.
	// If delay_factor is unset or zero, then a delay_facor of one is assumed. If delay_factor is negative,
	// a delay_factor of zero is assumed.
	DelayFactor            float32   `protobuf:"fixed32,6,opt,name=delay_factor,json=delayFactor" json:"delay_factor,omitempty"`
	MaxRetries             int32     `protobuf:"varint,7,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
	RetryDelaySeconds      int32     `protobuf:"varint,8,opt,name=retry_delay_seconds,json=retryDelaySeconds" json:"retry_delay_seconds,omitempty"`
	CrawlHostGroupSelector *Selector `protobuf:"bytes,9,opt,name=crawl_host_group_selector,json=crawlHostGroupSelector" json:"crawl_host_group_selector,omitempty"`
}

func (m *PolitenessConfig) Reset()                    { *m = PolitenessConfig{} }
func (m *PolitenessConfig) String() string            { return proto.CompactTextString(m) }
func (*PolitenessConfig) ProtoMessage()               {}
func (*PolitenessConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PolitenessConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PolitenessConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PolitenessConfig) GetRobotsPolicy() PolitenessConfig_RobotsPolicy {
	if m != nil {
		return m.RobotsPolicy
	}
	return PolitenessConfig_OBEY_ROBOTS
}

func (m *PolitenessConfig) GetMinimumRobotsValidityDurationS() int32 {
	if m != nil {
		return m.MinimumRobotsValidityDurationS
	}
	return 0
}

func (m *PolitenessConfig) GetCustomRobots() string {
	if m != nil {
		return m.CustomRobots
	}
	return ""
}

func (m *PolitenessConfig) GetMinTimeBetweenPageLoadMs() int64 {
	if m != nil {
		return m.MinTimeBetweenPageLoadMs
	}
	return 0
}

func (m *PolitenessConfig) GetMaxTimeBetweenPageLoadMs() int64 {
	if m != nil {
		return m.MaxTimeBetweenPageLoadMs
	}
	return 0
}

func (m *PolitenessConfig) GetDelayFactor() float32 {
	if m != nil {
		return m.DelayFactor
	}
	return 0
}

func (m *PolitenessConfig) GetMaxRetries() int32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *PolitenessConfig) GetRetryDelaySeconds() int32 {
	if m != nil {
		return m.RetryDelaySeconds
	}
	return 0
}

func (m *PolitenessConfig) GetCrawlHostGroupSelector() *Selector {
	if m != nil {
		return m.CrawlHostGroupSelector
	}
	return nil
}

type ExtraConfig struct {
	ExtractText    bool `protobuf:"varint,5,opt,name=extract_text,json=extractText" json:"extract_text,omitempty"`
	CreateSnapshot bool `protobuf:"varint,6,opt,name=create_snapshot,json=createSnapshot" json:"create_snapshot,omitempty"`
}

func (m *ExtraConfig) Reset()                    { *m = ExtraConfig{} }
func (m *ExtraConfig) String() string            { return proto.CompactTextString(m) }
func (*ExtraConfig) ProtoMessage()               {}
func (*ExtraConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ExtraConfig) GetExtractText() bool {
	if m != nil {
		return m.ExtractText
	}
	return false
}

func (m *ExtraConfig) GetCreateSnapshot() bool {
	if m != nil {
		return m.CreateSnapshot
	}
	return false
}

// Message containing a javascript to be run in a browser
type BrowserScript struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta      *Meta  `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Script    string `protobuf:"bytes,3,opt,name=script" json:"script,omitempty"`
	UrlRegexp string `protobuf:"bytes,4,opt,name=url_regexp,json=urlRegexp" json:"url_regexp,omitempty"`
}

func (m *BrowserScript) Reset()                    { *m = BrowserScript{} }
func (m *BrowserScript) String() string            { return proto.CompactTextString(m) }
func (*BrowserScript) ProtoMessage()               {}
func (*BrowserScript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BrowserScript) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BrowserScript) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *BrowserScript) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *BrowserScript) GetUrlRegexp() string {
	if m != nil {
		return m.UrlRegexp
	}
	return ""
}

type CrawlHostGroupConfig struct {
	Id      string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Meta    *Meta                           `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	IpRange []*CrawlHostGroupConfig_IpRange `protobuf:"bytes,3,rep,name=ip_range,json=ipRange" json:"ip_range,omitempty"`
}

func (m *CrawlHostGroupConfig) Reset()                    { *m = CrawlHostGroupConfig{} }
func (m *CrawlHostGroupConfig) String() string            { return proto.CompactTextString(m) }
func (*CrawlHostGroupConfig) ProtoMessage()               {}
func (*CrawlHostGroupConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CrawlHostGroupConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlHostGroupConfig) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CrawlHostGroupConfig) GetIpRange() []*CrawlHostGroupConfig_IpRange {
	if m != nil {
		return m.IpRange
	}
	return nil
}

type CrawlHostGroupConfig_IpRange struct {
	IpFrom string `protobuf:"bytes,1,opt,name=ip_from,json=ipFrom" json:"ip_from,omitempty"`
	IpTo   string `protobuf:"bytes,2,opt,name=ip_to,json=ipTo" json:"ip_to,omitempty"`
}

func (m *CrawlHostGroupConfig_IpRange) Reset()         { *m = CrawlHostGroupConfig_IpRange{} }
func (m *CrawlHostGroupConfig_IpRange) String() string { return proto.CompactTextString(m) }
func (*CrawlHostGroupConfig_IpRange) ProtoMessage()    {}
func (*CrawlHostGroupConfig_IpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

func (m *CrawlHostGroupConfig_IpRange) GetIpFrom() string {
	if m != nil {
		return m.IpFrom
	}
	return ""
}

func (m *CrawlHostGroupConfig_IpRange) GetIpTo() string {
	if m != nil {
		return m.IpTo
	}
	return ""
}

type LogLevels struct {
	LogLevel []*LogLevels_LogLevel `protobuf:"bytes,1,rep,name=log_level,json=logLevel" json:"log_level,omitempty"`
}

func (m *LogLevels) Reset()                    { *m = LogLevels{} }
func (m *LogLevels) String() string            { return proto.CompactTextString(m) }
func (*LogLevels) ProtoMessage()               {}
func (*LogLevels) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *LogLevels) GetLogLevel() []*LogLevels_LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return nil
}

type LogLevels_LogLevel struct {
	Logger string          `protobuf:"bytes,1,opt,name=logger" json:"logger,omitempty"`
	Level  LogLevels_Level `protobuf:"varint,2,opt,name=level,enum=veidemann.api.LogLevels_Level" json:"level,omitempty"`
}

func (m *LogLevels_LogLevel) Reset()                    { *m = LogLevels_LogLevel{} }
func (m *LogLevels_LogLevel) String() string            { return proto.CompactTextString(m) }
func (*LogLevels_LogLevel) ProtoMessage()               {}
func (*LogLevels_LogLevel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 0} }

func (m *LogLevels_LogLevel) GetLogger() string {
	if m != nil {
		return m.Logger
	}
	return ""
}

func (m *LogLevels_LogLevel) GetLevel() LogLevels_Level {
	if m != nil {
		return m.Level
	}
	return LogLevels_UNDEFINED
}

type RoleMapping struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Types that are valid to be assigned to EmailOrGroup:
	//	*RoleMapping_Email
	//	*RoleMapping_Group
	EmailOrGroup isRoleMapping_EmailOrGroup `protobuf_oneof:"email_or_group"`
	Role         []Role                     `protobuf:"varint,4,rep,packed,name=role,enum=veidemann.api.Role" json:"role,omitempty"`
}

func (m *RoleMapping) Reset()                    { *m = RoleMapping{} }
func (m *RoleMapping) String() string            { return proto.CompactTextString(m) }
func (*RoleMapping) ProtoMessage()               {}
func (*RoleMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type isRoleMapping_EmailOrGroup interface {
	isRoleMapping_EmailOrGroup()
}

type RoleMapping_Email struct {
	Email string `protobuf:"bytes,2,opt,name=email,oneof"`
}
type RoleMapping_Group struct {
	Group string `protobuf:"bytes,3,opt,name=group,oneof"`
}

func (*RoleMapping_Email) isRoleMapping_EmailOrGroup() {}
func (*RoleMapping_Group) isRoleMapping_EmailOrGroup() {}

func (m *RoleMapping) GetEmailOrGroup() isRoleMapping_EmailOrGroup {
	if m != nil {
		return m.EmailOrGroup
	}
	return nil
}

func (m *RoleMapping) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoleMapping) GetEmail() string {
	if x, ok := m.GetEmailOrGroup().(*RoleMapping_Email); ok {
		return x.Email
	}
	return ""
}

func (m *RoleMapping) GetGroup() string {
	if x, ok := m.GetEmailOrGroup().(*RoleMapping_Group); ok {
		return x.Group
	}
	return ""
}

func (m *RoleMapping) GetRole() []Role {
	if m != nil {
		return m.Role
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RoleMapping) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RoleMapping_OneofMarshaler, _RoleMapping_OneofUnmarshaler, _RoleMapping_OneofSizer, []interface{}{
		(*RoleMapping_Email)(nil),
		(*RoleMapping_Group)(nil),
	}
}

func _RoleMapping_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RoleMapping)
	// email_or_group
	switch x := m.EmailOrGroup.(type) {
	case *RoleMapping_Email:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Email)
	case *RoleMapping_Group:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Group)
	case nil:
	default:
		return fmt.Errorf("RoleMapping.EmailOrGroup has unexpected type %T", x)
	}
	return nil
}

func _RoleMapping_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RoleMapping)
	switch tag {
	case 2: // email_or_group.email
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.EmailOrGroup = &RoleMapping_Email{x}
		return true, err
	case 3: // email_or_group.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.EmailOrGroup = &RoleMapping_Group{x}
		return true, err
	default:
		return false, nil
	}
}

func _RoleMapping_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RoleMapping)
	// email_or_group
	switch x := m.EmailOrGroup.(type) {
	case *RoleMapping_Email:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Email)))
		n += len(x.Email)
	case *RoleMapping_Group:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Group)))
		n += len(x.Group)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Meta)(nil), "veidemann.api.Meta")
	proto.RegisterType((*Selector)(nil), "veidemann.api.Selector")
	proto.RegisterType((*Label)(nil), "veidemann.api.Label")
	proto.RegisterType((*CrawlEntity)(nil), "veidemann.api.CrawlEntity")
	proto.RegisterType((*Seed)(nil), "veidemann.api.Seed")
	proto.RegisterType((*CrawlJob)(nil), "veidemann.api.CrawlJob")
	proto.RegisterType((*CrawlConfig)(nil), "veidemann.api.CrawlConfig")
	proto.RegisterType((*CrawlScheduleConfig)(nil), "veidemann.api.CrawlScheduleConfig")
	proto.RegisterType((*CrawlScope)(nil), "veidemann.api.CrawlScope")
	proto.RegisterType((*CrawlLimitsConfig)(nil), "veidemann.api.CrawlLimitsConfig")
	proto.RegisterType((*BrowserConfig)(nil), "veidemann.api.BrowserConfig")
	proto.RegisterType((*PolitenessConfig)(nil), "veidemann.api.PolitenessConfig")
	proto.RegisterType((*ExtraConfig)(nil), "veidemann.api.ExtraConfig")
	proto.RegisterType((*BrowserScript)(nil), "veidemann.api.BrowserScript")
	proto.RegisterType((*CrawlHostGroupConfig)(nil), "veidemann.api.CrawlHostGroupConfig")
	proto.RegisterType((*CrawlHostGroupConfig_IpRange)(nil), "veidemann.api.CrawlHostGroupConfig.IpRange")
	proto.RegisterType((*LogLevels)(nil), "veidemann.api.LogLevels")
	proto.RegisterType((*LogLevels_LogLevel)(nil), "veidemann.api.LogLevels.LogLevel")
	proto.RegisterType((*RoleMapping)(nil), "veidemann.api.RoleMapping")
	proto.RegisterEnum("veidemann.api.Role", Role_name, Role_value)
	proto.RegisterEnum("veidemann.api.PolitenessConfig_RobotsPolicy", PolitenessConfig_RobotsPolicy_name, PolitenessConfig_RobotsPolicy_value)
	proto.RegisterEnum("veidemann.api.LogLevels_Level", LogLevels_Level_name, LogLevels_Level_value)
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xcd, 0x72, 0x23, 0x49,
	0x11, 0xb6, 0x7e, 0xda, 0x92, 0x52, 0x3f, 0xd3, 0x2a, 0x7b, 0xc6, 0x5a, 0x2f, 0x33, 0xe3, 0xd1,
	0x42, 0xac, 0x77, 0x59, 0x64, 0xc2, 0xec, 0xc0, 0xb2, 0x07, 0x66, 0x25, 0x5b, 0x1a, 0x6b, 0xc2,
	0xb6, 0xbc, 0x25, 0x99, 0xc5, 0x5c, 0x3a, 0x4a, 0xea, 0xb2, 0x5c, 0x4b, 0x77, 0x57, 0x47, 0x77,
	0x69, 0x2c, 0x9d, 0xb8, 0x72, 0xe3, 0x09, 0x88, 0xe0, 0xc8, 0x8d, 0x57, 0xe0, 0x11, 0x78, 0x0d,
	0x2e, 0x3c, 0x03, 0x51, 0x3f, 0x6a, 0xfd, 0x8c, 0xb1, 0x17, 0x73, 0xab, 0xfa, 0x32, 0xf3, 0xcb,
	0xaa, 0xac, 0xcc, 0xac, 0xea, 0x86, 0xd2, 0x88, 0x07, 0xd7, 0x6c, 0xdc, 0x08, 0x23, 0x2e, 0x38,
	0x2a, 0xbf, 0xa7, 0xcc, 0xa5, 0x3e, 0x09, 0x82, 0x06, 0x09, 0xd9, 0xee, 0xcb, 0x31, 0xe7, 0x63,
	0x8f, 0x1e, 0x28, 0xe1, 0x70, 0x72, 0x7d, 0x20, 0x98, 0x4f, 0x63, 0x41, 0xfc, 0x50, 0xeb, 0xd7,
	0xff, 0x96, 0x86, 0xec, 0x19, 0x15, 0x04, 0x21, 0xc8, 0x06, 0xc4, 0xa7, 0xb5, 0xd4, 0x5e, 0x6a,
	0xbf, 0x80, 0xd5, 0x18, 0xed, 0x41, 0xd1, 0xa5, 0xf1, 0x28, 0x62, 0xa1, 0x60, 0x3c, 0xa8, 0xa5,
	0x95, 0x68, 0x19, 0x42, 0x5f, 0x42, 0x6e, 0x14, 0x51, 0x22, 0xa8, 0x5b, 0xcb, 0xec, 0xa5, 0xf6,
	0x8b, 0x87, 0xbb, 0x0d, 0xed, 0xb1, 0x31, 0xf7, 0xd8, 0x18, 0xcc, 0x3d, 0xe2, 0xb9, 0x2a, 0x7a,
	0x0e, 0x60, 0x86, 0xce, 0x70, 0x56, 0xcb, 0x2a, 0xda, 0x82, 0x41, 0x5a, 0x33, 0xf4, 0x06, 0xca,
	0x1e, 0x89, 0x85, 0xe3, 0x73, 0x97, 0x5d, 0x33, 0xea, 0xd6, 0xac, 0x07, 0xa9, 0x4b, 0xd2, 0xe0,
	0xcc, 0xe8, 0xa3, 0x7d, 0xb0, 0x57, 0x08, 0xa4, 0x97, 0x4d, 0xe5, 0xa5, 0xb2, 0xac, 0xd7, 0x9a,
	0xa1, 0xcf, 0xc1, 0xf2, 0xc8, 0x90, 0x7a, 0xb5, 0xdc, 0x5e, 0x66, 0xbf, 0x78, 0xb8, 0xdd, 0x58,
	0x09, 0x5f, 0xe3, 0x54, 0xca, 0xb0, 0x56, 0xa9, 0xff, 0x12, 0xf2, 0x7d, 0xea, 0xd1, 0x91, 0xe0,
	0xd1, 0xc2, 0x2e, 0xf5, 0xb0, 0xdd, 0x01, 0x58, 0x6a, 0x8e, 0x6c, 0xc8, 0xfc, 0x81, 0xce, 0x4c,
	0x84, 0xe5, 0x10, 0x6d, 0x83, 0xf5, 0x9e, 0x78, 0x13, 0x6a, 0x42, 0xab, 0x27, 0xf5, 0x0e, 0x14,
	0x8f, 0x22, 0x72, 0xeb, 0xb5, 0x03, 0xc1, 0xc4, 0x0c, 0x55, 0x20, 0xcd, 0x5c, 0x63, 0x95, 0x66,
	0x2e, 0xfa, 0x14, 0xb2, 0x3e, 0x15, 0x44, 0xd9, 0x14, 0x0f, 0xb7, 0xd6, 0x5c, 0xcb, 0xc3, 0xc4,
	0x4a, 0xa1, 0xfe, 0x8f, 0x14, 0x64, 0xfb, 0x94, 0xba, 0x8f, 0x66, 0x40, 0x1f, 0x43, 0x81, 0xaa,
	0x45, 0x38, 0x4c, 0x1f, 0x70, 0x01, 0xe7, 0x35, 0xd0, 0x75, 0xd1, 0x01, 0x58, 0xf1, 0x88, 0x87,
	0x54, 0x1d, 0x60, 0xf1, 0xf0, 0xa3, 0x35, 0x1a, 0xb5, 0x85, 0xbe, 0x54, 0xc0, 0x5a, 0x0f, 0x3d,
	0x85, 0xcd, 0xef, 0xf9, 0x50, 0x52, 0x59, 0x7b, 0x19, 0xb9, 0xdd, 0xef, 0xf9, 0xb0, 0xeb, 0xa2,
	0x5d, 0xc8, 0xbb, 0x2c, 0x26, 0x43, 0x8f, 0xba, 0x35, 0xb4, 0x97, 0xda, 0xcf, 0xe3, 0x64, 0x5e,
	0xff, 0x7b, 0x16, 0xf2, 0x8a, 0xe8, 0x1d, 0x1f, 0x3e, 0x7e, 0x1b, 0xaf, 0xa0, 0x18, 0x8f, 0x6e,
	0xa8, 0x3b, 0xf1, 0x68, 0xb2, 0x91, 0x93, 0x0d, 0x0c, 0x73, 0xb0, 0xeb, 0xa2, 0x6f, 0x20, 0x3f,
	0x9f, 0xd5, 0x6c, 0xc5, 0x57, 0xbf, 0x7b, 0x3f, 0x5a, 0xe7, 0x48, 0xd5, 0xdc, 0xc9, 0x06, 0x4e,
	0xac, 0x50, 0x07, 0xaa, 0x89, 0x93, 0xd8, 0xe4, 0x49, 0xed, 0x85, 0xa2, 0xda, 0x59, 0xa3, 0x9a,
	0xa7, 0xd1, 0xc9, 0x06, 0xb6, 0xe7, 0x36, 0x49, 0x6a, 0x7d, 0x05, 0x9b, 0x1e, 0xf3, 0x99, 0x88,
	0x4d, 0x5c, 0xf7, 0xee, 0x5a, 0xc7, 0xa9, 0xd2, 0xd0, 0xab, 0xc0, 0x46, 0x1f, 0xed, 0xc3, 0x93,
	0x91, 0x14, 0x3a, 0xba, 0x23, 0xe8, 0x40, 0xcb, 0xad, 0xa6, 0x70, 0x59, 0x09, 0xb4, 0x7e, 0xd7,
	0x45, 0x6f, 0xa0, 0xb4, 0xac, 0x59, 0xab, 0x9a, 0x02, 0xbb, 0xc3, 0x93, 0xd9, 0x69, 0x0a, 0x17,
	0x97, 0x28, 0xd0, 0x19, 0x3c, 0x5d, 0x71, 0x95, 0x6c, 0xf8, 0xe5, 0xfd, 0x1b, 0x4e, 0xe1, 0xad,
	0x25, 0x9a, 0x64, 0xcf, 0xf7, 0xa4, 0x40, 0x6b, 0x07, 0x9e, 0x26, 0x71, 0x35, 0xde, 0x78, 0xe4,
	0x30, 0xb7, 0xb5, 0x0d, 0x68, 0x65, 0x0d, 0x0a, 0xad, 0xff, 0x3b, 0x6b, 0xaa, 0xc7, 0xac, 0xf4,
	0xd1, 0x49, 0xf3, 0x05, 0x54, 0x87, 0x11, 0xbf, 0x8d, 0x69, 0xb4, 0x14, 0xcf, 0x9c, 0x49, 0x9d,
	0x27, 0x46, 0x94, 0x44, 0xb4, 0x0d, 0x95, 0x55, 0x6d, 0x93, 0x45, 0x3f, 0x5a, 0x73, 0xd0, 0x5a,
	0xb6, 0x3b, 0xd9, 0xc0, 0xe5, 0x15, 0x22, 0xf4, 0x2d, 0xec, 0xac, 0x39, 0x4d, 0x22, 0x5b, 0x7d,
	0x28, 0x95, 0x9e, 0xae, 0x50, 0x25, 0xb1, 0xfd, 0x09, 0x94, 0x43, 0xee, 0x31, 0x41, 0x03, 0x1a,
	0xc7, 0x72, 0x0f, 0x79, 0x93, 0x13, 0xa5, 0x05, 0xdc, 0x75, 0x51, 0x13, 0x60, 0x31, 0x57, 0x87,
	0x50, 0x3c, 0x7c, 0xb9, 0xe6, 0xec, 0x22, 0x51, 0x48, 0xb2, 0x62, 0xc9, 0x08, 0xbd, 0x83, 0xad,
	0x25, 0x4f, 0xc9, 0xc2, 0xb7, 0x1e, 0x4a, 0x09, 0xb4, 0xb0, 0x4a, 0x56, 0xfd, 0x73, 0xb0, 0xe8,
	0x54, 0x44, 0xa4, 0x56, 0xb8, 0x33, 0x35, 0xdb, 0x52, 0x66, 0xd2, 0x5f, 0x2b, 0xa2, 0xcf, 0xa0,
	0xea, 0xb3, 0x80, 0xf9, 0x13, 0xdf, 0x71, 0x83, 0xd8, 0x11, 0xc2, 0x73, 0xe2, 0x1a, 0xec, 0xa5,
	0xf6, 0x2d, 0x5c, 0x31, 0x82, 0xe3, 0x20, 0x1e, 0x08, 0xaf, 0x8f, 0x5e, 0xca, 0x7b, 0x2d, 0x14,
	0x37, 0xce, 0x35, 0x8b, 0x62, 0x51, 0xdb, 0x56, 0x19, 0x07, 0x0a, 0xea, 0x48, 0xa4, 0xf5, 0x0c,
	0xb6, 0xd7, 0x8e, 0x41, 0xa7, 0x1c, 0x02, 0x7b, 0x69, 0x87, 0x3a, 0xe1, 0xfe, 0x95, 0x82, 0xad,
	0x3b, 0x7a, 0xc3, 0xe3, 0x13, 0xef, 0x53, 0x59, 0xc6, 0x3c, 0x70, 0xe8, 0x34, 0x8c, 0x68, 0x1c,
	0xcb, 0x9b, 0x57, 0xb7, 0xde, 0x8a, 0x84, 0xdb, 0x09, 0x8a, 0x7e, 0x0d, 0xf0, 0x9e, 0x78, 0xcc,
	0x75, 0xae, 0x23, 0xee, 0x9b, 0x6e, 0x71, 0xdf, 0x25, 0x59, 0x50, 0xda, 0x9d, 0x88, 0xfb, 0xe8,
	0x35, 0xe4, 0xb5, 0xa9, 0xe0, 0x3f, 0xe0, 0x76, 0xcd, 0x29, 0xdd, 0x01, 0xaf, 0xff, 0x0c, 0x60,
	0xd1, 0xd6, 0x65, 0x18, 0xe3, 0x49, 0x24, 0x9c, 0x30, 0xa2, 0xd7, 0x6c, 0x6a, 0xb6, 0x0a, 0x12,
	0xba, 0x50, 0x48, 0xdd, 0x83, 0xea, 0x07, 0xdd, 0x4a, 0xde, 0x79, 0x2a, 0xd2, 0x4a, 0xdf, 0xc2,
	0x7a, 0x82, 0x7e, 0x0c, 0x15, 0x9f, 0x4c, 0x1d, 0x77, 0x12, 0x11, 0xf9, 0xb0, 0x70, 0x62, 0x15,
	0xa7, 0x0c, 0x2e, 0xf9, 0x64, 0x7a, 0x6c, 0xc0, 0xbe, 0xbc, 0x8f, 0xa4, 0xd6, 0x70, 0x26, 0x68,
	0xac, 0x82, 0x92, 0xc1, 0x79, 0x9f, 0x4c, 0x5b, 0x72, 0x5e, 0xff, 0x8b, 0x05, 0xe5, 0x95, 0xf2,
	0x7a, 0xfc, 0x11, 0x3c, 0x07, 0x98, 0xc8, 0xc3, 0x27, 0x63, 0x1a, 0x08, 0x13, 0xfd, 0x82, 0x44,
	0x9a, 0x12, 0x40, 0xaf, 0xa0, 0x74, 0xcb, 0x02, 0x97, 0xdf, 0x3a, 0xb7, 0xcc, 0x15, 0x37, 0x2a,
	0xf4, 0x16, 0x2e, 0x6a, 0xec, 0x3b, 0x09, 0xa1, 0x4f, 0xa0, 0x6c, 0x54, 0x6e, 0x28, 0x1b, 0xdf,
	0x08, 0x15, 0x65, 0x0b, 0x1b, 0xbb, 0x13, 0x85, 0xa1, 0x03, 0xd8, 0x0e, 0xc9, 0x98, 0x3a, 0x1e,
	0x27, 0xae, 0x23, 0x5f, 0x66, 0x7c, 0x22, 0x1c, 0x3f, 0x56, 0x6f, 0x95, 0x0c, 0xae, 0x4a, 0xd9,
	0x29, 0x27, 0xee, 0x40, 0x4b, 0xce, 0x62, 0xf4, 0x0d, 0x3c, 0xd1, 0x6f, 0xaf, 0x45, 0x75, 0xe5,
	0xee, 0xad, 0x2e, 0x5c, 0xd1, 0xfa, 0x49, 0x5d, 0x7d, 0x0c, 0x05, 0xc3, 0xa0, 0x3a, 0x81, 0xbc,
	0x86, 0xf3, 0x1a, 0xe8, 0xba, 0xe8, 0x08, 0x72, 0x37, 0x94, 0xb8, 0x34, 0x8a, 0x6b, 0xb6, 0x7a,
	0xd7, 0x7c, 0x76, 0x5f, 0xf7, 0x6a, 0x9c, 0x68, 0xdd, 0x76, 0x20, 0xa2, 0x19, 0x9e, 0x5b, 0x22,
	0x47, 0xde, 0x83, 0xca, 0x43, 0x48, 0x22, 0xe2, 0x53, 0x21, 0xe9, 0xaa, 0x8a, 0xee, 0xf0, 0x5e,
	0xba, 0xbe, 0xb2, 0xba, 0x48, 0x8c, 0x34, 0xaf, 0x1d, 0xaf, 0xc1, 0xe8, 0x35, 0xec, 0xc4, 0x1e,
	0xa5, 0xa1, 0x43, 0xae, 0x05, 0x8d, 0x1c, 0x19, 0x25, 0x15, 0x40, 0x5f, 0xb7, 0xad, 0x0c, 0xde,
	0x56, 0xe2, 0xa6, 0x94, 0x5e, 0x18, 0xe1, 0x59, 0xbc, 0xfb, 0x35, 0x94, 0x96, 0x17, 0xfc, 0x43,
	0x5f, 0x63, 0x5f, 0xa7, 0xbf, 0x4a, 0xed, 0x1e, 0xc1, 0xd3, 0x3b, 0x57, 0xf7, 0xbf, 0x90, 0xd4,
	0xff, 0x6a, 0x81, 0xbd, 0xde, 0x41, 0x1f, 0x9f, 0xa2, 0xdf, 0x42, 0x39, 0xe2, 0x43, 0x2e, 0x62,
	0x47, 0x76, 0xa4, 0xd1, 0x4c, 0x65, 0x69, 0xe5, 0xf0, 0x8b, 0x07, 0x5a, 0x76, 0x03, 0x2b, 0xa3,
	0x0b, 0x65, 0x83, 0x4b, 0xd1, 0xd2, 0x0c, 0xbd, 0x83, 0xfa, 0xbc, 0x83, 0x1a, 0x6a, 0x55, 0xf7,
	0xf2, 0xf9, 0xb7, 0x54, 0x97, 0x45, 0x95, 0xc8, 0x2f, 0x8c, 0xa6, 0xa6, 0xfb, 0xad, 0xd1, 0x5b,
	0x54, 0xea, 0x27, 0x50, 0x1e, 0x4d, 0x62, 0xc1, 0xe7, 0x54, 0xaa, 0xc9, 0x16, 0x70, 0x49, 0x83,
	0xda, 0x0a, 0xbd, 0x81, 0xe7, 0x3e, 0x0b, 0x54, 0xe6, 0x3b, 0x43, 0x2a, 0x6e, 0x29, 0x0d, 0x9c,
	0x45, 0x41, 0xf8, 0xfa, 0x05, 0x94, 0xc1, 0x35, 0x9f, 0x05, 0xb2, 0x06, 0x5a, 0x5a, 0xe5, 0xc2,
	0x94, 0xc5, 0x99, 0x26, 0x20, 0xd3, 0x7b, 0x08, 0x2c, 0x43, 0x40, 0xa6, 0x77, 0x13, 0xbc, 0x82,
	0x92, 0x4b, 0x3d, 0x32, 0x73, 0xae, 0x89, 0xaa, 0x26, 0x59, 0x79, 0x69, 0xf9, 0x89, 0xe3, 0x91,
	0x59, 0x47, 0x41, 0xb2, 0xcb, 0x49, 0x1f, 0x11, 0x15, 0x11, 0xa3, 0xb1, 0xaa, 0x37, 0x0b, 0x83,
	0x4f, 0xa6, 0x58, 0x23, 0xa8, 0x01, 0x5b, 0x52, 0x38, 0x73, 0x34, 0x53, 0x4c, 0x47, 0x3c, 0x70,
	0x63, 0x75, 0xcd, 0x5a, 0xb8, 0xaa, 0x44, 0xc7, 0x52, 0xd2, 0xd7, 0x02, 0x84, 0xe1, 0x23, 0xfd,
	0x6e, 0xb9, 0xe1, 0xb1, 0x70, 0xc6, 0x11, 0x9f, 0x84, 0x8b, 0x72, 0x2e, 0xdc, 0x5f, 0xce, 0xcf,
	0x94, 0xe5, 0x09, 0x8f, 0xc5, 0x5b, 0x69, 0x37, 0xc7, 0xeb, 0x6d, 0x28, 0x2d, 0x1f, 0x2c, 0x7a,
	0x02, 0xc5, 0x5e, 0xab, 0x7d, 0xe5, 0xe0, 0x5e, 0xab, 0x37, 0xe8, 0xdb, 0x1b, 0xa8, 0x0a, 0xe5,
	0xee, 0xdb, 0xf3, 0x1e, 0x6e, 0xcf, 0xa1, 0x94, 0x84, 0x8e, 0x2e, 0xfb, 0x83, 0xde, 0xd9, 0x1c,
	0x4a, 0xd7, 0xaf, 0xa0, 0xb8, 0x74, 0xb3, 0xca, 0xe8, 0xa8, 0xbb, 0x75, 0x24, 0x1c, 0x41, 0xa7,
	0xba, 0x87, 0xe5, 0x71, 0xd1, 0x60, 0x03, 0x3a, 0x15, 0xfa, 0xb2, 0x92, 0x1f, 0x6e, 0x4e, 0x1c,
	0x90, 0x30, 0xbe, 0xe1, 0x42, 0xc5, 0x30, 0x2f, 0x2f, 0x2b, 0x09, 0xf7, 0x0d, 0x5a, 0xff, 0x63,
	0xd2, 0x9c, 0x75, 0x25, 0x3d, 0x3e, 0xf3, 0x9f, 0xc1, 0xa6, 0xee, 0x09, 0xa6, 0x31, 0x9b, 0x99,
	0x6a, 0xda, 0x91, 0xe7, 0x44, 0x74, 0x4c, 0xa7, 0xe1, 0xfc, 0xab, 0x72, 0x12, 0x79, 0x58, 0x01,
	0xf5, 0x7f, 0xa6, 0x60, 0xfb, 0x68, 0x25, 0x7a, 0xff, 0x6f, 0x09, 0x76, 0x20, 0xcf, 0x42, 0x27,
	0x22, 0xc1, 0x98, 0xd6, 0x32, 0xaa, 0xc1, 0xfd, 0xf4, 0xae, 0x17, 0xf4, 0x9a, 0xbf, 0x46, 0x37,
	0xc4, 0xd2, 0x04, 0xe7, 0x98, 0x1e, 0xec, 0xfe, 0x0a, 0x72, 0x06, 0x43, 0x3b, 0x90, 0x63, 0xa1,
	0xbe, 0xcf, 0xf5, 0x82, 0x36, 0x59, 0xa8, 0x2e, 0xec, 0x2d, 0xb0, 0x58, 0x28, 0x6f, 0x6b, 0xdd,
	0x56, 0xb2, 0x2c, 0x1c, 0xf0, 0xfa, 0x9f, 0xd3, 0x50, 0x38, 0xe5, 0xe3, 0x53, 0xfa, 0x9e, 0x7a,
	0x31, 0xfa, 0x0d, 0x14, 0x3c, 0x3e, 0x76, 0x3c, 0x39, 0x33, 0xdf, 0xa5, 0xaf, 0xd6, 0xbf, 0x4b,
	0xe7, 0xca, 0xc9, 0x08, 0xe7, 0x3d, 0x33, 0xda, 0xfd, 0x1d, 0xe4, 0xe7, 0xa8, 0x8c, 0xb1, 0xc7,
	0xc7, 0x63, 0x1a, 0xcd, 0x97, 0xa1, 0x67, 0xe8, 0x4b, 0xb0, 0x34, 0x7f, 0x5a, 0x75, 0x9b, 0x17,
	0xff, 0x9d, 0x5f, 0x91, 0x6b, 0xe5, 0xfa, 0x0d, 0x58, 0x9a, 0xb6, 0x0c, 0x85, 0xcb, 0xf3, 0xe3,
	0x76, 0xa7, 0x7b, 0xde, 0x3e, 0xb6, 0x37, 0x50, 0x0e, 0x32, 0xcd, 0xd3, 0x53, 0x3b, 0x85, 0x0a,
	0x60, 0x0d, 0x70, 0xf3, 0xa8, 0x6d, 0xa7, 0xe5, 0xf0, 0xb8, 0xdd, 0xba, 0x7c, 0x6b, 0x67, 0x50,
	0x1e, 0xb2, 0xdd, 0xf3, 0x4e, 0xcf, 0xce, 0xca, 0xd1, 0x77, 0x4d, 0x7c, 0x6e, 0x5b, 0x52, 0xdc,
	0xc6, 0xb8, 0x87, 0xed, 0x4d, 0x39, 0xec, 0x34, 0x07, 0xcd, 0x53, 0x3b, 0x27, 0x89, 0x7a, 0x9d,
	0x8e, 0x9d, 0xaf, 0xff, 0x29, 0x05, 0x45, 0xcc, 0x3d, 0x7a, 0x46, 0xc2, 0x90, 0x05, 0x1f, 0x9e,
	0xed, 0x33, 0xb0, 0xa8, 0x4f, 0x98, 0x5e, 0xbf, 0x7c, 0xc8, 0xeb, 0xa9, 0xc4, 0x55, 0x21, 0x26,
	0xdf, 0x86, 0x7a, 0x2a, 0x73, 0x21, 0xe2, 0x9e, 0xfc, 0xc4, 0xcd, 0xec, 0x57, 0x3e, 0xc8, 0x05,
	0xe9, 0x09, 0x2b, 0x85, 0x96, 0x0d, 0x15, 0xc5, 0x24, 0x1f, 0x85, 0xca, 0xf4, 0xf3, 0x23, 0xc8,
	0x4a, 0x39, 0x2a, 0x41, 0xbe, 0x79, 0x7e, 0xe5, 0x5c, 0xf6, 0xdb, 0xd8, 0x6c, 0xf9, 0xfc, 0x4a,
	0x6f, 0xb9, 0x79, 0x7c, 0xd6, 0x3d, 0xb7, 0xd3, 0xa8, 0x08, 0xb9, 0xa3, 0x4b, 0xdc, 0x1c, 0xf4,
	0xb0, 0x9d, 0x91, 0xea, 0xb8, 0xdd, 0x3c, 0xee, 0x9d, 0x9f, 0x5e, 0xd9, 0xd9, 0xd6, 0x6b, 0xd8,
	0x09, 0x78, 0x23, 0x18, 0x36, 0x82, 0x80, 0xac, 0x3a, 0x6f, 0x15, 0x75, 0x3a, 0x5d, 0xc8, 0xe7,
	0xda, 0xef, 0x17, 0xbf, 0x7d, 0x1c, 0x12, 0xb2, 0xe1, 0xa6, 0x7a, 0xc4, 0xfd, 0xe2, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xf0, 0x29, 0x65, 0x56, 0x1c, 0x12, 0x00, 0x00,
}
