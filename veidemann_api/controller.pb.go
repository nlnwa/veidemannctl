// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Request for getting an object by id
type GetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specification of wich entities to get.
type ListRequest struct {
	// Select objects by id
	Id []string `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	// Select objects by name
	// The name query is a case insensitive regular expresion search on name.
	// <pre>
	// Examples:
	//   "foo"       - matches all names containing the phrase foo
	//   "^foo$"     - matches the exact name foo
	//   "foo.*bar$" - matches names containing foo followed by zero or more tokens and ends with bar
	// </pre>
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Select objects by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	LabelSelector []string `protobuf:"bytes,3,rep,name=label_selector,json=labelSelector" json:"label_selector,omitempty"`
	PageSize      int32    `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page          int32    `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListRequest) GetLabelSelector() []string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *ListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of entities
type CrawlEntityListReply struct {
	Value    []*CrawlEntity `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32          `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlEntityListReply) Reset()                    { *m = CrawlEntityListReply{} }
func (m *CrawlEntityListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlEntityListReply) ProtoMessage()               {}
func (*CrawlEntityListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CrawlEntityListReply) GetValue() []*CrawlEntity {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlEntityListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlEntityListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlEntityListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SeedListRequest struct {
	// Select objects by id
	Id []string `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	// Select objects by name
	// The name query is a case insensitive regular expresion search on name.
	// <pre>
	// Examples:
	//   "foo"       - matches all names containing the phrase foo
	//   "^foo$"     - matches the exact name foo
	//   "foo.*bar$" - matches names containing foo followed by zero or more tokens and ends with bar
	// </pre>
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Select objects by label
	// A string representing a label query. The query matches if at least one label matches the query.
	// If there are multiple queries, then each query must match at least one label.
	// Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
	// If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
	// If value is empty, all labels matching the key will match.
	// If key is empty, then the matching is done on the value for all keys.
	// If key is empty, then the <code>:</code> might be ommitted.
	// <pre>
	// Examples:
	//   "foo:bar"  - matches exactly labels with key=foo and value=bar
	//   "foo:"     - matches all labels with key=foo
	//   ":bar"     - matches all labels with value=bar
	//   "bar"      - matches all labels with value=bar
	//   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
	//   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
	//   ":"        - matches every label
	//   ""         - matches every label
	// </pre>
	LabelSelector []string `protobuf:"bytes,3,rep,name=label_selector,json=labelSelector" json:"label_selector,omitempty"`
	// Select objects by crawl job id
	CrawlJobId string `protobuf:"bytes,4,opt,name=crawl_job_id,json=crawlJobId" json:"crawl_job_id,omitempty"`
	// Select objects by entity id
	EntityId string `protobuf:"bytes,5,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	PageSize int32  `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32  `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *SeedListRequest) Reset()                    { *m = SeedListRequest{} }
func (m *SeedListRequest) String() string            { return proto.CompactTextString(m) }
func (*SeedListRequest) ProtoMessage()               {}
func (*SeedListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SeedListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SeedListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SeedListRequest) GetLabelSelector() []string {
	if m != nil {
		return m.LabelSelector
	}
	return nil
}

func (m *SeedListRequest) GetCrawlJobId() string {
	if m != nil {
		return m.CrawlJobId
	}
	return ""
}

func (m *SeedListRequest) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *SeedListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SeedListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SeedListReply struct {
	Value    []*Seed `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32   `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32   `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *SeedListReply) Reset()                    { *m = SeedListReply{} }
func (m *SeedListReply) String() string            { return proto.CompactTextString(m) }
func (*SeedListReply) ProtoMessage()               {}
func (*SeedListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *SeedListReply) GetValue() []*Seed {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SeedListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SeedListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SeedListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CrawlJobListReply struct {
	Value    []*CrawlJob `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32       `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32       `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlJobListReply) Reset()                    { *m = CrawlJobListReply{} }
func (m *CrawlJobListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlJobListReply) ProtoMessage()               {}
func (*CrawlJobListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CrawlJobListReply) GetValue() []*CrawlJob {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlJobListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlJobListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlJobListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CrawlConfigListReply struct {
	Value    []*CrawlConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32          `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlConfigListReply) Reset()                    { *m = CrawlConfigListReply{} }
func (m *CrawlConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlConfigListReply) ProtoMessage()               {}
func (*CrawlConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CrawlConfigListReply) GetValue() []*CrawlConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CrawlScheduleConfigListReply struct {
	Value    []*CrawlScheduleConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64                  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32                  `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32                  `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlScheduleConfigListReply) Reset()                    { *m = CrawlScheduleConfigListReply{} }
func (m *CrawlScheduleConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlScheduleConfigListReply) ProtoMessage()               {}
func (*CrawlScheduleConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CrawlScheduleConfigListReply) GetValue() []*CrawlScheduleConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlScheduleConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlScheduleConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlScheduleConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type PolitenessConfigListReply struct {
	Value    []*PolitenessConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64               `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32               `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32               `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *PolitenessConfigListReply) Reset()                    { *m = PolitenessConfigListReply{} }
func (m *PolitenessConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*PolitenessConfigListReply) ProtoMessage()               {}
func (*PolitenessConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *PolitenessConfigListReply) GetValue() []*PolitenessConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PolitenessConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PolitenessConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PolitenessConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type BrowserConfigListReply struct {
	Value    []*BrowserConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64            `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32            `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32            `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *BrowserConfigListReply) Reset()                    { *m = BrowserConfigListReply{} }
func (m *BrowserConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*BrowserConfigListReply) ProtoMessage()               {}
func (*BrowserConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *BrowserConfigListReply) GetValue() []*BrowserConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BrowserConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BrowserConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *BrowserConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of browserscripts
type BrowserScriptListReply struct {
	Value    []*BrowserScript `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64            `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32            `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32            `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *BrowserScriptListReply) Reset()                    { *m = BrowserScriptListReply{} }
func (m *BrowserScriptListReply) String() string            { return proto.CompactTextString(m) }
func (*BrowserScriptListReply) ProtoMessage()               {}
func (*BrowserScriptListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *BrowserScriptListReply) GetValue() []*BrowserScript {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BrowserScriptListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BrowserScriptListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *BrowserScriptListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of CrawlHostGroupConfigs
type CrawlHostGroupConfigListReply struct {
	Value    []*CrawlHostGroupConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64                   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32                   `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32                   `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlHostGroupConfigListReply) Reset()                    { *m = CrawlHostGroupConfigListReply{} }
func (m *CrawlHostGroupConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlHostGroupConfigListReply) ProtoMessage()               {}
func (*CrawlHostGroupConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *CrawlHostGroupConfigListReply) GetValue() []*CrawlHostGroupConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlHostGroupConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlHostGroupConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlHostGroupConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Cick of a crawl job immediately
type RunCrawlRequest struct {
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// If seed id is submitted, only this seed will be harvested.
	// If empty, all seeds configured with the submitted job id will be harvested.
	SeedId string `protobuf:"bytes,6,opt,name=seed_id,json=seedId" json:"seed_id,omitempty"`
}

func (m *RunCrawlRequest) Reset()                    { *m = RunCrawlRequest{} }
func (m *RunCrawlRequest) String() string            { return proto.CompactTextString(m) }
func (*RunCrawlRequest) ProtoMessage()               {}
func (*RunCrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *RunCrawlRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *RunCrawlRequest) GetSeedId() string {
	if m != nil {
		return m.SeedId
	}
	return ""
}

type RunCrawlReply struct {
	JobExecutionId string `protobuf:"bytes,1,opt,name=job_execution_id,json=jobExecutionId" json:"job_execution_id,omitempty"`
}

func (m *RunCrawlReply) Reset()                    { *m = RunCrawlReply{} }
func (m *RunCrawlReply) String() string            { return proto.CompactTextString(m) }
func (*RunCrawlReply) ProtoMessage()               {}
func (*RunCrawlReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *RunCrawlReply) GetJobExecutionId() string {
	if m != nil {
		return m.JobExecutionId
	}
	return ""
}

type RoleList struct {
	Role []Role `protobuf:"varint,1,rep,packed,name=role,enum=veidemann.api.Role" json:"role,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *RoleList) GetRole() []Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type RoleMappingsListRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PageSize int32  `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32  `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *RoleMappingsListRequest) Reset()                    { *m = RoleMappingsListRequest{} }
func (m *RoleMappingsListRequest) String() string            { return proto.CompactTextString(m) }
func (*RoleMappingsListRequest) ProtoMessage()               {}
func (*RoleMappingsListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *RoleMappingsListRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoleMappingsListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoleMappingsListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type RoleMappingsListReply struct {
	Value    []*RoleMapping `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32          `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *RoleMappingsListReply) Reset()                    { *m = RoleMappingsListReply{} }
func (m *RoleMappingsListReply) String() string            { return proto.CompactTextString(m) }
func (*RoleMappingsListReply) ProtoMessage()               {}
func (*RoleMappingsListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *RoleMappingsListReply) GetValue() []*RoleMapping {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RoleMappingsListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RoleMappingsListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoleMappingsListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type OpenIdConnectIssuerReply struct {
	OpenIdConnectIssuer string `protobuf:"bytes,1,opt,name=open_id_connect_issuer,json=openIdConnectIssuer" json:"open_id_connect_issuer,omitempty"`
}

func (m *OpenIdConnectIssuerReply) Reset()                    { *m = OpenIdConnectIssuerReply{} }
func (m *OpenIdConnectIssuerReply) String() string            { return proto.CompactTextString(m) }
func (*OpenIdConnectIssuerReply) ProtoMessage()               {}
func (*OpenIdConnectIssuerReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *OpenIdConnectIssuerReply) GetOpenIdConnectIssuer() string {
	if m != nil {
		return m.OpenIdConnectIssuer
	}
	return ""
}

func init() {
	proto.RegisterType((*GetRequest)(nil), "veidemann.api.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "veidemann.api.ListRequest")
	proto.RegisterType((*CrawlEntityListReply)(nil), "veidemann.api.CrawlEntityListReply")
	proto.RegisterType((*SeedListRequest)(nil), "veidemann.api.SeedListRequest")
	proto.RegisterType((*SeedListReply)(nil), "veidemann.api.SeedListReply")
	proto.RegisterType((*CrawlJobListReply)(nil), "veidemann.api.CrawlJobListReply")
	proto.RegisterType((*CrawlConfigListReply)(nil), "veidemann.api.CrawlConfigListReply")
	proto.RegisterType((*CrawlScheduleConfigListReply)(nil), "veidemann.api.CrawlScheduleConfigListReply")
	proto.RegisterType((*PolitenessConfigListReply)(nil), "veidemann.api.PolitenessConfigListReply")
	proto.RegisterType((*BrowserConfigListReply)(nil), "veidemann.api.BrowserConfigListReply")
	proto.RegisterType((*BrowserScriptListReply)(nil), "veidemann.api.BrowserScriptListReply")
	proto.RegisterType((*CrawlHostGroupConfigListReply)(nil), "veidemann.api.CrawlHostGroupConfigListReply")
	proto.RegisterType((*RunCrawlRequest)(nil), "veidemann.api.RunCrawlRequest")
	proto.RegisterType((*RunCrawlReply)(nil), "veidemann.api.RunCrawlReply")
	proto.RegisterType((*RoleList)(nil), "veidemann.api.RoleList")
	proto.RegisterType((*RoleMappingsListRequest)(nil), "veidemann.api.RoleMappingsListRequest")
	proto.RegisterType((*RoleMappingsListReply)(nil), "veidemann.api.RoleMappingsListReply")
	proto.RegisterType((*OpenIdConnectIssuerReply)(nil), "veidemann.api.OpenIdConnectIssuerReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	// Get a crawl entity by ID
	GetCrawlEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlEntity, error)
	// List a set of crawl entities
	ListCrawlEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlEntityListReply, error)
	// Save a crawl entity
	SaveEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*CrawlEntity, error)
	// Delete a crawl entity
	DeleteEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a seed by ID
	GetSeed(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Seed, error)
	// List a set of seeds
	ListSeeds(ctx context.Context, in *SeedListRequest, opts ...grpc.CallOption) (*SeedListReply, error)
	SaveSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error)
	DeleteSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a crawl job by ID
	GetCrawlJob(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlJob, error)
	// List a set of crawl jobs
	ListCrawlJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlJobListReply, error)
	SaveCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*CrawlJob, error)
	DeleteCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a crawl config by ID
	GetCrawlConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlConfig, error)
	// List a set of crawl configs
	ListCrawlConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlConfigListReply, error)
	SaveCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*CrawlConfig, error)
	DeleteCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a crawl schedule config by ID
	GetCrawlScheduleConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlScheduleConfig, error)
	// List a set of crawl schedule configs
	ListCrawlScheduleConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlScheduleConfigListReply, error)
	SaveCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*CrawlScheduleConfig, error)
	DeleteCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a politeness config by ID
	GetPolitenessConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PolitenessConfig, error)
	// List a set of politeness configs
	ListPolitenessConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PolitenessConfigListReply, error)
	SavePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*PolitenessConfig, error)
	DeletePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a browser config by ID
	GetBrowserConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserConfig, error)
	// List a set of browser configs
	ListBrowserConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserConfigListReply, error)
	SaveBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*BrowserConfig, error)
	DeleteBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a browser script by ID
	GetBrowserScript(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserScript, error)
	// List a set of browser scripts
	ListBrowserScripts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserScriptListReply, error)
	SaveBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*BrowserScript, error)
	DeleteBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get a crawl host group config by ID
	GetCrawlHostGroupConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error)
	// List a set of crawl host group configs
	ListCrawlHostGroupConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfigListReply, error)
	SaveCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error)
	DeleteCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetLogConfig(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LogLevels, error)
	SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error)
	ListRoleMappings(ctx context.Context, in *RoleMappingsListRequest, opts ...grpc.CallOption) (*RoleMappingsListReply, error)
	SaveRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*RoleMapping, error)
	DeleteRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetRolesForActiveUser(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*RoleList, error)
	RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) GetCrawlEntity(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlEntity, error) {
	out := new(CrawlEntity)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlEntityListReply, error) {
	out := new(CrawlEntityListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*CrawlEntity, error) {
	out := new(CrawlEntity)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetSeed(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Seed, error) {
	out := new(Seed)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListSeeds(ctx context.Context, in *SeedListRequest, opts ...grpc.CallOption) (*SeedListReply, error) {
	out := new(SeedListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListSeeds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error) {
	out := new(Seed)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetCrawlJob(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlJob, error) {
	out := new(CrawlJob)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlJobs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlJobListReply, error) {
	out := new(CrawlJobListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*CrawlJob, error) {
	out := new(CrawlJob)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetCrawlConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlConfig, error) {
	out := new(CrawlConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlConfigListReply, error) {
	out := new(CrawlConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*CrawlConfig, error) {
	out := new(CrawlConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetCrawlScheduleConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlScheduleConfig, error) {
	out := new(CrawlScheduleConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlScheduleConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlScheduleConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlScheduleConfigListReply, error) {
	out := new(CrawlScheduleConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlScheduleConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*CrawlScheduleConfig, error) {
	out := new(CrawlScheduleConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlScheduleConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlScheduleConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetPolitenessConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PolitenessConfig, error) {
	out := new(PolitenessConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetPolitenessConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListPolitenessConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PolitenessConfigListReply, error) {
	out := new(PolitenessConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListPolitenessConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SavePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*PolitenessConfig, error) {
	out := new(PolitenessConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SavePolitenessConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeletePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeletePolitenessConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetBrowserConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserConfig, error) {
	out := new(BrowserConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetBrowserConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListBrowserConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserConfigListReply, error) {
	out := new(BrowserConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListBrowserConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*BrowserConfig, error) {
	out := new(BrowserConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveBrowserConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteBrowserConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetBrowserScript(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*BrowserScript, error) {
	out := new(BrowserScript)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetBrowserScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListBrowserScripts(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserScriptListReply, error) {
	out := new(BrowserScriptListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListBrowserScripts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*BrowserScript, error) {
	out := new(BrowserScript)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveBrowserScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteBrowserScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetCrawlHostGroupConfig(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error) {
	out := new(CrawlHostGroupConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetCrawlHostGroupConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlHostGroupConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfigListReply, error) {
	out := new(CrawlHostGroupConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlHostGroupConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error) {
	out := new(CrawlHostGroupConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlHostGroupConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlHostGroupConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetLogConfig(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetLogConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveLogConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListRoleMappings(ctx context.Context, in *RoleMappingsListRequest, opts ...grpc.CallOption) (*RoleMappingsListReply, error) {
	out := new(RoleMappingsListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListRoleMappings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*RoleMapping, error) {
	out := new(RoleMapping)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveRoleMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteRoleMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetRolesForActiveUser(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetRolesForActiveUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error) {
	out := new(RunCrawlReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/RunCrawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetOpenIdConnectIssuer(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*OpenIdConnectIssuerReply, error) {
	out := new(OpenIdConnectIssuerReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetOpenIdConnectIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// Get a crawl entity by ID
	GetCrawlEntity(context.Context, *GetRequest) (*CrawlEntity, error)
	// List a set of crawl entities
	ListCrawlEntities(context.Context, *ListRequest) (*CrawlEntityListReply, error)
	// Save a crawl entity
	SaveEntity(context.Context, *CrawlEntity) (*CrawlEntity, error)
	// Delete a crawl entity
	DeleteEntity(context.Context, *CrawlEntity) (*google_protobuf1.Empty, error)
	// Get a seed by ID
	GetSeed(context.Context, *GetRequest) (*Seed, error)
	// List a set of seeds
	ListSeeds(context.Context, *SeedListRequest) (*SeedListReply, error)
	SaveSeed(context.Context, *Seed) (*Seed, error)
	DeleteSeed(context.Context, *Seed) (*google_protobuf1.Empty, error)
	// Get a crawl job by ID
	GetCrawlJob(context.Context, *GetRequest) (*CrawlJob, error)
	// List a set of crawl jobs
	ListCrawlJobs(context.Context, *ListRequest) (*CrawlJobListReply, error)
	SaveCrawlJob(context.Context, *CrawlJob) (*CrawlJob, error)
	DeleteCrawlJob(context.Context, *CrawlJob) (*google_protobuf1.Empty, error)
	// Get a crawl config by ID
	GetCrawlConfig(context.Context, *GetRequest) (*CrawlConfig, error)
	// List a set of crawl configs
	ListCrawlConfigs(context.Context, *ListRequest) (*CrawlConfigListReply, error)
	SaveCrawlConfig(context.Context, *CrawlConfig) (*CrawlConfig, error)
	DeleteCrawlConfig(context.Context, *CrawlConfig) (*google_protobuf1.Empty, error)
	// Get a crawl schedule config by ID
	GetCrawlScheduleConfig(context.Context, *GetRequest) (*CrawlScheduleConfig, error)
	// List a set of crawl schedule configs
	ListCrawlScheduleConfigs(context.Context, *ListRequest) (*CrawlScheduleConfigListReply, error)
	SaveCrawlScheduleConfig(context.Context, *CrawlScheduleConfig) (*CrawlScheduleConfig, error)
	DeleteCrawlScheduleConfig(context.Context, *CrawlScheduleConfig) (*google_protobuf1.Empty, error)
	// Get a politeness config by ID
	GetPolitenessConfig(context.Context, *GetRequest) (*PolitenessConfig, error)
	// List a set of politeness configs
	ListPolitenessConfigs(context.Context, *ListRequest) (*PolitenessConfigListReply, error)
	SavePolitenessConfig(context.Context, *PolitenessConfig) (*PolitenessConfig, error)
	DeletePolitenessConfig(context.Context, *PolitenessConfig) (*google_protobuf1.Empty, error)
	// Get a browser config by ID
	GetBrowserConfig(context.Context, *GetRequest) (*BrowserConfig, error)
	// List a set of browser configs
	ListBrowserConfigs(context.Context, *ListRequest) (*BrowserConfigListReply, error)
	SaveBrowserConfig(context.Context, *BrowserConfig) (*BrowserConfig, error)
	DeleteBrowserConfig(context.Context, *BrowserConfig) (*google_protobuf1.Empty, error)
	// Get a browser script by ID
	GetBrowserScript(context.Context, *GetRequest) (*BrowserScript, error)
	// List a set of browser scripts
	ListBrowserScripts(context.Context, *ListRequest) (*BrowserScriptListReply, error)
	SaveBrowserScript(context.Context, *BrowserScript) (*BrowserScript, error)
	DeleteBrowserScript(context.Context, *BrowserScript) (*google_protobuf1.Empty, error)
	// Get a crawl host group config by ID
	GetCrawlHostGroupConfig(context.Context, *GetRequest) (*CrawlHostGroupConfig, error)
	// List a set of crawl host group configs
	ListCrawlHostGroupConfigs(context.Context, *ListRequest) (*CrawlHostGroupConfigListReply, error)
	SaveCrawlHostGroupConfig(context.Context, *CrawlHostGroupConfig) (*CrawlHostGroupConfig, error)
	DeleteCrawlHostGroupConfig(context.Context, *CrawlHostGroupConfig) (*google_protobuf1.Empty, error)
	GetLogConfig(context.Context, *google_protobuf1.Empty) (*LogLevels, error)
	SaveLogConfig(context.Context, *LogLevels) (*LogLevels, error)
	ListRoleMappings(context.Context, *RoleMappingsListRequest) (*RoleMappingsListReply, error)
	SaveRoleMapping(context.Context, *RoleMapping) (*RoleMapping, error)
	DeleteRoleMapping(context.Context, *RoleMapping) (*google_protobuf1.Empty, error)
	GetRolesForActiveUser(context.Context, *google_protobuf1.Empty) (*RoleList, error)
	RunCrawl(context.Context, *RunCrawlRequest) (*RunCrawlReply, error)
	// Get the configured OpenID connect issuer address
	GetOpenIdConnectIssuer(context.Context, *google_protobuf1.Empty) (*OpenIdConnectIssuerReply, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_GetCrawlEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlEntity(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlEntities(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveEntity(ctx, req.(*CrawlEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteEntity(ctx, req.(*CrawlEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetSeed(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListSeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListSeeds(ctx, req.(*SeedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlJob(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlJobs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlJob(ctx, req.(*CrawlJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlJob(ctx, req.(*CrawlJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlConfig(ctx, req.(*CrawlConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlConfig(ctx, req.(*CrawlConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlScheduleConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlScheduleConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlScheduleConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlScheduleConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlScheduleConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlScheduleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlScheduleConfig(ctx, req.(*CrawlScheduleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlScheduleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlScheduleConfig(ctx, req.(*CrawlScheduleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetPolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetPolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetPolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetPolitenessConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListPolitenessConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListPolitenessConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListPolitenessConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListPolitenessConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SavePolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolitenessConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SavePolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SavePolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SavePolitenessConfig(ctx, req.(*PolitenessConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeletePolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolitenessConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeletePolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeletePolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeletePolitenessConfig(ctx, req.(*PolitenessConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetBrowserConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListBrowserConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListBrowserConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListBrowserConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListBrowserConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveBrowserConfig(ctx, req.(*BrowserConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteBrowserConfig(ctx, req.(*BrowserConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetBrowserScript(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListBrowserScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListBrowserScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListBrowserScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListBrowserScripts(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveBrowserScript(ctx, req.(*BrowserScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteBrowserScript(ctx, req.(*BrowserScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetCrawlHostGroupConfig(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlHostGroupConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlHostGroupConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlHostGroupConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlHostGroupConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlHostGroupConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlHostGroupConfig(ctx, req.(*CrawlHostGroupConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlHostGroupConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlHostGroupConfig(ctx, req.(*CrawlHostGroupConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetLogConfig(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveLogConfig(ctx, req.(*LogLevels))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListRoleMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMappingsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListRoleMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListRoleMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListRoleMappings(ctx, req.(*RoleMappingsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveRoleMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveRoleMapping(ctx, req.(*RoleMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteRoleMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteRoleMapping(ctx, req.(*RoleMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetRolesForActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetRolesForActiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RunCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RunCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/RunCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RunCrawl(ctx, req.(*RunCrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetOpenIdConnectIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetOpenIdConnectIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetOpenIdConnectIssuer(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCrawlEntity",
			Handler:    _Controller_GetCrawlEntity_Handler,
		},
		{
			MethodName: "ListCrawlEntities",
			Handler:    _Controller_ListCrawlEntities_Handler,
		},
		{
			MethodName: "SaveEntity",
			Handler:    _Controller_SaveEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Controller_DeleteEntity_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _Controller_GetSeed_Handler,
		},
		{
			MethodName: "ListSeeds",
			Handler:    _Controller_ListSeeds_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _Controller_SaveSeed_Handler,
		},
		{
			MethodName: "DeleteSeed",
			Handler:    _Controller_DeleteSeed_Handler,
		},
		{
			MethodName: "GetCrawlJob",
			Handler:    _Controller_GetCrawlJob_Handler,
		},
		{
			MethodName: "ListCrawlJobs",
			Handler:    _Controller_ListCrawlJobs_Handler,
		},
		{
			MethodName: "SaveCrawlJob",
			Handler:    _Controller_SaveCrawlJob_Handler,
		},
		{
			MethodName: "DeleteCrawlJob",
			Handler:    _Controller_DeleteCrawlJob_Handler,
		},
		{
			MethodName: "GetCrawlConfig",
			Handler:    _Controller_GetCrawlConfig_Handler,
		},
		{
			MethodName: "ListCrawlConfigs",
			Handler:    _Controller_ListCrawlConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlConfig",
			Handler:    _Controller_SaveCrawlConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlConfig",
			Handler:    _Controller_DeleteCrawlConfig_Handler,
		},
		{
			MethodName: "GetCrawlScheduleConfig",
			Handler:    _Controller_GetCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "ListCrawlScheduleConfigs",
			Handler:    _Controller_ListCrawlScheduleConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlScheduleConfig",
			Handler:    _Controller_SaveCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlScheduleConfig",
			Handler:    _Controller_DeleteCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "GetPolitenessConfig",
			Handler:    _Controller_GetPolitenessConfig_Handler,
		},
		{
			MethodName: "ListPolitenessConfigs",
			Handler:    _Controller_ListPolitenessConfigs_Handler,
		},
		{
			MethodName: "SavePolitenessConfig",
			Handler:    _Controller_SavePolitenessConfig_Handler,
		},
		{
			MethodName: "DeletePolitenessConfig",
			Handler:    _Controller_DeletePolitenessConfig_Handler,
		},
		{
			MethodName: "GetBrowserConfig",
			Handler:    _Controller_GetBrowserConfig_Handler,
		},
		{
			MethodName: "ListBrowserConfigs",
			Handler:    _Controller_ListBrowserConfigs_Handler,
		},
		{
			MethodName: "SaveBrowserConfig",
			Handler:    _Controller_SaveBrowserConfig_Handler,
		},
		{
			MethodName: "DeleteBrowserConfig",
			Handler:    _Controller_DeleteBrowserConfig_Handler,
		},
		{
			MethodName: "GetBrowserScript",
			Handler:    _Controller_GetBrowserScript_Handler,
		},
		{
			MethodName: "ListBrowserScripts",
			Handler:    _Controller_ListBrowserScripts_Handler,
		},
		{
			MethodName: "SaveBrowserScript",
			Handler:    _Controller_SaveBrowserScript_Handler,
		},
		{
			MethodName: "DeleteBrowserScript",
			Handler:    _Controller_DeleteBrowserScript_Handler,
		},
		{
			MethodName: "GetCrawlHostGroupConfig",
			Handler:    _Controller_GetCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "ListCrawlHostGroupConfigs",
			Handler:    _Controller_ListCrawlHostGroupConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlHostGroupConfig",
			Handler:    _Controller_SaveCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlHostGroupConfig",
			Handler:    _Controller_DeleteCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "GetLogConfig",
			Handler:    _Controller_GetLogConfig_Handler,
		},
		{
			MethodName: "SaveLogConfig",
			Handler:    _Controller_SaveLogConfig_Handler,
		},
		{
			MethodName: "ListRoleMappings",
			Handler:    _Controller_ListRoleMappings_Handler,
		},
		{
			MethodName: "SaveRoleMapping",
			Handler:    _Controller_SaveRoleMapping_Handler,
		},
		{
			MethodName: "DeleteRoleMapping",
			Handler:    _Controller_DeleteRoleMapping_Handler,
		},
		{
			MethodName: "GetRolesForActiveUser",
			Handler:    _Controller_GetRolesForActiveUser_Handler,
		},
		{
			MethodName: "RunCrawl",
			Handler:    _Controller_RunCrawl_Handler,
		},
		{
			MethodName: "GetOpenIdConnectIssuer",
			Handler:    _Controller_GetOpenIdConnectIssuer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x5b, 0x6f, 0xdb, 0x46,
	0x16, 0xc6, 0xf8, 0x16, 0xfb, 0xc4, 0xd7, 0xf1, 0x45, 0x32, 0xed, 0x24, 0xca, 0x38, 0x76, 0x1c,
	0x39, 0x96, 0x02, 0x1b, 0x01, 0x36, 0x09, 0xf6, 0xc1, 0xf1, 0x66, 0xb5, 0x36, 0x12, 0x24, 0x90,
	0x90, 0x00, 0xeb, 0x05, 0x56, 0x4b, 0x49, 0x63, 0x99, 0x5e, 0x9a, 0xc3, 0x90, 0x94, 0xbd, 0xc9,
	0xb6, 0x01, 0xda, 0x22, 0x08, 0x92, 0x87, 0xde, 0xd2, 0x97, 0xf6, 0xa1, 0x45, 0x7f, 0x40, 0xff,
	0x41, 0x5f, 0xfa, 0xde, 0xb7, 0xfe, 0x85, 0xfe, 0x87, 0xbe, 0x16, 0x33, 0xa4, 0x2e, 0xa4, 0xc8,
	0x21, 0x65, 0x28, 0x4f, 0xb1, 0x38, 0x33, 0xe7, 0xfb, 0xce, 0x77, 0x3e, 0x0e, 0xcf, 0x4c, 0x60,
	0xba, 0xca, 0x0c, 0xc7, 0x62, 0xba, 0x4e, 0xad, 0x9c, 0x69, 0x31, 0x87, 0xe1, 0x89, 0x53, 0xaa,
	0xd5, 0xe8, 0x89, 0x6a, 0x18, 0x39, 0xd5, 0xd4, 0x94, 0xf1, 0x2a, 0x33, 0x0e, 0xb5, 0xba, 0x3b,
	0xa8, 0x2c, 0xd5, 0x19, 0xab, 0xeb, 0x34, 0x2f, 0x7e, 0x55, 0x1a, 0x87, 0x79, 0x7a, 0x62, 0x3a,
	0x2f, 0xbc, 0xc1, 0x65, 0x6f, 0x50, 0x35, 0xb5, 0xbc, 0x6a, 0x18, 0xcc, 0x51, 0x1d, 0x8d, 0x19,
	0xb6, 0x37, 0x7a, 0x53, 0xfc, 0x53, 0xdd, 0xac, 0x53, 0x63, 0xd3, 0x3e, 0x53, 0xeb, 0x75, 0x6a,
	0xe5, 0x99, 0x29, 0x66, 0x74, 0xcf, 0x26, 0xcb, 0x00, 0x05, 0xea, 0x14, 0xe9, 0xf3, 0x06, 0xb5,
	0x1d, 0x3c, 0x09, 0x03, 0x5a, 0x2d, 0x8d, 0x32, 0x68, 0x7d, 0xac, 0x38, 0xa0, 0xd5, 0xc8, 0x5b,
	0x04, 0x17, 0x1f, 0x6a, 0x76, 0xd7, 0xf8, 0xa0, 0x3b, 0x8e, 0x31, 0x0c, 0x19, 0xea, 0x09, 0x4d,
	0x0f, 0x88, 0x15, 0xe2, 0x6f, 0xbc, 0x0a, 0x93, 0xba, 0x5a, 0xa1, 0x7a, 0xd9, 0xa6, 0x3a, 0xad,
	0x3a, 0xcc, 0x4a, 0x0f, 0x8a, 0xf9, 0x13, 0xe2, 0x69, 0xc9, 0x7b, 0x88, 0x97, 0x60, 0xcc, 0x54,
	0xeb, 0xb4, 0x6c, 0x6b, 0x2f, 0x69, 0x7a, 0x32, 0x83, 0xd6, 0x87, 0x8b, 0xa3, 0xfc, 0x41, 0x49,
	0x7b, 0x49, 0x79, 0x5c, 0xfe, 0x77, 0x7a, 0x4a, 0x3c, 0x17, 0x7f, 0x93, 0x2f, 0x10, 0xcc, 0xed,
	0x5a, 0xea, 0x99, 0xfe, 0xc0, 0x70, 0x34, 0xe7, 0x85, 0x4b, 0xcb, 0xd4, 0x5f, 0xe0, 0x5b, 0x30,
	0x7c, 0xaa, 0xea, 0x0d, 0x2a, 0x78, 0x5d, 0xdc, 0x52, 0x72, 0x3e, 0x61, 0x73, 0x1d, 0x6b, 0x8a,
	0xee, 0x44, 0x3c, 0x07, 0xc3, 0x55, 0xd6, 0x30, 0x1c, 0xc1, 0x7b, 0xb0, 0xe8, 0xfe, 0xe8, 0x9d,
	0xd1, 0xaf, 0x08, 0xa6, 0x4a, 0x94, 0xd6, 0x3e, 0x90, 0x42, 0x19, 0x18, 0xaf, 0x72, 0xee, 0xe5,
	0x63, 0x56, 0x29, 0x6b, 0xb5, 0xf4, 0x90, 0x08, 0x01, 0xe2, 0xd9, 0x3e, 0xab, 0xec, 0xd5, 0x38,
	0x63, 0x2a, 0x12, 0xe3, 0xc3, 0xc3, 0x62, 0x78, 0xd4, 0x7d, 0xe0, 0x0e, 0xf6, 0x96, 0xce, 0x27,
	0x08, 0x26, 0xda, 0xe9, 0x70, 0x65, 0x6f, 0xf8, 0x95, 0x9d, 0x0d, 0x28, 0xcb, 0x27, 0xf7, 0x59,
	0xd2, 0xb7, 0x08, 0x66, 0x76, 0xbd, 0x04, 0xdb, 0x3c, 0x36, 0xfd, 0x3c, 0x52, 0x61, 0x15, 0xde,
	0x67, 0x95, 0x3e, 0x73, 0x69, 0x19, 0x6e, 0x57, 0xbc, 0x99, 0xbd, 0x19, 0xce, 0x5d, 0xd3, 0x67,
	0x46, 0x3f, 0x20, 0x58, 0x16, 0xd1, 0x4b, 0xd5, 0x23, 0x5a, 0x6b, 0xe8, 0x34, 0xc8, 0xec, 0x2f,
	0x7e, 0x66, 0x24, 0x8c, 0x99, 0x7f, 0x6d, 0x9f, 0x19, 0x7e, 0x8b, 0x60, 0xf1, 0x09, 0xd3, 0x35,
	0x87, 0x1a, 0xd4, 0xb6, 0x83, 0xf4, 0x6e, 0xfb, 0xe9, 0x5d, 0x09, 0xd0, 0x0b, 0x2e, 0xec, 0x33,
	0xb7, 0xf7, 0x08, 0x16, 0xee, 0x5b, 0xec, 0xcc, 0xa6, 0x56, 0x90, 0xd8, 0x96, 0x9f, 0xd8, 0x72,
	0x80, 0x98, 0x6f, 0xd5, 0x87, 0x63, 0x55, 0xaa, 0x5a, 0x9a, 0xe9, 0xf4, 0xca, 0xca, 0x5d, 0xd5,
	0x67, 0x56, 0x3f, 0x22, 0xb8, 0x24, 0xdc, 0xf2, 0x0f, 0x66, 0x3b, 0x05, 0x8b, 0x35, 0xcc, 0xa0,
	0x64, 0x77, 0xfc, 0xe4, 0x56, 0xc2, 0xac, 0x16, 0x58, 0xdc, 0x67, 0x8e, 0x3b, 0x30, 0x55, 0x6c,
	0x18, 0x02, 0xa8, 0xb9, 0xfb, 0xce, 0xc3, 0x88, 0xb7, 0x59, 0xba, 0xbb, 0xe1, 0xf0, 0xb1, 0xd8,
	0x27, 0x53, 0x70, 0xc1, 0xa6, 0xb4, 0xc6, 0x9f, 0x8f, 0x88, 0xe7, 0x23, 0xfc, 0xe7, 0x5e, 0x8d,
	0xdc, 0x81, 0x89, 0x76, 0x08, 0x9e, 0xd5, 0x3a, 0x4c, 0xf3, 0x00, 0xf4, 0x7f, 0xb4, 0xda, 0xe0,
	0x9f, 0xc9, 0x72, 0xeb, 0x73, 0x38, 0x79, 0xcc, 0x2a, 0x0f, 0x9a, 0x8f, 0xf7, 0x6a, 0x64, 0x1b,
	0x46, 0x8b, 0x4c, 0xa7, 0x5c, 0x10, 0x7c, 0x1d, 0x86, 0x2c, 0xa6, 0xbb, 0x52, 0x4c, 0x76, 0x6d,
	0x93, 0x7c, 0x5a, 0x51, 0x4c, 0x20, 0x07, 0x90, 0xe2, 0xbf, 0x1e, 0xa9, 0xa6, 0xa9, 0x19, 0x75,
	0x3b, 0xec, 0xc3, 0xe1, 0x7d, 0x7a, 0x7b, 0x97, 0xe3, 0x4b, 0x04, 0xf3, 0xdd, 0xc1, 0x13, 0xec,
	0x57, 0x1d, 0x8b, 0xfa, 0x5c, 0xa1, 0xc7, 0x90, 0x7e, 0x6c, 0x52, 0x63, 0xaf, 0xb6, 0xcb, 0x0c,
	0x83, 0x56, 0x9d, 0x3d, 0xdb, 0x6e, 0x50, 0xcb, 0x25, 0xb5, 0x0d, 0x0b, 0xcc, 0xa4, 0x5c, 0xe0,
	0x72, 0xd5, 0x1d, 0x2d, 0x6b, 0x62, 0xd8, 0xd3, 0x60, 0x96, 0x75, 0xaf, 0xdc, 0xfa, 0x63, 0x03,
	0x60, 0xb7, 0xd5, 0x48, 0xe1, 0xff, 0xc2, 0x64, 0x81, 0x3a, 0x1d, 0x1f, 0x78, 0xbc, 0x18, 0xc8,
	0xad, 0xdd, 0xdb, 0x28, 0x92, 0xbe, 0x80, 0x90, 0x4f, 0x7f, 0xfb, 0xfd, 0xfd, 0xc0, 0x32, 0x56,
	0x44, 0x4f, 0xe5, 0xb5, 0x6a, 0x79, 0xf1, 0x29, 0xd5, 0xa8, 0x9d, 0xff, 0xbf, 0x56, 0xfb, 0x18,
	0xdb, 0x30, 0xc3, 0x25, 0x6d, 0x2f, 0xd3, 0xa8, 0x8d, 0x83, 0x41, 0x3b, 0x2a, 0xaa, 0xac, 0x44,
	0x03, 0xb6, 0x6a, 0x43, 0x2e, 0x09, 0xe4, 0x14, 0x9e, 0x0f, 0x45, 0xc6, 0x6f, 0x10, 0x40, 0x49,
	0x3d, 0xa5, 0x5e, 0x7a, 0x92, 0x1c, 0xa4, 0xf9, 0xed, 0x08, 0x94, 0x7b, 0x4a, 0x38, 0xca, 0x5d,
	0x94, 0x3d, 0xb8, 0x42, 0x24, 0xb9, 0xdf, 0x45, 0x59, 0x7c, 0x08, 0xe3, 0x7f, 0xa3, 0x3a, 0x75,
	0x92, 0x50, 0x59, 0xc8, 0xb9, 0x1d, 0x6a, 0xae, 0xd9, 0xbe, 0xe6, 0x1e, 0xf0, 0xf6, 0xb5, 0x29,
	0x73, 0x56, 0x26, 0xf3, 0x01, 0x5c, 0x28, 0x50, 0x87, 0xb7, 0x16, 0xb2, 0x62, 0x86, 0xb5, 0x22,
	0xe4, 0x8a, 0x08, 0xbf, 0x88, 0x53, 0xbe, 0xf0, 0xfc, 0x55, 0xf7, 0x62, 0x53, 0x18, 0xe3, 0xca,
	0xf3, 0xc9, 0x36, 0xbe, 0x1c, 0x12, 0xa2, 0xb3, 0x7c, 0xcb, 0x91, 0xe3, 0xbc, 0x6e, 0x8a, 0xc0,
	0x9a, 0xc3, 0xb8, 0x1b, 0x0b, 0x3f, 0x87, 0x51, 0x5e, 0x33, 0x91, 0x43, 0x18, 0xd1, 0x70, 0xf6,
	0xf7, 0x44, 0xc4, 0xdb, 0x4a, 0x48, 0x44, 0x5e, 0xa0, 0x65, 0x12, 0x95, 0x16, 0xaf, 0xce, 0x01,
	0x80, 0x5b, 0x9d, 0x68, 0xd0, 0xa8, 0xa2, 0x78, 0xaa, 0x65, 0x23, 0x55, 0x3b, 0x84, 0x8b, 0xcd,
	0xb7, 0x6c, 0x9f, 0x55, 0x64, 0x55, 0x89, 0x6a, 0xcc, 0xc8, 0x8a, 0xc0, 0xb8, 0x84, 0x97, 0x7c,
	0x18, 0xa2, 0x93, 0x3d, 0x66, 0x15, 0x0f, 0xe7, 0x04, 0x26, 0x5a, 0x2f, 0xd8, 0x3e, 0xab, 0xc8,
	0x5f, 0xae, 0x4c, 0x04, 0x54, 0xbb, 0x42, 0x97, 0x05, 0x66, 0x1a, 0x2f, 0x84, 0x63, 0xe2, 0xd7,
	0x08, 0xc6, 0x79, 0x99, 0x5a, 0x89, 0x45, 0xb1, 0x8f, 0x4e, 0x6b, 0x57, 0x40, 0xfc, 0x55, 0x89,
	0x80, 0xe0, 0x65, 0xcb, 0x10, 0x59, 0xce, 0xee, 0x8b, 0x35, 0xe9, 0x96, 0x2e, 0x9e, 0x48, 0x54,
	0x09, 0x3d, 0x79, 0xb3, 0x52, 0x79, 0x59, 0x7b, 0xb3, 0x74, 0x3f, 0xc7, 0x3d, 0x6f, 0x96, 0xee,
	0x32, 0xb2, 0x26, 0xd0, 0x32, 0xf8, 0x72, 0x37, 0x9a, 0x7b, 0x86, 0xf5, 0x00, 0x4f, 0x61, 0xba,
	0x55, 0x4f, 0x77, 0xe9, 0x39, 0xf6, 0xcb, 0x40, 0xdb, 0x41, 0xae, 0x0a, 0xf0, 0x25, 0xbc, 0x18,
	0x09, 0x8e, 0xbf, 0xe1, 0xc7, 0xb2, 0x66, 0x61, 0xbd, 0x54, 0x25, 0xf9, 0x48, 0x73, 0xdd, 0x13,
	0x70, 0xbb, 0x4a, 0x34, 0x1c, 0x2f, 0xf2, 0x0a, 0x89, 0xd1, 0x82, 0xd7, 0x99, 0xc1, 0x4c, 0x47,
	0x9d, 0x13, 0xf0, 0x8a, 0xaa, 0xb6, 0xa7, 0x7f, 0x36, 0x4e, 0xff, 0x37, 0x08, 0x16, 0x9a, 0x15,
	0xf7, 0x37, 0xfd, 0xb2, 0xca, 0x27, 0x38, 0x33, 0x90, 0x9c, 0x60, 0xb0, 0x8e, 0xd7, 0xba, 0x19,
	0xd8, 0xde, 0x4c, 0x1f, 0x93, 0xcf, 0x11, 0xa4, 0x5b, 0x56, 0xf0, 0xc7, 0x92, 0x5b, 0x62, 0x23,
	0x9e, 0x4c, 0xdb, 0x1a, 0x37, 0x04, 0xab, 0x15, 0x7c, 0x35, 0x96, 0x15, 0xfe, 0x19, 0x41, 0xaa,
	0x65, 0x91, 0x80, 0x36, 0x09, 0x04, 0x48, 0x24, 0xd2, 0x3f, 0x05, 0x9d, 0x92, 0x12, 0x4f, 0x87,
	0x5b, 0x68, 0x83, 0x24, 0x14, 0x93, 0x5b, 0xe9, 0x0d, 0x82, 0xc5, 0x0e, 0x2f, 0x9d, 0x23, 0x81,
	0x28, 0x6f, 0x79, 0x95, 0xcd, 0x26, 0xad, 0xec, 0x2b, 0x98, 0x2d, 0x50, 0x27, 0x78, 0x70, 0x93,
	0xf9, 0x2b, 0xee, 0xd0, 0x47, 0x36, 0x04, 0x85, 0x55, 0xbc, 0xe2, 0xa3, 0x60, 0xb6, 0xa6, 0xf9,
	0xf0, 0x5f, 0x23, 0x98, 0xe7, 0x0e, 0x08, 0x46, 0x91, 0xdb, 0x6a, 0x3d, 0x86, 0x43, 0xdb, 0x53,
	0xe1, 0x7b, 0x5d, 0x17, 0x19, 0xfc, 0x13, 0x82, 0x39, 0x6e, 0xa8, 0x2e, 0x25, 0xe2, 0xd2, 0x8d,
	0xd7, 0xa3, 0x24, 0x28, 0x3c, 0x52, 0x62, 0x28, 0x70, 0x13, 0xad, 0x93, 0x24, 0xa2, 0x71, 0x07,
	0xbd, 0x82, 0x05, 0xd7, 0x40, 0xbd, 0x13, 0x8e, 0xb2, 0x8e, 0x57, 0xb7, 0x6c, 0xa2, 0xba, 0x35,
	0x60, 0xba, 0x40, 0x1d, 0xdf, 0xb9, 0x5a, 0x66, 0x1a, 0xe9, 0x81, 0x9c, 0xac, 0x0b, 0x64, 0x82,
	0x33, 0x3e, 0xe4, 0x8a, 0x3b, 0xc7, 0x07, 0xfb, 0x11, 0x60, 0x5e, 0x5b, 0xdf, 0x72, 0xb9, 0x55,
	0x56, 0x65, 0xc8, 0x6d, 0x9f, 0x84, 0x37, 0x38, 0x7e, 0x0a, 0xf8, 0x7b, 0x04, 0x33, 0xdc, 0x24,
	0xfe, 0xb4, 0xa5, 0xb9, 0xc5, 0x64, 0xfe, 0x48, 0xc0, 0x16, 0x14, 0x19, 0x2c, 0x37, 0xc6, 0x2a,
	0x89, 0xd5, 0x86, 0xbb, 0xa2, 0x01, 0xb3, 0xae, 0x2b, 0x7a, 0x61, 0x18, 0xe5, 0x07, 0xaf, 0x2a,
	0xd9, 0xf8, 0xaa, 0xf8, 0xcc, 0xe0, 0x5e, 0x67, 0x9c, 0xc3, 0x0c, 0xee, 0x42, 0xb9, 0x19, 0x6c,
	0x31, 0x27, 0xd4, 0x0c, 0xee, 0xf2, 0x73, 0x99, 0x21, 0x70, 0x6f, 0x23, 0x37, 0x83, 0x47, 0x21,
	0x68, 0x06, 0x2f, 0x6d, 0x69, 0x6e, 0x31, 0x99, 0x4b, 0xcd, 0xe0, 0xc1, 0x4a, 0xcc, 0xd0, 0xa9,
	0x4d, 0x98, 0x19, 0x12, 0x31, 0x3c, 0x97, 0x19, 0x7c, 0x55, 0x79, 0x87, 0x20, 0xd5, 0xec, 0x5a,
	0x02, 0xf7, 0x47, 0x32, 0x53, 0x24, 0xb9, 0x7f, 0x22, 0x79, 0xc1, 0xe2, 0x06, 0xbe, 0xde, 0xfd,
	0x75, 0x3b, 0x62, 0xb6, 0x53, 0xe7, 0x53, 0x7d, 0xce, 0xfc, 0x0a, 0xc1, 0x62, 0xab, 0x71, 0x09,
	0x44, 0x93, 0x5b, 0xe5, 0x66, 0x02, 0x3e, 0x6d, 0xc7, 0x64, 0x05, 0xb1, 0x6b, 0x98, 0xc4, 0x13,
	0xc3, 0xbf, 0x20, 0x48, 0xb7, 0x7a, 0x97, 0xa0, 0x42, 0x49, 0x64, 0x48, 0xa6, 0xd5, 0xbf, 0x04,
	0xa5, 0xa7, 0x4a, 0x02, 0x4a, 0xdc, 0x54, 0x37, 0x49, 0x52, 0x51, 0xb9, 0xb7, 0xde, 0x21, 0x50,
	0x3a, 0x1a, 0x98, 0x73, 0x65, 0x11, 0x65, 0x35, 0xaf, 0xc8, 0xd9, 0xc4, 0x45, 0xfe, 0x0f, 0x8c,
	0x17, 0xa8, 0xf3, 0x90, 0xd5, 0x3d, 0xf4, 0x88, 0xc0, 0x4a, 0x3a, 0x58, 0x6e, 0x56, 0x7f, 0x48,
	0x4f, 0xa9, 0x6e, 0x47, 0x1c, 0x35, 0x75, 0x56, 0x77, 0x71, 0xf0, 0x21, 0x4c, 0xf0, 0x8a, 0xb5,
	0x21, 0x22, 0x43, 0x49, 0x40, 0xbc, 0x93, 0x0f, 0x89, 0x00, 0xe1, 0xb2, 0x7e, 0x86, 0xdc, 0x23,
	0x57, 0xe7, 0x35, 0x20, 0x5e, 0x8b, 0xbe, 0xee, 0xeb, 0xbc, 0x80, 0x54, 0xae, 0xc5, 0xce, 0x8b,
	0x3e, 0x7f, 0x59, 0x4c, 0xa7, 0x27, 0x4d, 0xc0, 0xe6, 0xf9, 0xab, 0x23, 0x00, 0x96, 0xdc, 0x39,
	0x2a, 0x92, 0xb1, 0x88, 0xf3, 0x57, 0x27, 0x5c, 0xd8, 0xf9, 0xab, 0x73, 0xbc, 0xfb, 0xfc, 0x95,
	0x94, 0x57, 0x6f, 0xe7, 0xaf, 0x2e, 0x4c, 0x7c, 0x0c, 0xf3, 0x7c, 0x83, 0x62, 0x3a, 0xb5, 0xff,
	0xce, 0xac, 0x9d, 0xaa, 0xa3, 0x9d, 0xd2, 0xa7, 0x36, 0xb5, 0x22, 0x0d, 0x96, 0x0a, 0x21, 0xc3,
	0x95, 0x27, 0x19, 0x81, 0xa8, 0xe0, 0xb4, 0x0f, 0x51, 0x15, 0x11, 0x39, 0xae, 0x8d, 0x8f, 0x61,
	0xb4, 0x79, 0x91, 0xdd, 0x75, 0xb1, 0x15, 0xb8, 0x24, 0xef, 0xfa, 0x8a, 0xf8, 0x6e, 0xc0, 0x9b,
	0x58, 0xc4, 0x7f, 0x55, 0x68, 0x35, 0x0c, 0xf1, 0x06, 0x71, 0x21, 0x6d, 0x71, 0xac, 0x0c, 0xb9,
	0xd8, 0x8d, 0x4c, 0xec, 0x7a, 0x00, 0x31, 0xea, 0x52, 0x98, 0xa4, 0x05, 0x38, 0xc6, 0xd3, 0x3e,
	0x70, 0xad, 0x66, 0xde, 0xff, 0x0e, 0x7d, 0xbd, 0xf3, 0x6f, 0xfc, 0x0c, 0xd2, 0xcf, 0x9a, 0x91,
	0x32, 0xed, 0x8b, 0xe0, 0xcc, 0xce, 0x93, 0x3d, 0xb2, 0x0d, 0x63, 0xad, 0x31, 0xbc, 0x76, 0xe4,
	0x38, 0xa6, 0x7d, 0x37, 0x9f, 0xaf, 0x6b, 0xce, 0x51, 0xa3, 0x92, 0xab, 0xb2, 0x93, 0xbc, 0xa1,
	0x1b, 0x67, 0x6a, 0xbe, 0xc5, 0x64, 0x53, 0x35, 0xb5, 0xad, 0xe1, 0x5b, 0xb9, 0xad, 0xdc, 0xad,
	0xec, 0x10, 0x1a, 0x18, 0x1c, 0x82, 0x94, 0xc1, 0x72, 0x46, 0x25, 0x67, 0x18, 0xaa, 0x9f, 0xef,
	0xfd, 0xa9, 0x36, 0xd4, 0x13, 0x9e, 0xd9, 0x41, 0xfb, 0xff, 0xee, 0xcb, 0xaa, 0xa9, 0x55, 0x46,
	0x44, 0xbe, 0xdb, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xea, 0x7d, 0x0c, 0xe5, 0x1f, 0x00,
	0x00,
}
