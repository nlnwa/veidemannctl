// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Specification of wich entities to get.
type ListRequest struct {
	// Types that are valid to be assigned to Qry:
	//	*ListRequest_Id
	//	*ListRequest_Name
	//	*ListRequest_Selector
	Qry      isListRequest_Qry `protobuf_oneof:"qry"`
	PageSize int32             `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32             `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type isListRequest_Qry interface {
	isListRequest_Qry()
}

type ListRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type ListRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,oneof"`
}
type ListRequest_Selector struct {
	Selector *Selector `protobuf:"bytes,3,opt,name=selector,oneof"`
}

func (*ListRequest_Id) isListRequest_Qry()       {}
func (*ListRequest_Name) isListRequest_Qry()     {}
func (*ListRequest_Selector) isListRequest_Qry() {}

func (m *ListRequest) GetQry() isListRequest_Qry {
	if m != nil {
		return m.Qry
	}
	return nil
}

func (m *ListRequest) GetId() string {
	if x, ok := m.GetQry().(*ListRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (m *ListRequest) GetName() string {
	if x, ok := m.GetQry().(*ListRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (m *ListRequest) GetSelector() *Selector {
	if x, ok := m.GetQry().(*ListRequest_Selector); ok {
		return x.Selector
	}
	return nil
}

func (m *ListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ListRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ListRequest_OneofMarshaler, _ListRequest_OneofUnmarshaler, _ListRequest_OneofSizer, []interface{}{
		(*ListRequest_Id)(nil),
		(*ListRequest_Name)(nil),
		(*ListRequest_Selector)(nil),
	}
}

func _ListRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *ListRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *ListRequest_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *ListRequest_Selector:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Selector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ListRequest.Qry has unexpected type %T", x)
	}
	return nil
}

func _ListRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ListRequest)
	switch tag {
	case 1: // qry.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &ListRequest_Id{x}
		return true, err
	case 2: // qry.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &ListRequest_Name{x}
		return true, err
	case 3: // qry.selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.Qry = &ListRequest_Selector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ListRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *ListRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *ListRequest_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *ListRequest_Selector:
		s := proto.Size(x.Selector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A list of entities
type CrawlEntityListReply struct {
	Value    []*CrawlEntity `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32          `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlEntityListReply) Reset()                    { *m = CrawlEntityListReply{} }
func (m *CrawlEntityListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlEntityListReply) ProtoMessage()               {}
func (*CrawlEntityListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CrawlEntityListReply) GetValue() []*CrawlEntity {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlEntityListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlEntityListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlEntityListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SeedListRequest struct {
	// Types that are valid to be assigned to Qry:
	//	*SeedListRequest_Id
	//	*SeedListRequest_Name
	//	*SeedListRequest_CrawlJobId
	//	*SeedListRequest_Selector
	//	*SeedListRequest_EntityId
	Qry      isSeedListRequest_Qry `protobuf_oneof:"qry"`
	PageSize int32                 `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32                 `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *SeedListRequest) Reset()                    { *m = SeedListRequest{} }
func (m *SeedListRequest) String() string            { return proto.CompactTextString(m) }
func (*SeedListRequest) ProtoMessage()               {}
func (*SeedListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type isSeedListRequest_Qry interface {
	isSeedListRequest_Qry()
}

type SeedListRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type SeedListRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,oneof"`
}
type SeedListRequest_CrawlJobId struct {
	CrawlJobId string `protobuf:"bytes,3,opt,name=crawl_job_id,json=crawlJobId,oneof"`
}
type SeedListRequest_Selector struct {
	Selector *Selector `protobuf:"bytes,4,opt,name=selector,oneof"`
}
type SeedListRequest_EntityId struct {
	EntityId string `protobuf:"bytes,5,opt,name=entity_id,json=entityId,oneof"`
}

func (*SeedListRequest_Id) isSeedListRequest_Qry()         {}
func (*SeedListRequest_Name) isSeedListRequest_Qry()       {}
func (*SeedListRequest_CrawlJobId) isSeedListRequest_Qry() {}
func (*SeedListRequest_Selector) isSeedListRequest_Qry()   {}
func (*SeedListRequest_EntityId) isSeedListRequest_Qry()   {}

func (m *SeedListRequest) GetQry() isSeedListRequest_Qry {
	if m != nil {
		return m.Qry
	}
	return nil
}

func (m *SeedListRequest) GetId() string {
	if x, ok := m.GetQry().(*SeedListRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (m *SeedListRequest) GetName() string {
	if x, ok := m.GetQry().(*SeedListRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (m *SeedListRequest) GetCrawlJobId() string {
	if x, ok := m.GetQry().(*SeedListRequest_CrawlJobId); ok {
		return x.CrawlJobId
	}
	return ""
}

func (m *SeedListRequest) GetSelector() *Selector {
	if x, ok := m.GetQry().(*SeedListRequest_Selector); ok {
		return x.Selector
	}
	return nil
}

func (m *SeedListRequest) GetEntityId() string {
	if x, ok := m.GetQry().(*SeedListRequest_EntityId); ok {
		return x.EntityId
	}
	return ""
}

func (m *SeedListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SeedListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SeedListRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SeedListRequest_OneofMarshaler, _SeedListRequest_OneofUnmarshaler, _SeedListRequest_OneofSizer, []interface{}{
		(*SeedListRequest_Id)(nil),
		(*SeedListRequest_Name)(nil),
		(*SeedListRequest_CrawlJobId)(nil),
		(*SeedListRequest_Selector)(nil),
		(*SeedListRequest_EntityId)(nil),
	}
}

func _SeedListRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SeedListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *SeedListRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *SeedListRequest_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *SeedListRequest_CrawlJobId:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.CrawlJobId)
	case *SeedListRequest_Selector:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Selector); err != nil {
			return err
		}
	case *SeedListRequest_EntityId:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.EntityId)
	case nil:
	default:
		return fmt.Errorf("SeedListRequest.Qry has unexpected type %T", x)
	}
	return nil
}

func _SeedListRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SeedListRequest)
	switch tag {
	case 1: // qry.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &SeedListRequest_Id{x}
		return true, err
	case 2: // qry.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &SeedListRequest_Name{x}
		return true, err
	case 3: // qry.crawl_job_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &SeedListRequest_CrawlJobId{x}
		return true, err
	case 4: // qry.selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.Qry = &SeedListRequest_Selector{msg}
		return true, err
	case 5: // qry.entity_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &SeedListRequest_EntityId{x}
		return true, err
	default:
		return false, nil
	}
}

func _SeedListRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SeedListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *SeedListRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *SeedListRequest_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *SeedListRequest_CrawlJobId:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.CrawlJobId)))
		n += len(x.CrawlJobId)
	case *SeedListRequest_Selector:
		s := proto.Size(x.Selector)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SeedListRequest_EntityId:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EntityId)))
		n += len(x.EntityId)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SeedListReply struct {
	Value    []*Seed `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32   `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32   `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *SeedListReply) Reset()                    { *m = SeedListReply{} }
func (m *SeedListReply) String() string            { return proto.CompactTextString(m) }
func (*SeedListReply) ProtoMessage()               {}
func (*SeedListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SeedListReply) GetValue() []*Seed {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SeedListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SeedListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SeedListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CrawlJobListRequest struct {
	// Types that are valid to be assigned to Qry:
	//	*CrawlJobListRequest_Id
	//	*CrawlJobListRequest_Name
	//	*CrawlJobListRequest_Selector
	Qry isCrawlJobListRequest_Qry `protobuf_oneof:"qry"`
	// Expand dependencies (i.e. include the complete object graph)
	Expand   bool  `protobuf:"varint,13,opt,name=expand" json:"expand,omitempty"`
	PageSize int32 `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32 `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlJobListRequest) Reset()                    { *m = CrawlJobListRequest{} }
func (m *CrawlJobListRequest) String() string            { return proto.CompactTextString(m) }
func (*CrawlJobListRequest) ProtoMessage()               {}
func (*CrawlJobListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type isCrawlJobListRequest_Qry interface {
	isCrawlJobListRequest_Qry()
}

type CrawlJobListRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type CrawlJobListRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,oneof"`
}
type CrawlJobListRequest_Selector struct {
	Selector *Selector `protobuf:"bytes,3,opt,name=selector,oneof"`
}

func (*CrawlJobListRequest_Id) isCrawlJobListRequest_Qry()       {}
func (*CrawlJobListRequest_Name) isCrawlJobListRequest_Qry()     {}
func (*CrawlJobListRequest_Selector) isCrawlJobListRequest_Qry() {}

func (m *CrawlJobListRequest) GetQry() isCrawlJobListRequest_Qry {
	if m != nil {
		return m.Qry
	}
	return nil
}

func (m *CrawlJobListRequest) GetId() string {
	if x, ok := m.GetQry().(*CrawlJobListRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (m *CrawlJobListRequest) GetName() string {
	if x, ok := m.GetQry().(*CrawlJobListRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (m *CrawlJobListRequest) GetSelector() *Selector {
	if x, ok := m.GetQry().(*CrawlJobListRequest_Selector); ok {
		return x.Selector
	}
	return nil
}

func (m *CrawlJobListRequest) GetExpand() bool {
	if m != nil {
		return m.Expand
	}
	return false
}

func (m *CrawlJobListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlJobListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CrawlJobListRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CrawlJobListRequest_OneofMarshaler, _CrawlJobListRequest_OneofUnmarshaler, _CrawlJobListRequest_OneofSizer, []interface{}{
		(*CrawlJobListRequest_Id)(nil),
		(*CrawlJobListRequest_Name)(nil),
		(*CrawlJobListRequest_Selector)(nil),
	}
}

func _CrawlJobListRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CrawlJobListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *CrawlJobListRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *CrawlJobListRequest_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *CrawlJobListRequest_Selector:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Selector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CrawlJobListRequest.Qry has unexpected type %T", x)
	}
	return nil
}

func _CrawlJobListRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CrawlJobListRequest)
	switch tag {
	case 1: // qry.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &CrawlJobListRequest_Id{x}
		return true, err
	case 2: // qry.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &CrawlJobListRequest_Name{x}
		return true, err
	case 3: // qry.selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.Qry = &CrawlJobListRequest_Selector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CrawlJobListRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CrawlJobListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *CrawlJobListRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *CrawlJobListRequest_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *CrawlJobListRequest_Selector:
		s := proto.Size(x.Selector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CrawlJobListReply struct {
	Value    []*CrawlJob `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32       `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32       `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlJobListReply) Reset()                    { *m = CrawlJobListReply{} }
func (m *CrawlJobListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlJobListReply) ProtoMessage()               {}
func (*CrawlJobListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CrawlJobListReply) GetValue() []*CrawlJob {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlJobListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlJobListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlJobListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CrawlConfigListReply struct {
	Value    []*CrawlConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32          `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlConfigListReply) Reset()                    { *m = CrawlConfigListReply{} }
func (m *CrawlConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlConfigListReply) ProtoMessage()               {}
func (*CrawlConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *CrawlConfigListReply) GetValue() []*CrawlConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CrawlScheduleConfigListReply struct {
	Value    []*CrawlScheduleConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64                  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32                  `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32                  `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlScheduleConfigListReply) Reset()                    { *m = CrawlScheduleConfigListReply{} }
func (m *CrawlScheduleConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlScheduleConfigListReply) ProtoMessage()               {}
func (*CrawlScheduleConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *CrawlScheduleConfigListReply) GetValue() []*CrawlScheduleConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlScheduleConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlScheduleConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlScheduleConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type PolitenessConfigListReply struct {
	Value    []*PolitenessConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64               `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32               `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32               `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *PolitenessConfigListReply) Reset()                    { *m = PolitenessConfigListReply{} }
func (m *PolitenessConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*PolitenessConfigListReply) ProtoMessage()               {}
func (*PolitenessConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *PolitenessConfigListReply) GetValue() []*PolitenessConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PolitenessConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PolitenessConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PolitenessConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type BrowserConfigListReply struct {
	Value    []*BrowserConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64            `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32            `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32            `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *BrowserConfigListReply) Reset()                    { *m = BrowserConfigListReply{} }
func (m *BrowserConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*BrowserConfigListReply) ProtoMessage()               {}
func (*BrowserConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *BrowserConfigListReply) GetValue() []*BrowserConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BrowserConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BrowserConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *BrowserConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Specification of wich browserscripts to get.
type BrowserScriptListRequest struct {
	// Types that are valid to be assigned to Qry:
	//	*BrowserScriptListRequest_Id
	//	*BrowserScriptListRequest_Name
	//	*BrowserScriptListRequest_Selector
	Qry      isBrowserScriptListRequest_Qry `protobuf_oneof:"qry"`
	PageSize int32                          `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32                          `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *BrowserScriptListRequest) Reset()                    { *m = BrowserScriptListRequest{} }
func (m *BrowserScriptListRequest) String() string            { return proto.CompactTextString(m) }
func (*BrowserScriptListRequest) ProtoMessage()               {}
func (*BrowserScriptListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

type isBrowserScriptListRequest_Qry interface {
	isBrowserScriptListRequest_Qry()
}

type BrowserScriptListRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type BrowserScriptListRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,oneof"`
}
type BrowserScriptListRequest_Selector struct {
	Selector *Selector `protobuf:"bytes,4,opt,name=selector,oneof"`
}

func (*BrowserScriptListRequest_Id) isBrowserScriptListRequest_Qry()       {}
func (*BrowserScriptListRequest_Name) isBrowserScriptListRequest_Qry()     {}
func (*BrowserScriptListRequest_Selector) isBrowserScriptListRequest_Qry() {}

func (m *BrowserScriptListRequest) GetQry() isBrowserScriptListRequest_Qry {
	if m != nil {
		return m.Qry
	}
	return nil
}

func (m *BrowserScriptListRequest) GetId() string {
	if x, ok := m.GetQry().(*BrowserScriptListRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (m *BrowserScriptListRequest) GetName() string {
	if x, ok := m.GetQry().(*BrowserScriptListRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (m *BrowserScriptListRequest) GetSelector() *Selector {
	if x, ok := m.GetQry().(*BrowserScriptListRequest_Selector); ok {
		return x.Selector
	}
	return nil
}

func (m *BrowserScriptListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *BrowserScriptListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BrowserScriptListRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BrowserScriptListRequest_OneofMarshaler, _BrowserScriptListRequest_OneofUnmarshaler, _BrowserScriptListRequest_OneofSizer, []interface{}{
		(*BrowserScriptListRequest_Id)(nil),
		(*BrowserScriptListRequest_Name)(nil),
		(*BrowserScriptListRequest_Selector)(nil),
	}
}

func _BrowserScriptListRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BrowserScriptListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *BrowserScriptListRequest_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *BrowserScriptListRequest_Name:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *BrowserScriptListRequest_Selector:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Selector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BrowserScriptListRequest.Qry has unexpected type %T", x)
	}
	return nil
}

func _BrowserScriptListRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BrowserScriptListRequest)
	switch tag {
	case 1: // qry.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &BrowserScriptListRequest_Id{x}
		return true, err
	case 2: // qry.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Qry = &BrowserScriptListRequest_Name{x}
		return true, err
	case 4: // qry.selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.Qry = &BrowserScriptListRequest_Selector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BrowserScriptListRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BrowserScriptListRequest)
	// qry
	switch x := m.Qry.(type) {
	case *BrowserScriptListRequest_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *BrowserScriptListRequest_Name:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *BrowserScriptListRequest_Selector:
		s := proto.Size(x.Selector)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A list of browserscripts
type BrowserScriptListReply struct {
	Value    []*BrowserScript `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64            `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32            `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32            `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *BrowserScriptListReply) Reset()                    { *m = BrowserScriptListReply{} }
func (m *BrowserScriptListReply) String() string            { return proto.CompactTextString(m) }
func (*BrowserScriptListReply) ProtoMessage()               {}
func (*BrowserScriptListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *BrowserScriptListReply) GetValue() []*BrowserScript {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BrowserScriptListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BrowserScriptListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *BrowserScriptListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// A list of CrawlHostGroupConfigs
type CrawlHostGroupConfigListReply struct {
	Value    []*CrawlHostGroupConfig `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64                   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32                   `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32                   `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlHostGroupConfigListReply) Reset()                    { *m = CrawlHostGroupConfigListReply{} }
func (m *CrawlHostGroupConfigListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlHostGroupConfigListReply) ProtoMessage()               {}
func (*CrawlHostGroupConfigListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *CrawlHostGroupConfigListReply) GetValue() []*CrawlHostGroupConfig {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlHostGroupConfigListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlHostGroupConfigListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlHostGroupConfigListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// Cick of a crawl job immediately
type RunCrawlRequest struct {
	JobId string `protobuf:"bytes,5,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// If seed id is submitted, only this seed will be harvested.
	// If empty, all seeds configured with the submitted job id will be harvested.
	SeedId string `protobuf:"bytes,6,opt,name=seed_id,json=seedId" json:"seed_id,omitempty"`
}

func (m *RunCrawlRequest) Reset()                    { *m = RunCrawlRequest{} }
func (m *RunCrawlRequest) String() string            { return proto.CompactTextString(m) }
func (*RunCrawlRequest) ProtoMessage()               {}
func (*RunCrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *RunCrawlRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *RunCrawlRequest) GetSeedId() string {
	if m != nil {
		return m.SeedId
	}
	return ""
}

type RunCrawlReply struct {
	SeedExecutionId []string `protobuf:"bytes,1,rep,name=seed_execution_id,json=seedExecutionId" json:"seed_execution_id,omitempty"`
}

func (m *RunCrawlReply) Reset()                    { *m = RunCrawlReply{} }
func (m *RunCrawlReply) String() string            { return proto.CompactTextString(m) }
func (*RunCrawlReply) ProtoMessage()               {}
func (*RunCrawlReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

func (m *RunCrawlReply) GetSeedExecutionId() []string {
	if m != nil {
		return m.SeedExecutionId
	}
	return nil
}

type AbortCrawlRequest struct {
	ExecutionId string `protobuf:"bytes,1,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
}

func (m *AbortCrawlRequest) Reset()                    { *m = AbortCrawlRequest{} }
func (m *AbortCrawlRequest) String() string            { return proto.CompactTextString(m) }
func (*AbortCrawlRequest) ProtoMessage()               {}
func (*AbortCrawlRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

func (m *AbortCrawlRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

type RoleList struct {
	Role []Role `protobuf:"varint,1,rep,packed,name=role,enum=veidemann.api.Role" json:"role,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

func (m *RoleList) GetRole() []Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type RoleMappingsListRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PageSize int32  `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32  `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *RoleMappingsListRequest) Reset()                    { *m = RoleMappingsListRequest{} }
func (m *RoleMappingsListRequest) String() string            { return proto.CompactTextString(m) }
func (*RoleMappingsListRequest) ProtoMessage()               {}
func (*RoleMappingsListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

func (m *RoleMappingsListRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoleMappingsListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoleMappingsListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type RoleMappingsListReply struct {
	Value    []*RoleMapping `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64          `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32          `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32          `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *RoleMappingsListReply) Reset()                    { *m = RoleMappingsListReply{} }
func (m *RoleMappingsListReply) String() string            { return proto.CompactTextString(m) }
func (*RoleMappingsListReply) ProtoMessage()               {}
func (*RoleMappingsListReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *RoleMappingsListReply) GetValue() []*RoleMapping {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RoleMappingsListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RoleMappingsListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *RoleMappingsListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func init() {
	proto.RegisterType((*ListRequest)(nil), "veidemann.api.ListRequest")
	proto.RegisterType((*CrawlEntityListReply)(nil), "veidemann.api.CrawlEntityListReply")
	proto.RegisterType((*SeedListRequest)(nil), "veidemann.api.SeedListRequest")
	proto.RegisterType((*SeedListReply)(nil), "veidemann.api.SeedListReply")
	proto.RegisterType((*CrawlJobListRequest)(nil), "veidemann.api.CrawlJobListRequest")
	proto.RegisterType((*CrawlJobListReply)(nil), "veidemann.api.CrawlJobListReply")
	proto.RegisterType((*CrawlConfigListReply)(nil), "veidemann.api.CrawlConfigListReply")
	proto.RegisterType((*CrawlScheduleConfigListReply)(nil), "veidemann.api.CrawlScheduleConfigListReply")
	proto.RegisterType((*PolitenessConfigListReply)(nil), "veidemann.api.PolitenessConfigListReply")
	proto.RegisterType((*BrowserConfigListReply)(nil), "veidemann.api.BrowserConfigListReply")
	proto.RegisterType((*BrowserScriptListRequest)(nil), "veidemann.api.BrowserScriptListRequest")
	proto.RegisterType((*BrowserScriptListReply)(nil), "veidemann.api.BrowserScriptListReply")
	proto.RegisterType((*CrawlHostGroupConfigListReply)(nil), "veidemann.api.CrawlHostGroupConfigListReply")
	proto.RegisterType((*RunCrawlRequest)(nil), "veidemann.api.RunCrawlRequest")
	proto.RegisterType((*RunCrawlReply)(nil), "veidemann.api.RunCrawlReply")
	proto.RegisterType((*AbortCrawlRequest)(nil), "veidemann.api.AbortCrawlRequest")
	proto.RegisterType((*RoleList)(nil), "veidemann.api.RoleList")
	proto.RegisterType((*RoleMappingsListRequest)(nil), "veidemann.api.RoleMappingsListRequest")
	proto.RegisterType((*RoleMappingsListReply)(nil), "veidemann.api.RoleMappingsListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	// List a set of entities
	ListCrawlEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlEntityListReply, error)
	SaveEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*CrawlEntity, error)
	DeleteEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List a set of seeds
	ListSeeds(ctx context.Context, in *SeedListRequest, opts ...grpc.CallOption) (*SeedListReply, error)
	SaveSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error)
	DeleteSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List a set of crawl jobs
	ListCrawlJobs(ctx context.Context, in *CrawlJobListRequest, opts ...grpc.CallOption) (*CrawlJobListReply, error)
	SaveCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*CrawlJob, error)
	DeleteCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List a set of crawl configs
	ListCrawlConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlConfigListReply, error)
	SaveCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*CrawlConfig, error)
	DeleteCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List a set of crawl schedule configs
	ListCrawlScheduleConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlScheduleConfigListReply, error)
	SaveCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*CrawlScheduleConfig, error)
	DeleteCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List a set of politeness configs
	ListPolitenessConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PolitenessConfigListReply, error)
	SavePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*PolitenessConfig, error)
	DeletePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List a set of browser configs
	ListBrowserConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserConfigListReply, error)
	SaveBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*BrowserConfig, error)
	DeleteBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	ListBrowserScripts(ctx context.Context, in *BrowserScriptListRequest, opts ...grpc.CallOption) (*BrowserScriptListReply, error)
	SaveBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*BrowserScript, error)
	DeleteBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	ListCrawlHostGroupConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfigListReply, error)
	SaveCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error)
	DeleteCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetLogConfig(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LogLevels, error)
	SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error)
	ListRoleMappings(ctx context.Context, in *RoleMappingsListRequest, opts ...grpc.CallOption) (*RoleMappingsListReply, error)
	SaveRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*RoleMapping, error)
	DeleteRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetRolesForActiveUser(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*RoleList, error)
	RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error)
	AbortCrawl(ctx context.Context, in *AbortCrawlRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) ListCrawlEntities(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlEntityListReply, error) {
	out := new(CrawlEntityListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*CrawlEntity, error) {
	out := new(CrawlEntity)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteEntity(ctx context.Context, in *CrawlEntity, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListSeeds(ctx context.Context, in *SeedListRequest, opts ...grpc.CallOption) (*SeedListReply, error) {
	out := new(SeedListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListSeeds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error) {
	out := new(Seed)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlJobs(ctx context.Context, in *CrawlJobListRequest, opts ...grpc.CallOption) (*CrawlJobListReply, error) {
	out := new(CrawlJobListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*CrawlJob, error) {
	out := new(CrawlJob)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlJob(ctx context.Context, in *CrawlJob, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlConfigListReply, error) {
	out := new(CrawlConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*CrawlConfig, error) {
	out := new(CrawlConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlConfig(ctx context.Context, in *CrawlConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlScheduleConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlScheduleConfigListReply, error) {
	out := new(CrawlScheduleConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlScheduleConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*CrawlScheduleConfig, error) {
	out := new(CrawlScheduleConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlScheduleConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlScheduleConfig(ctx context.Context, in *CrawlScheduleConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlScheduleConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListPolitenessConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PolitenessConfigListReply, error) {
	out := new(PolitenessConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListPolitenessConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SavePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*PolitenessConfig, error) {
	out := new(PolitenessConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SavePolitenessConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeletePolitenessConfig(ctx context.Context, in *PolitenessConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeletePolitenessConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListBrowserConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*BrowserConfigListReply, error) {
	out := new(BrowserConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListBrowserConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*BrowserConfig, error) {
	out := new(BrowserConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveBrowserConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteBrowserConfig(ctx context.Context, in *BrowserConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteBrowserConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListBrowserScripts(ctx context.Context, in *BrowserScriptListRequest, opts ...grpc.CallOption) (*BrowserScriptListReply, error) {
	out := new(BrowserScriptListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListBrowserScripts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*BrowserScript, error) {
	out := new(BrowserScript)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveBrowserScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteBrowserScript(ctx context.Context, in *BrowserScript, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteBrowserScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListCrawlHostGroupConfigs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CrawlHostGroupConfigListReply, error) {
	out := new(CrawlHostGroupConfigListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListCrawlHostGroupConfigs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*CrawlHostGroupConfig, error) {
	out := new(CrawlHostGroupConfig)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveCrawlHostGroupConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteCrawlHostGroupConfig(ctx context.Context, in *CrawlHostGroupConfig, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteCrawlHostGroupConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetLogConfig(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetLogConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveLogConfig(ctx context.Context, in *LogLevels, opts ...grpc.CallOption) (*LogLevels, error) {
	out := new(LogLevels)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveLogConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ListRoleMappings(ctx context.Context, in *RoleMappingsListRequest, opts ...grpc.CallOption) (*RoleMappingsListReply, error) {
	out := new(RoleMappingsListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/ListRoleMappings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) SaveRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*RoleMapping, error) {
	out := new(RoleMapping)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/SaveRoleMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteRoleMapping(ctx context.Context, in *RoleMapping, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/DeleteRoleMapping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetRolesForActiveUser(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*RoleList, error) {
	out := new(RoleList)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/GetRolesForActiveUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) RunCrawl(ctx context.Context, in *RunCrawlRequest, opts ...grpc.CallOption) (*RunCrawlReply, error) {
	out := new(RunCrawlReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/RunCrawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AbortCrawl(ctx context.Context, in *AbortCrawlRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/veidemann.api.Controller/AbortCrawl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	// List a set of entities
	ListCrawlEntities(context.Context, *ListRequest) (*CrawlEntityListReply, error)
	SaveEntity(context.Context, *CrawlEntity) (*CrawlEntity, error)
	DeleteEntity(context.Context, *CrawlEntity) (*google_protobuf1.Empty, error)
	// List a set of seeds
	ListSeeds(context.Context, *SeedListRequest) (*SeedListReply, error)
	SaveSeed(context.Context, *Seed) (*Seed, error)
	DeleteSeed(context.Context, *Seed) (*google_protobuf1.Empty, error)
	// List a set of crawl jobs
	ListCrawlJobs(context.Context, *CrawlJobListRequest) (*CrawlJobListReply, error)
	SaveCrawlJob(context.Context, *CrawlJob) (*CrawlJob, error)
	DeleteCrawlJob(context.Context, *CrawlJob) (*google_protobuf1.Empty, error)
	// List a set of crawl configs
	ListCrawlConfigs(context.Context, *ListRequest) (*CrawlConfigListReply, error)
	SaveCrawlConfig(context.Context, *CrawlConfig) (*CrawlConfig, error)
	DeleteCrawlConfig(context.Context, *CrawlConfig) (*google_protobuf1.Empty, error)
	// List a set of crawl schedule configs
	ListCrawlScheduleConfigs(context.Context, *ListRequest) (*CrawlScheduleConfigListReply, error)
	SaveCrawlScheduleConfig(context.Context, *CrawlScheduleConfig) (*CrawlScheduleConfig, error)
	DeleteCrawlScheduleConfig(context.Context, *CrawlScheduleConfig) (*google_protobuf1.Empty, error)
	// List a set of politeness configs
	ListPolitenessConfigs(context.Context, *ListRequest) (*PolitenessConfigListReply, error)
	SavePolitenessConfig(context.Context, *PolitenessConfig) (*PolitenessConfig, error)
	DeletePolitenessConfig(context.Context, *PolitenessConfig) (*google_protobuf1.Empty, error)
	// List a set of browser configs
	ListBrowserConfigs(context.Context, *ListRequest) (*BrowserConfigListReply, error)
	SaveBrowserConfig(context.Context, *BrowserConfig) (*BrowserConfig, error)
	DeleteBrowserConfig(context.Context, *BrowserConfig) (*google_protobuf1.Empty, error)
	ListBrowserScripts(context.Context, *BrowserScriptListRequest) (*BrowserScriptListReply, error)
	SaveBrowserScript(context.Context, *BrowserScript) (*BrowserScript, error)
	DeleteBrowserScript(context.Context, *BrowserScript) (*google_protobuf1.Empty, error)
	ListCrawlHostGroupConfigs(context.Context, *ListRequest) (*CrawlHostGroupConfigListReply, error)
	SaveCrawlHostGroupConfig(context.Context, *CrawlHostGroupConfig) (*CrawlHostGroupConfig, error)
	DeleteCrawlHostGroupConfig(context.Context, *CrawlHostGroupConfig) (*google_protobuf1.Empty, error)
	GetLogConfig(context.Context, *google_protobuf1.Empty) (*LogLevels, error)
	SaveLogConfig(context.Context, *LogLevels) (*LogLevels, error)
	ListRoleMappings(context.Context, *RoleMappingsListRequest) (*RoleMappingsListReply, error)
	SaveRoleMapping(context.Context, *RoleMapping) (*RoleMapping, error)
	DeleteRoleMapping(context.Context, *RoleMapping) (*google_protobuf1.Empty, error)
	GetRolesForActiveUser(context.Context, *google_protobuf1.Empty) (*RoleList, error)
	RunCrawl(context.Context, *RunCrawlRequest) (*RunCrawlReply, error)
	AbortCrawl(context.Context, *AbortCrawlRequest) (*google_protobuf1.Empty, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_ListCrawlEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlEntities(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveEntity(ctx, req.(*CrawlEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteEntity(ctx, req.(*CrawlEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListSeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListSeeds(ctx, req.(*SeedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlJobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlJobs(ctx, req.(*CrawlJobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlJob(ctx, req.(*CrawlJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlJob(ctx, req.(*CrawlJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlConfig(ctx, req.(*CrawlConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlConfig(ctx, req.(*CrawlConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlScheduleConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlScheduleConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlScheduleConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlScheduleConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlScheduleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlScheduleConfig(ctx, req.(*CrawlScheduleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlScheduleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlScheduleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlScheduleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlScheduleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlScheduleConfig(ctx, req.(*CrawlScheduleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListPolitenessConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListPolitenessConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListPolitenessConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListPolitenessConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SavePolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolitenessConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SavePolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SavePolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SavePolitenessConfig(ctx, req.(*PolitenessConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeletePolitenessConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolitenessConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeletePolitenessConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeletePolitenessConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeletePolitenessConfig(ctx, req.(*PolitenessConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListBrowserConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListBrowserConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListBrowserConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListBrowserConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveBrowserConfig(ctx, req.(*BrowserConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteBrowserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteBrowserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteBrowserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteBrowserConfig(ctx, req.(*BrowserConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListBrowserScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserScriptListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListBrowserScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListBrowserScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListBrowserScripts(ctx, req.(*BrowserScriptListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveBrowserScript(ctx, req.(*BrowserScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteBrowserScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowserScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteBrowserScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteBrowserScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteBrowserScript(ctx, req.(*BrowserScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListCrawlHostGroupConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListCrawlHostGroupConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListCrawlHostGroupConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListCrawlHostGroupConfigs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlHostGroupConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveCrawlHostGroupConfig(ctx, req.(*CrawlHostGroupConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteCrawlHostGroupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlHostGroupConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteCrawlHostGroupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteCrawlHostGroupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteCrawlHostGroupConfig(ctx, req.(*CrawlHostGroupConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetLogConfig(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveLogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveLogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveLogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveLogConfig(ctx, req.(*LogLevels))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ListRoleMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMappingsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListRoleMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/ListRoleMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListRoleMappings(ctx, req.(*RoleMappingsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_SaveRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).SaveRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/SaveRoleMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).SaveRoleMapping(ctx, req.(*RoleMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteRoleMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteRoleMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/DeleteRoleMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteRoleMapping(ctx, req.(*RoleMapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetRolesForActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/GetRolesForActiveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetRolesForActiveUser(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_RunCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).RunCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/RunCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).RunCrawl(ctx, req.(*RunCrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AbortCrawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortCrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AbortCrawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Controller/AbortCrawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AbortCrawl(ctx, req.(*AbortCrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCrawlEntities",
			Handler:    _Controller_ListCrawlEntities_Handler,
		},
		{
			MethodName: "SaveEntity",
			Handler:    _Controller_SaveEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Controller_DeleteEntity_Handler,
		},
		{
			MethodName: "ListSeeds",
			Handler:    _Controller_ListSeeds_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _Controller_SaveSeed_Handler,
		},
		{
			MethodName: "DeleteSeed",
			Handler:    _Controller_DeleteSeed_Handler,
		},
		{
			MethodName: "ListCrawlJobs",
			Handler:    _Controller_ListCrawlJobs_Handler,
		},
		{
			MethodName: "SaveCrawlJob",
			Handler:    _Controller_SaveCrawlJob_Handler,
		},
		{
			MethodName: "DeleteCrawlJob",
			Handler:    _Controller_DeleteCrawlJob_Handler,
		},
		{
			MethodName: "ListCrawlConfigs",
			Handler:    _Controller_ListCrawlConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlConfig",
			Handler:    _Controller_SaveCrawlConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlConfig",
			Handler:    _Controller_DeleteCrawlConfig_Handler,
		},
		{
			MethodName: "ListCrawlScheduleConfigs",
			Handler:    _Controller_ListCrawlScheduleConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlScheduleConfig",
			Handler:    _Controller_SaveCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlScheduleConfig",
			Handler:    _Controller_DeleteCrawlScheduleConfig_Handler,
		},
		{
			MethodName: "ListPolitenessConfigs",
			Handler:    _Controller_ListPolitenessConfigs_Handler,
		},
		{
			MethodName: "SavePolitenessConfig",
			Handler:    _Controller_SavePolitenessConfig_Handler,
		},
		{
			MethodName: "DeletePolitenessConfig",
			Handler:    _Controller_DeletePolitenessConfig_Handler,
		},
		{
			MethodName: "ListBrowserConfigs",
			Handler:    _Controller_ListBrowserConfigs_Handler,
		},
		{
			MethodName: "SaveBrowserConfig",
			Handler:    _Controller_SaveBrowserConfig_Handler,
		},
		{
			MethodName: "DeleteBrowserConfig",
			Handler:    _Controller_DeleteBrowserConfig_Handler,
		},
		{
			MethodName: "ListBrowserScripts",
			Handler:    _Controller_ListBrowserScripts_Handler,
		},
		{
			MethodName: "SaveBrowserScript",
			Handler:    _Controller_SaveBrowserScript_Handler,
		},
		{
			MethodName: "DeleteBrowserScript",
			Handler:    _Controller_DeleteBrowserScript_Handler,
		},
		{
			MethodName: "ListCrawlHostGroupConfigs",
			Handler:    _Controller_ListCrawlHostGroupConfigs_Handler,
		},
		{
			MethodName: "SaveCrawlHostGroupConfig",
			Handler:    _Controller_SaveCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "DeleteCrawlHostGroupConfig",
			Handler:    _Controller_DeleteCrawlHostGroupConfig_Handler,
		},
		{
			MethodName: "GetLogConfig",
			Handler:    _Controller_GetLogConfig_Handler,
		},
		{
			MethodName: "SaveLogConfig",
			Handler:    _Controller_SaveLogConfig_Handler,
		},
		{
			MethodName: "ListRoleMappings",
			Handler:    _Controller_ListRoleMappings_Handler,
		},
		{
			MethodName: "SaveRoleMapping",
			Handler:    _Controller_SaveRoleMapping_Handler,
		},
		{
			MethodName: "DeleteRoleMapping",
			Handler:    _Controller_DeleteRoleMapping_Handler,
		},
		{
			MethodName: "GetRolesForActiveUser",
			Handler:    _Controller_GetRolesForActiveUser_Handler,
		},
		{
			MethodName: "RunCrawl",
			Handler:    _Controller_RunCrawl_Handler,
		},
		{
			MethodName: "AbortCrawl",
			Handler:    _Controller_AbortCrawl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 1245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdb, 0x72, 0xdb, 0x44,
	0x18, 0x96, 0x92, 0x38, 0x38, 0x7f, 0xec, 0x38, 0xde, 0x1c, 0xac, 0xa8, 0x29, 0x98, 0x2d, 0x50,
	0x73, 0x72, 0x99, 0x74, 0xda, 0xa1, 0xd3, 0xab, 0x38, 0x4d, 0x73, 0x20, 0x9d, 0x29, 0xf2, 0x14,
	0xa6, 0xe1, 0xc2, 0x23, 0x4b, 0x1b, 0xa3, 0x8e, 0xa2, 0x55, 0x25, 0x39, 0x6d, 0x7a, 0xc7, 0x25,
	0x57, 0x30, 0xc3, 0x15, 0x57, 0x0c, 0x33, 0xbc, 0x00, 0xef, 0xc0, 0x63, 0xf0, 0x06, 0xbc, 0x04,
	0xb3, 0xbb, 0x8e, 0x2c, 0xc9, 0x96, 0xac, 0x18, 0xd3, 0x3b, 0xef, 0xfe, 0x07, 0x7d, 0xdf, 0xb7,
	0xab, 0xdd, 0x4f, 0x86, 0x55, 0x83, 0x3a, 0x81, 0x47, 0x6d, 0x9b, 0x78, 0x4d, 0xd7, 0xa3, 0x01,
	0x45, 0xe5, 0x0b, 0x62, 0x99, 0xe4, 0x5c, 0x77, 0x9c, 0xa6, 0xee, 0x5a, 0x6a, 0xc9, 0xa0, 0xce,
	0x99, 0xd5, 0x13, 0x41, 0xf5, 0x46, 0x8f, 0xd2, 0x9e, 0x4d, 0xee, 0xf0, 0x51, 0xb7, 0x7f, 0x76,
	0x87, 0x9c, 0xbb, 0xc1, 0xa5, 0x08, 0xe2, 0x3f, 0x64, 0x58, 0x3e, 0xb1, 0xfc, 0x40, 0x23, 0x2f,
	0xfb, 0xc4, 0x0f, 0xd0, 0x2a, 0xcc, 0x59, 0xa6, 0x22, 0xd7, 0xe5, 0xc6, 0xd2, 0xa1, 0xa4, 0xcd,
	0x59, 0x26, 0x5a, 0x87, 0x05, 0x47, 0x3f, 0x27, 0xca, 0xdc, 0x60, 0x8e, 0x8f, 0xd0, 0x3d, 0x28,
	0xfa, 0xc4, 0x26, 0x46, 0x40, 0x3d, 0x65, 0xbe, 0x2e, 0x37, 0x96, 0x77, 0x6a, 0xcd, 0x18, 0x88,
	0x66, 0x7b, 0x10, 0x3e, 0x94, 0xb4, 0x30, 0x15, 0xdd, 0x80, 0x25, 0x57, 0xef, 0x91, 0x8e, 0x6f,
	0xbd, 0x21, 0xca, 0x4a, 0x5d, 0x6e, 0x14, 0xb4, 0x22, 0x9b, 0x68, 0x5b, 0x6f, 0x08, 0x42, 0xb0,
	0xc0, 0x7e, 0x2b, 0x15, 0x3e, 0xcf, 0x7f, 0xb7, 0x0a, 0x30, 0xff, 0xd2, 0xbb, 0xc4, 0x3f, 0xc9,
	0xb0, 0xbe, 0xe7, 0xe9, 0xaf, 0xec, 0x7d, 0x27, 0xb0, 0x82, 0x4b, 0x81, 0xd8, 0xb5, 0x2f, 0xd1,
	0x17, 0x50, 0xb8, 0xd0, 0xed, 0x3e, 0x51, 0xe4, 0xfa, 0x7c, 0x63, 0x79, 0x47, 0x4d, 0x80, 0x88,
	0xd4, 0x68, 0x22, 0x11, 0xad, 0x43, 0xc1, 0xa0, 0x7d, 0x27, 0xe0, 0x84, 0xe6, 0x35, 0x31, 0xb8,
	0x36, 0x30, 0xfc, 0x8f, 0x0c, 0x95, 0x36, 0x21, 0xe6, 0x34, 0xe2, 0x61, 0x28, 0x19, 0x0c, 0x58,
	0xe7, 0x05, 0xed, 0x76, 0x2c, 0x93, 0x0b, 0xc8, 0xa2, 0xc0, 0x67, 0x8f, 0x69, 0xf7, 0xc8, 0x8c,
	0x09, 0xbc, 0x90, 0x5f, 0xe0, 0x9b, 0xb0, 0x44, 0x38, 0x5d, 0xd6, 0xb7, 0x30, 0xe8, 0x5b, 0x14,
	0x53, 0x47, 0xe6, 0xd4, 0xfa, 0xff, 0x20, 0x43, 0x79, 0xc8, 0x96, 0x09, 0xff, 0x71, 0x5c, 0xf8,
	0xb5, 0x11, 0x70, 0xc4, 0x9c, 0xb1, 0xe2, 0x7f, 0xc9, 0xb0, 0xb6, 0x37, 0x10, 0xe8, 0x2d, 0x6e,
	0xd9, 0x4d, 0x58, 0x24, 0xaf, 0x5d, 0xdd, 0x31, 0x95, 0x72, 0x5d, 0x6e, 0x14, 0xb5, 0xc1, 0x68,
	0x6a, 0x29, 0x7f, 0x94, 0xa1, 0x1a, 0xa7, 0xc1, 0xe4, 0xfc, 0x3c, 0x2e, 0x67, 0x6d, 0xdc, 0x3e,
	0x3e, 0xa6, 0xdd, 0x19, 0x4b, 0x1a, 0xbe, 0x56, 0x7b, 0xfc, 0xc0, 0xb8, 0xde, 0x6b, 0x25, 0x6a,
	0x66, 0x8c, 0xe8, 0x37, 0x19, 0xb6, 0x79, 0xf7, 0xb6, 0xf1, 0x3d, 0x31, 0xfb, 0x36, 0x49, 0x22,
	0xfb, 0x32, 0x8e, 0x0c, 0x8f, 0x43, 0x16, 0xaf, 0x9d, 0x31, 0xc2, 0x5f, 0x65, 0xd8, 0x7a, 0x4a,
	0x6d, 0x2b, 0x20, 0x0e, 0xf1, 0xfd, 0x24, 0xbc, 0x7b, 0x71, 0x78, 0xef, 0x25, 0xe0, 0x25, 0x0b,
	0x67, 0x8c, 0xed, 0x17, 0x19, 0x36, 0x5b, 0x1e, 0x7d, 0xe5, 0x13, 0x2f, 0x09, 0x6c, 0x27, 0x0e,
	0x6c, 0x3b, 0x01, 0x2c, 0x56, 0x35, 0x63, 0x54, 0x7f, 0xca, 0xa0, 0x0c, 0xfa, 0xb7, 0x0d, 0xcf,
	0x72, 0x83, 0xff, 0xfa, 0xf6, 0x2e, 0xfc, 0xff, 0x17, 0x4e, 0x44, 0xc9, 0x28, 0xe6, 0xfc, 0x4a,
	0x8a, 0xaa, 0x19, 0x2b, 0xf9, 0xbb, 0x0c, 0x37, 0xf9, 0x0e, 0x3f, 0xa4, 0x7e, 0x70, 0xe0, 0xd1,
	0xbe, 0x9b, 0x5c, 0xe6, 0x07, 0x71, 0x70, 0xb7, 0xc6, 0xbd, 0x1e, 0x89, 0xe2, 0x19, 0x63, 0xdc,
	0x85, 0x8a, 0xd6, 0x77, 0xf8, 0x83, 0xae, 0xd6, 0x78, 0x03, 0x16, 0x07, 0x37, 0x1d, 0xbf, 0x91,
	0xb4, 0xc2, 0x0b, 0x7e, 0xc5, 0xd5, 0xe0, 0x1d, 0x9f, 0x10, 0x93, 0xcd, 0x2f, 0xf2, 0xf9, 0x45,
	0x36, 0x3c, 0x32, 0xf1, 0x43, 0x28, 0x0f, 0x5b, 0x30, 0x56, 0x9f, 0x40, 0x95, 0x67, 0x92, 0xd7,
	0xc4, 0xe8, 0x07, 0x16, 0x75, 0x3a, 0x7c, 0xcf, 0xcc, 0x37, 0x96, 0xb4, 0x0a, 0x0b, 0xec, 0x5f,
	0xcd, 0x1f, 0x99, 0xf8, 0x3e, 0x54, 0x77, 0xbb, 0xd4, 0x0b, 0x62, 0x08, 0xde, 0x87, 0x52, 0xa2,
	0x96, 0x3d, 0x6f, 0x99, 0x44, 0xea, 0xee, 0x42, 0x51, 0xa3, 0x36, 0x61, 0x52, 0xa2, 0xdb, 0xb0,
	0xe0, 0x51, 0x5b, 0x88, 0xb8, 0x32, 0x72, 0xb7, 0xb1, 0x34, 0x8d, 0x27, 0xe0, 0x53, 0xa8, 0xb1,
	0xd1, 0x13, 0xdd, 0x75, 0x2d, 0xa7, 0xe7, 0x47, 0x37, 0xf6, 0xca, 0x70, 0x63, 0xf3, 0x6d, 0x7d,
	0x6d, 0x21, 0x7f, 0x96, 0x61, 0x63, 0xb4, 0x79, 0x8e, 0xd3, 0x39, 0x52, 0x34, 0xdb, 0xb5, 0xdd,
	0xf9, 0x7b, 0x13, 0x60, 0x2f, 0x34, 0x9f, 0xe8, 0x1b, 0xa8, 0x32, 0x50, 0x43, 0x93, 0x65, 0x11,
	0x1f, 0x25, 0xd1, 0x44, 0x34, 0x51, 0x6f, 0xa5, 0xdb, 0xb3, 0x90, 0x1d, 0x96, 0xd0, 0x63, 0x80,
	0xb6, 0x7e, 0x41, 0x44, 0x00, 0x65, 0x78, 0x3a, 0x35, 0x23, 0x86, 0x25, 0xf4, 0x08, 0x4a, 0x8f,
	0x88, 0x4d, 0x82, 0x3c, 0x9d, 0x36, 0x9b, 0xc2, 0x26, 0x37, 0xaf, 0x6c, 0x72, 0x73, 0x9f, 0xd9,
	0x64, 0x2c, 0xa1, 0xaf, 0x60, 0x89, 0x81, 0x63, 0x8e, 0xc6, 0x47, 0xef, 0x8e, 0xf1, 0x39, 0x51,
	0x86, 0xdb, 0xa9, 0x71, 0x41, 0xed, 0x3e, 0x14, 0x19, 0x35, 0x36, 0x8d, 0xc6, 0x79, 0x26, 0x75,
	0xdc, 0x24, 0x96, 0xd0, 0x43, 0x00, 0x41, 0x25, 0xbd, 0x32, 0x9d, 0xc1, 0xb7, 0x50, 0x0e, 0xd7,
	0xe9, 0x98, 0x76, 0x7d, 0x84, 0x53, 0xec, 0x45, 0x94, 0x49, 0x3d, 0x33, 0x47, 0xb0, 0x69, 0x41,
	0x89, 0xb1, 0xb9, 0x0a, 0xa1, 0x34, 0xdb, 0xa2, 0xa6, 0x05, 0xb0, 0x84, 0xf6, 0x60, 0x45, 0x30,
	0x9b, 0xdc, 0x25, 0x9d, 0xe1, 0x33, 0x58, 0x0d, 0x19, 0x8a, 0x53, 0x6d, 0x8a, 0x8d, 0x98, 0x38,
	0x4b, 0xf9, 0xd2, 0x57, 0x42, 0x7e, 0x22, 0x8a, 0x32, 0xac, 0x90, 0x9a, 0x11, 0xc3, 0x12, 0x3a,
	0x82, 0x6a, 0x84, 0x68, 0x8e, 0x76, 0xe9, 0x74, 0x09, 0x28, 0x21, 0xdd, 0xb8, 0xd9, 0xc9, 0xa6,
	0xfd, 0xe9, 0x64, 0xb7, 0x14, 0xa5, 0x6f, 0x40, 0x2d, 0xa4, 0x1f, 0xcf, 0x42, 0x39, 0x7c, 0x97,
	0x9a, 0x23, 0x07, 0x4b, 0xe8, 0x39, 0x6c, 0x45, 0x64, 0x99, 0xe2, 0x31, 0xe9, 0x32, 0x75, 0x60,
	0x83, 0xd1, 0x49, 0x9a, 0xae, 0x6c, 0x8d, 0x1a, 0x13, 0x2c, 0x5b, 0x54, 0xa0, 0x53, 0x58, 0x67,
	0x02, 0x25, 0x53, 0xd0, 0x24, 0xdb, 0xa7, 0x4e, 0x4a, 0xc0, 0x12, 0x6a, 0xc3, 0xa6, 0xd0, 0xe5,
	0xfa, 0xdd, 0xd3, 0x15, 0x79, 0x0e, 0x88, 0xe1, 0x8f, 0xb9, 0xbd, 0x6c, 0x39, 0x3e, 0xcc, 0x32,
	0x8a, 0x51, 0x2d, 0xbe, 0x86, 0x2a, 0xd3, 0x22, 0x16, 0x47, 0x99, 0x36, 0x53, 0xcd, 0x8c, 0x62,
	0x09, 0x3d, 0x81, 0x35, 0x21, 0xc1, 0x75, 0x9a, 0xa6, 0x93, 0x3f, 0x8b, 0x91, 0x17, 0x06, 0xcd,
	0x47, 0xb7, 0xb3, 0xfc, 0x5b, 0x0e, 0x25, 0x12, 0xf6, 0x70, 0x44, 0x09, 0x11, 0x47, 0x99, 0x36,
	0x51, 0xcd, 0x8c, 0x8e, 0x51, 0x22, 0x57, 0xd3, 0x74, 0x25, 0x7a, 0xb0, 0x15, 0x9e, 0x1f, 0x09,
	0x37, 0x98, 0xbd, 0x1b, 0x3e, 0xcb, 0xe1, 0x27, 0xa3, 0x52, 0x9c, 0x81, 0x12, 0x9e, 0x20, 0x89,
	0x34, 0x94, 0xc7, 0x9b, 0xaa, 0x79, 0x92, 0xb0, 0x84, 0xbe, 0x03, 0x35, 0x72, 0x88, 0x4c, 0xf5,
	0xa4, 0x74, 0xb5, 0x5a, 0x50, 0x3a, 0x20, 0xc1, 0x09, 0xed, 0x0d, 0xda, 0xa5, 0x64, 0xaa, 0x4a,
	0x52, 0x38, 0xda, 0x3b, 0x21, 0x17, 0xc4, 0xf6, 0xb1, 0x84, 0xf6, 0xa1, 0xcc, 0x84, 0x18, 0x36,
	0x49, 0x4d, 0xce, 0x6c, 0xd3, 0x15, 0xf7, 0x5c, 0xd4, 0x16, 0xa2, 0x8f, 0xd2, 0xed, 0x5f, 0xd4,
	0x90, 0xaa, 0x1f, 0x4c, 0xcc, 0x8b, 0x5d, 0x7a, 0x91, 0x30, 0xca, 0x70, 0x98, 0x6a, 0x46, 0x2c,
	0x7a, 0xe9, 0xe5, 0x6d, 0x97, 0xbe, 0x0c, 0xc7, 0xb0, 0x71, 0x40, 0x38, 0x75, 0xff, 0x31, 0xf5,
	0x76, 0x8d, 0xc0, 0xba, 0x20, 0xcf, 0x7c, 0xe2, 0xa5, 0xae, 0x47, 0x6d, 0xcc, 0x63, 0x18, 0x51,
	0xde, 0xab, 0x78, 0xf5, 0x85, 0x31, 0x62, 0xe9, 0x12, 0x5f, 0x2f, 0x23, 0xef, 0x66, 0xec, 0xd3,
	0x04, 0x4b, 0xe8, 0x10, 0x60, 0xf8, 0xc1, 0x81, 0x92, 0xb6, 0x69, 0xe4, 0x5b, 0x24, 0x9d, 0x61,
	0xeb, 0x01, 0xd4, 0x1c, 0xda, 0x74, 0xba, 0x4d, 0xc7, 0xd1, 0xe3, 0x6d, 0x5a, 0x95, 0xa1, 0xed,
	0x7e, 0xca, 0xca, 0x4e, 0x87, 0x7f, 0xf9, 0x76, 0x74, 0xd7, 0xea, 0x2e, 0xf2, 0x66, 0x77, 0xff,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x23, 0xe4, 0xb7, 0x1c, 0x16, 0x00, 0x00,
}
