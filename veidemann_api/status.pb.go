// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status.proto

package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExecutionsRequest struct {
	PageSize int32 `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32 `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *ExecutionsRequest) Reset()                    { *m = ExecutionsRequest{} }
func (m *ExecutionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionsRequest) ProtoMessage()               {}
func (*ExecutionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *ExecutionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ExecutionsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ExecutionsListReply struct {
	Value    []*StatusDetail `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64           `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32           `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32           `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *ExecutionsListReply) Reset()                    { *m = ExecutionsListReply{} }
func (m *ExecutionsListReply) String() string            { return proto.CompactTextString(m) }
func (*ExecutionsListReply) ProtoMessage()               {}
func (*ExecutionsListReply) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *ExecutionsListReply) GetValue() []*StatusDetail {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ExecutionsListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ExecutionsListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ExecutionsListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type StatusDetail struct {
	Id                  string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State               CrawlExecutionStatus_State `protobuf:"varint,2,opt,name=state,enum=veidemann.api.CrawlExecutionStatus_State" json:"state,omitempty"`
	JobId               string                     `protobuf:"bytes,3,opt,name=jobId" json:"jobId,omitempty"`
	Seed                string                     `protobuf:"bytes,4,opt,name=seed" json:"seed,omitempty"`
	StartTime           *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime             *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	DocumentsCrawled    int64                      `protobuf:"varint,7,opt,name=documents_crawled,json=documentsCrawled" json:"documents_crawled,omitempty"`
	BytesCrawled        int64                      `protobuf:"varint,8,opt,name=bytes_crawled,json=bytesCrawled" json:"bytes_crawled,omitempty"`
	UrisCrawled         int64                      `protobuf:"varint,9,opt,name=uris_crawled,json=urisCrawled" json:"uris_crawled,omitempty"`
	DocumentsFailed     int64                      `protobuf:"varint,10,opt,name=documents_failed,json=documentsFailed" json:"documents_failed,omitempty"`
	DocumentsOutOfScope int64                      `protobuf:"varint,11,opt,name=documents_out_of_scope,json=documentsOutOfScope" json:"documents_out_of_scope,omitempty"`
	DocumentsRetried    int64                      `protobuf:"varint,12,opt,name=documents_retried,json=documentsRetried" json:"documents_retried,omitempty"`
	DocumentsDenied     int64                      `protobuf:"varint,13,opt,name=documents_denied,json=documentsDenied" json:"documents_denied,omitempty"`
	QueueSize           int64                      `protobuf:"varint,14,opt,name=queue_size,json=queueSize" json:"queue_size,omitempty"`
	CurrentUri          string                     `protobuf:"bytes,20,opt,name=current_uri,json=currentUri" json:"current_uri,omitempty"`
}

func (m *StatusDetail) Reset()                    { *m = StatusDetail{} }
func (m *StatusDetail) String() string            { return proto.CompactTextString(m) }
func (*StatusDetail) ProtoMessage()               {}
func (*StatusDetail) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *StatusDetail) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StatusDetail) GetState() CrawlExecutionStatus_State {
	if m != nil {
		return m.State
	}
	return CrawlExecutionStatus_UNDEFINED
}

func (m *StatusDetail) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *StatusDetail) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *StatusDetail) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *StatusDetail) GetEndTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *StatusDetail) GetDocumentsCrawled() int64 {
	if m != nil {
		return m.DocumentsCrawled
	}
	return 0
}

func (m *StatusDetail) GetBytesCrawled() int64 {
	if m != nil {
		return m.BytesCrawled
	}
	return 0
}

func (m *StatusDetail) GetUrisCrawled() int64 {
	if m != nil {
		return m.UrisCrawled
	}
	return 0
}

func (m *StatusDetail) GetDocumentsFailed() int64 {
	if m != nil {
		return m.DocumentsFailed
	}
	return 0
}

func (m *StatusDetail) GetDocumentsOutOfScope() int64 {
	if m != nil {
		return m.DocumentsOutOfScope
	}
	return 0
}

func (m *StatusDetail) GetDocumentsRetried() int64 {
	if m != nil {
		return m.DocumentsRetried
	}
	return 0
}

func (m *StatusDetail) GetDocumentsDenied() int64 {
	if m != nil {
		return m.DocumentsDenied
	}
	return 0
}

func (m *StatusDetail) GetQueueSize() int64 {
	if m != nil {
		return m.QueueSize
	}
	return 0
}

func (m *StatusDetail) GetCurrentUri() string {
	if m != nil {
		return m.CurrentUri
	}
	return ""
}

func init() {
	proto.RegisterType((*ExecutionsRequest)(nil), "veidemann.api.ExecutionsRequest")
	proto.RegisterType((*ExecutionsListReply)(nil), "veidemann.api.ExecutionsListReply")
	proto.RegisterType((*StatusDetail)(nil), "veidemann.api.StatusDetail")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Status service

type StatusClient interface {
	GetRunningExecutions(ctx context.Context, in *ExecutionsRequest, opts ...grpc.CallOption) (Status_GetRunningExecutionsClient, error)
}

type statusClient struct {
	cc *grpc.ClientConn
}

func NewStatusClient(cc *grpc.ClientConn) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) GetRunningExecutions(ctx context.Context, in *ExecutionsRequest, opts ...grpc.CallOption) (Status_GetRunningExecutionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Status_serviceDesc.Streams[0], c.cc, "/veidemann.api.Status/GetRunningExecutions", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusGetRunningExecutionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Status_GetRunningExecutionsClient interface {
	Recv() (*ExecutionsListReply, error)
	grpc.ClientStream
}

type statusGetRunningExecutionsClient struct {
	grpc.ClientStream
}

func (x *statusGetRunningExecutionsClient) Recv() (*ExecutionsListReply, error) {
	m := new(ExecutionsListReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Status service

type StatusServer interface {
	GetRunningExecutions(*ExecutionsRequest, Status_GetRunningExecutionsServer) error
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_GetRunningExecutions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusServer).GetRunningExecutions(m, &statusGetRunningExecutionsServer{stream})
}

type Status_GetRunningExecutionsServer interface {
	Send(*ExecutionsListReply) error
	grpc.ServerStream
}

type statusGetRunningExecutionsServer struct {
	grpc.ServerStream
}

func (x *statusGetRunningExecutionsServer) Send(m *ExecutionsListReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Status",
	HandlerType: (*StatusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRunningExecutions",
			Handler:       _Status_GetRunningExecutions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "status.proto",
}

func init() { proto.RegisterFile("status.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xc7, 0xbf, 0xac, 0xeb, 0xd6, 0x9e, 0xb4, 0xdd, 0x37, 0xaf, 0x02, 0xab, 0x13, 0x5a, 0x28,
	0x37, 0x9d, 0x90, 0x32, 0xe8, 0xb4, 0x0b, 0xae, 0x90, 0xb6, 0x02, 0x42, 0x42, 0x1a, 0x4a, 0xe1,
	0x86, 0x9b, 0xe0, 0x26, 0xa7, 0x95, 0xa7, 0xd6, 0xce, 0x62, 0x7b, 0xb0, 0xbd, 0x04, 0xaf, 0xc9,
	0x63, 0x20, 0xdb, 0x6b, 0xb3, 0x16, 0x21, 0xc4, 0x9d, 0xfd, 0xf7, 0xef, 0x9c, 0xfc, 0x8f, 0xcf,
	0x71, 0xa0, 0xa5, 0x34, 0xd3, 0x46, 0xc5, 0x45, 0x29, 0xb5, 0x24, 0xed, 0x1b, 0xe4, 0x39, 0x2e,
	0x98, 0x10, 0x31, 0x2b, 0x78, 0xaf, 0xb3, 0x40, 0xa5, 0xd8, 0x0c, 0xef, 0x8f, 0x7b, 0x47, 0x33,
	0x29, 0x67, 0x73, 0x3c, 0x71, 0xbb, 0x89, 0x99, 0x9e, 0x68, 0xbe, 0x40, 0xa5, 0xd9, 0xa2, 0xf0,
	0x40, 0x7f, 0x04, 0xfb, 0x6f, 0xbe, 0x63, 0x66, 0x34, 0x97, 0x42, 0x25, 0x78, 0x6d, 0x50, 0x69,
	0x72, 0x08, 0xcd, 0x82, 0xcd, 0x30, 0x55, 0xfc, 0x0e, 0x69, 0x27, 0x0a, 0x06, 0xf5, 0xa4, 0x61,
	0x85, 0x31, 0xbf, 0x43, 0x42, 0x60, 0xdb, 0xae, 0xe9, 0x9e, 0xd3, 0xdd, 0xba, 0xff, 0x23, 0x80,
	0x83, 0x2a, 0xcd, 0x07, 0xae, 0x74, 0x82, 0xc5, 0xfc, 0x96, 0xbc, 0x84, 0xfa, 0x0d, 0x9b, 0x1b,
	0xa4, 0x41, 0x54, 0x1b, 0x84, 0xc3, 0xc3, 0x78, 0xcd, 0x6d, 0x3c, 0x76, 0x95, 0x8c, 0x50, 0x33,
	0x3e, 0x4f, 0x3c, 0x49, 0xba, 0x50, 0xcf, 0xa4, 0x11, 0x9a, 0x6e, 0x45, 0xc1, 0xa0, 0x96, 0xf8,
	0xcd, 0xbf, 0x3b, 0xfa, 0xb9, 0x0d, 0xad, 0x87, 0xe9, 0x49, 0x07, 0xb6, 0x78, 0x4e, 0x83, 0x28,
	0x18, 0x34, 0x93, 0x2d, 0x9e, 0x93, 0xd7, 0x50, 0xb7, 0x17, 0x89, 0xee, 0x3b, 0x9d, 0xe1, 0xf1,
	0x86, 0xb5, 0x8b, 0x92, 0x7d, 0x9b, 0xaf, 0x4a, 0xf2, 0x99, 0x9c, 0x5f, 0x4c, 0x7c, 0x9c, 0x35,
	0x7a, 0x25, 0x27, 0xef, 0x73, 0x5a, 0x73, 0x39, 0xfd, 0xc6, 0x7a, 0x51, 0x88, 0x39, 0xdd, 0x76,
	0xa2, 0x5b, 0x93, 0x57, 0x00, 0x4a, 0xb3, 0x52, 0xa7, 0xf6, 0xf2, 0x69, 0x3d, 0x0a, 0x06, 0xe1,
	0xb0, 0x17, 0xfb, 0xce, 0xc4, 0xcb, 0xce, 0xc4, 0x9f, 0x96, 0x9d, 0x49, 0x9a, 0x8e, 0xb6, 0x7b,
	0x72, 0x06, 0x0d, 0x14, 0xb9, 0x0f, 0xdc, 0xf9, 0x6b, 0xe0, 0x2e, 0x8a, 0xdc, 0x85, 0x3d, 0x87,
	0xfd, 0x5c, 0x66, 0x66, 0x81, 0x42, 0xab, 0x34, 0xb3, 0xa5, 0x60, 0x4e, 0x77, 0xdd, 0x85, 0xfe,
	0xbf, 0x3a, 0xb8, 0xf0, 0x3a, 0x79, 0x06, 0xed, 0xc9, 0xad, 0xc6, 0x0a, 0x6c, 0x38, 0xb0, 0xe5,
	0xc4, 0x25, 0xf4, 0x14, 0x5a, 0xa6, 0xe4, 0x15, 0xd3, 0x74, 0x4c, 0x68, 0xb5, 0x25, 0x72, 0x0c,
	0x55, 0xee, 0x74, 0xca, 0xb8, 0xc5, 0xc0, 0x61, 0x7b, 0x2b, 0xfd, 0xad, 0x93, 0xc9, 0x29, 0x3c,
	0xaa, 0x50, 0x69, 0x74, 0x2a, 0xa7, 0xa9, 0xca, 0x64, 0x81, 0x34, 0x74, 0x01, 0x07, 0xab, 0xd3,
	0x4b, 0xa3, 0x2f, 0xa7, 0x63, 0x7b, 0xb4, 0x5e, 0x54, 0x89, 0xba, 0xe4, 0x98, 0xd3, 0xd6, 0x46,
	0x51, 0x89, 0xd7, 0xd7, 0xcd, 0xe4, 0x28, 0x2c, 0xdb, 0xde, 0x30, 0x33, 0x72, 0x32, 0x79, 0x02,
	0x70, 0x6d, 0xd0, 0x3c, 0x18, 0xae, 0x5a, 0xd2, 0x74, 0x8a, 0x9b, 0xae, 0x23, 0x08, 0x33, 0x53,
	0x96, 0x28, 0x74, 0x6a, 0x4a, 0x4e, 0xbb, 0xae, 0xb1, 0x70, 0x2f, 0x7d, 0x2e, 0xf9, 0xf0, 0x0a,
	0x76, 0xfc, 0x7c, 0x90, 0xaf, 0xd0, 0x7d, 0x87, 0x3a, 0x31, 0x42, 0x70, 0x31, 0xab, 0xde, 0x03,
	0x89, 0x36, 0x86, 0xeb, 0xb7, 0x17, 0xd7, 0xeb, 0xff, 0x91, 0x58, 0x3d, 0xa6, 0xfe, 0x7f, 0x2f,
	0x82, 0xf3, 0x33, 0x78, 0x2c, 0x64, 0x2c, 0x26, 0xb1, 0x10, 0x6c, 0x3d, 0xe4, 0x3c, 0xf4, 0x26,
	0x3e, 0xda, 0xb1, 0xf8, 0x52, 0xfd, 0x16, 0x52, 0x56, 0xf0, 0xc9, 0x8e, 0x1b, 0x96, 0xd3, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0x6e, 0xaf, 0x8e, 0x3c, 0x04, 0x00, 0x00,
}
