// Code generated by protoc-gen-go. DO NOT EDIT.
// source: report.proto

package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Filter_Operator int32

const (
	Filter_EQ    Filter_Operator = 0
	Filter_NE    Filter_Operator = 1
	Filter_MATCH Filter_Operator = 2
	Filter_LT    Filter_Operator = 3
	Filter_GT    Filter_Operator = 4
)

var Filter_Operator_name = map[int32]string{
	0: "EQ",
	1: "NE",
	2: "MATCH",
	3: "LT",
	4: "GT",
}
var Filter_Operator_value = map[string]int32{
	"EQ":    0,
	"NE":    1,
	"MATCH": 2,
	"LT":    3,
	"GT":    4,
}

func (x Filter_Operator) String() string {
	return proto.EnumName(Filter_Operator_name, int32(x))
}
func (Filter_Operator) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0, 0} }

type Filter struct {
	FieldName string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	Op        Filter_Operator `protobuf:"varint,2,opt,name=op,enum=veidemann.api.Filter_Operator" json:"op,omitempty"`
	Value     string          `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *Filter) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *Filter) GetOp() Filter_Operator {
	if m != nil {
		return m.Op
	}
	return Filter_EQ
}

func (m *Filter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CrawlLogListRequest struct {
	WarcId      []string  `protobuf:"bytes,1,rep,name=warc_id,json=warcId" json:"warc_id,omitempty"`
	ExecutionId string    `protobuf:"bytes,2,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	Filter      []*Filter `protobuf:"bytes,3,rep,name=filter" json:"filter,omitempty"`
	PageSize    int32     `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page        int32     `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlLogListRequest) Reset()                    { *m = CrawlLogListRequest{} }
func (m *CrawlLogListRequest) String() string            { return proto.CompactTextString(m) }
func (*CrawlLogListRequest) ProtoMessage()               {}
func (*CrawlLogListRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *CrawlLogListRequest) GetWarcId() []string {
	if m != nil {
		return m.WarcId
	}
	return nil
}

func (m *CrawlLogListRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *CrawlLogListRequest) GetFilter() []*Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CrawlLogListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlLogListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CrawlLogListReply struct {
	Value    []*CrawlLog `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64       `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32       `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32       `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *CrawlLogListReply) Reset()                    { *m = CrawlLogListReply{} }
func (m *CrawlLogListReply) String() string            { return proto.CompactTextString(m) }
func (*CrawlLogListReply) ProtoMessage()               {}
func (*CrawlLogListReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *CrawlLogListReply) GetValue() []*CrawlLog {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CrawlLogListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CrawlLogListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *CrawlLogListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type PageLogListRequest struct {
	WarcId      []string  `protobuf:"bytes,1,rep,name=warc_id,json=warcId" json:"warc_id,omitempty"`
	ExecutionId string    `protobuf:"bytes,2,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	Filter      []*Filter `protobuf:"bytes,3,rep,name=filter" json:"filter,omitempty"`
	PageSize    int32     `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page        int32     `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *PageLogListRequest) Reset()                    { *m = PageLogListRequest{} }
func (m *PageLogListRequest) String() string            { return proto.CompactTextString(m) }
func (*PageLogListRequest) ProtoMessage()               {}
func (*PageLogListRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *PageLogListRequest) GetWarcId() []string {
	if m != nil {
		return m.WarcId
	}
	return nil
}

func (m *PageLogListRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *PageLogListRequest) GetFilter() []*Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *PageLogListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageLogListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type PageLogListReply struct {
	Value    []*PageLog `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32      `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32      `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *PageLogListReply) Reset()                    { *m = PageLogListReply{} }
func (m *PageLogListReply) String() string            { return proto.CompactTextString(m) }
func (*PageLogListReply) ProtoMessage()               {}
func (*PageLogListReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *PageLogListReply) GetValue() []*PageLog {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PageLogListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PageLogListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageLogListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ScreenshotListRequest struct {
	Id          []string  `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	ExecutionId string    `protobuf:"bytes,2,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	Filter      []*Filter `protobuf:"bytes,3,rep,name=filter" json:"filter,omitempty"`
	ImgData     bool      `protobuf:"varint,4,opt,name=img_data,json=imgData" json:"img_data,omitempty"`
	PageSize    int32     `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page        int32     `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *ScreenshotListRequest) Reset()                    { *m = ScreenshotListRequest{} }
func (m *ScreenshotListRequest) String() string            { return proto.CompactTextString(m) }
func (*ScreenshotListRequest) ProtoMessage()               {}
func (*ScreenshotListRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *ScreenshotListRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ScreenshotListRequest) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *ScreenshotListRequest) GetFilter() []*Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ScreenshotListRequest) GetImgData() bool {
	if m != nil {
		return m.ImgData
	}
	return false
}

func (m *ScreenshotListRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ScreenshotListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type ScreenshotListReply struct {
	Value    []*Screenshot `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	Count    int64         `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	PageSize int32         `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	Page     int32         `protobuf:"varint,15,opt,name=page" json:"page,omitempty"`
}

func (m *ScreenshotListReply) Reset()                    { *m = ScreenshotListReply{} }
func (m *ScreenshotListReply) String() string            { return proto.CompactTextString(m) }
func (*ScreenshotListReply) ProtoMessage()               {}
func (*ScreenshotListReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *ScreenshotListReply) GetValue() []*Screenshot {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ScreenshotListReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ScreenshotListReply) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ScreenshotListReply) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func init() {
	proto.RegisterType((*Filter)(nil), "veidemann.api.Filter")
	proto.RegisterType((*CrawlLogListRequest)(nil), "veidemann.api.CrawlLogListRequest")
	proto.RegisterType((*CrawlLogListReply)(nil), "veidemann.api.CrawlLogListReply")
	proto.RegisterType((*PageLogListRequest)(nil), "veidemann.api.PageLogListRequest")
	proto.RegisterType((*PageLogListReply)(nil), "veidemann.api.PageLogListReply")
	proto.RegisterType((*ScreenshotListRequest)(nil), "veidemann.api.ScreenshotListRequest")
	proto.RegisterType((*ScreenshotListReply)(nil), "veidemann.api.ScreenshotListReply")
	proto.RegisterEnum("veidemann.api.Filter_Operator", Filter_Operator_name, Filter_Operator_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Report service

type ReportClient interface {
	ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*CrawlLogListReply, error)
	ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*PageLogListReply, error)
	ListScreenshots(ctx context.Context, in *ScreenshotListRequest, opts ...grpc.CallOption) (*ScreenshotListReply, error)
}

type reportClient struct {
	cc *grpc.ClientConn
}

func NewReportClient(cc *grpc.ClientConn) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (*CrawlLogListReply, error) {
	out := new(CrawlLogListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Report/ListCrawlLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (*PageLogListReply, error) {
	out := new(PageLogListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Report/ListPageLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportClient) ListScreenshots(ctx context.Context, in *ScreenshotListRequest, opts ...grpc.CallOption) (*ScreenshotListReply, error) {
	out := new(ScreenshotListReply)
	err := grpc.Invoke(ctx, "/veidemann.api.Report/ListScreenshots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Report service

type ReportServer interface {
	ListCrawlLogs(context.Context, *CrawlLogListRequest) (*CrawlLogListReply, error)
	ListPageLogs(context.Context, *PageLogListRequest) (*PageLogListReply, error)
	ListScreenshots(context.Context, *ScreenshotListRequest) (*ScreenshotListReply, error)
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_ListCrawlLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).ListCrawlLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Report/ListCrawlLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).ListCrawlLogs(ctx, req.(*CrawlLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ListPageLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).ListPageLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Report/ListPageLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).ListPageLogs(ctx, req.(*PageLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Report_ListScreenshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenshotListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).ListScreenshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/veidemann.api.Report/ListScreenshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).ListScreenshots(ctx, req.(*ScreenshotListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCrawlLogs",
			Handler:    _Report_ListCrawlLogs_Handler,
		},
		{
			MethodName: "ListPageLogs",
			Handler:    _Report_ListPageLogs_Handler,
		},
		{
			MethodName: "ListScreenshots",
			Handler:    _Report_ListScreenshots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}

func init() { proto.RegisterFile("report.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xc7, 0xe7, 0xa4, 0xcd, 0xda, 0xd3, 0xae, 0xcb, 0xe7, 0x7d, 0xa3, 0xd9, 0x10, 0x90, 0x45,
	0x5c, 0xe4, 0x82, 0x05, 0xa9, 0x68, 0x0f, 0xc0, 0xc6, 0x80, 0x49, 0x65, 0x8c, 0xac, 0x12, 0x12,
	0x12, 0x8a, 0xbc, 0xc6, 0x0b, 0x96, 0x92, 0x38, 0x24, 0xee, 0xc6, 0xf6, 0x02, 0x88, 0x0b, 0x6e,
	0x79, 0x02, 0x1e, 0x00, 0x1e, 0x82, 0xf7, 0x42, 0x76, 0xda, 0xb5, 0xa9, 0xb6, 0xa1, 0x49, 0xe3,
	0x82, 0xab, 0xf8, 0x1c, 0x1f, 0xff, 0xfd, 0x3f, 0x3f, 0x39, 0x07, 0xda, 0x39, 0xcd, 0x78, 0x2e,
	0xbc, 0x2c, 0xe7, 0x82, 0xe3, 0xa5, 0x13, 0xca, 0x42, 0x9a, 0x90, 0x34, 0xf5, 0x48, 0xc6, 0xd6,
	0x3b, 0x09, 0x2d, 0x0a, 0x12, 0xd1, 0xa2, 0xdc, 0x76, 0xbe, 0x23, 0x30, 0x9e, 0xb3, 0x58, 0xd0,
	0x1c, 0xdf, 0x03, 0x38, 0x66, 0x34, 0x0e, 0x83, 0x94, 0x24, 0xd4, 0x42, 0x36, 0x72, 0x9b, 0x7e,
	0x53, 0x65, 0xf6, 0x49, 0x42, 0xb1, 0x07, 0x1a, 0xcf, 0x2c, 0xcd, 0x46, 0x6e, 0xa7, 0x77, 0xdf,
	0xab, 0xa8, 0x7a, 0xa5, 0x82, 0xf7, 0x3a, 0xa3, 0x39, 0x11, 0x3c, 0xf7, 0x35, 0x9e, 0xe1, 0xff,
	0xa1, 0x7e, 0x42, 0xe2, 0x11, 0xb5, 0x74, 0xa5, 0x54, 0x06, 0xce, 0x16, 0x34, 0x26, 0x55, 0xd8,
	0x00, 0x6d, 0xf7, 0x8d, 0xb9, 0x20, 0xbf, 0xfb, 0xbb, 0x26, 0xc2, 0x4d, 0xa8, 0xbf, 0x7a, 0x3a,
	0xd8, 0x79, 0x69, 0x6a, 0x32, 0xd5, 0x1f, 0x98, 0xba, 0xfc, 0xbe, 0x18, 0x98, 0x35, 0xe7, 0x27,
	0x82, 0x95, 0x9d, 0x9c, 0x9c, 0xc6, 0x7d, 0x1e, 0xf5, 0x59, 0x21, 0x7c, 0xfa, 0x71, 0x44, 0x0b,
	0x81, 0xbb, 0xb0, 0x78, 0x4a, 0xf2, 0x61, 0xc0, 0x42, 0x0b, 0xd9, 0xba, 0xdb, 0xf4, 0x0d, 0x19,
	0xee, 0x85, 0x78, 0x03, 0xda, 0xf4, 0x13, 0x1d, 0x8e, 0x04, 0xe3, 0xa9, 0xdc, 0xd5, 0x94, 0x89,
	0xd6, 0x45, 0x6e, 0x2f, 0xc4, 0x9b, 0x60, 0x1c, 0x2b, 0xdf, 0x96, 0x6e, 0xeb, 0x6e, 0xab, 0xb7,
	0x7a, 0x69, 0x53, 0xfe, 0xb8, 0x08, 0xdf, 0x85, 0x66, 0x46, 0x22, 0x1a, 0x14, 0xec, 0x9c, 0x5a,
	0x1d, 0x1b, 0xb9, 0x75, 0xbf, 0x21, 0x13, 0x87, 0xec, 0x9c, 0x62, 0x0c, 0x35, 0xb9, 0xb6, 0x96,
	0x55, 0x5e, 0xad, 0x9d, 0x2f, 0x08, 0xfe, 0xab, 0x7a, 0xce, 0xe2, 0x33, 0xbc, 0x39, 0xc1, 0x82,
	0xd4, 0xa5, 0xdd, 0xb9, 0x4b, 0x27, 0x07, 0xc6, 0xbc, 0x24, 0xc5, 0x21, 0x1f, 0xa5, 0x42, 0x35,
	0xa0, 0xfb, 0x65, 0x70, 0x73, 0x2f, 0x3f, 0x10, 0xe0, 0x03, 0x12, 0xd1, 0x7f, 0x08, 0xdf, 0x67,
	0x04, 0x66, 0xc5, 0xb2, 0xa4, 0xf7, 0xa8, 0x4a, 0xef, 0xce, 0xdc, 0x9d, 0xe3, 0xfa, 0x5b, 0x86,
	0xf7, 0x0b, 0xc1, 0xea, 0xe1, 0x30, 0xa7, 0x34, 0x2d, 0x3e, 0x70, 0x31, 0xcb, 0xaf, 0x03, 0xda,
	0x05, 0x3a, 0x8d, 0xfd, 0x0d, 0x6c, 0x6b, 0xd0, 0x60, 0x49, 0x14, 0x84, 0x44, 0x10, 0xab, 0x66,
	0x23, 0xb7, 0xe1, 0x2f, 0xb2, 0x24, 0x7a, 0x46, 0x04, 0xb9, 0x79, 0x1f, 0x5f, 0x11, 0xac, 0xcc,
	0xf7, 0x21, 0xa1, 0x3e, 0xae, 0x42, 0x5d, 0x9b, 0x73, 0x34, 0x3d, 0x72, 0xbb, 0x5c, 0x7b, 0xdf,
	0x34, 0x30, 0x7c, 0x35, 0xab, 0xf0, 0x5b, 0x58, 0x92, 0x7e, 0x26, 0xaf, 0xbf, 0xc0, 0xce, 0x15,
	0xff, 0xc5, 0x0c, 0xfd, 0x75, 0xfb, 0xda, 0x9a, 0x2c, 0x3e, 0x73, 0x16, 0xf0, 0x00, 0xda, 0x32,
	0x1c, 0x3f, 0x8c, 0x02, 0x6f, 0x5c, 0xfe, 0x62, 0x66, 0x65, 0x1f, 0x5c, 0x57, 0x52, 0xaa, 0xbe,
	0x87, 0x65, 0x19, 0x4e, 0xc9, 0x14, 0xf8, 0xe1, 0x95, 0xd4, 0x66, 0xb5, 0x9d, 0x3f, 0x54, 0x29,
	0xf9, 0xed, 0x2d, 0xe8, 0xa6, 0xdc, 0x4b, 0x8f, 0xbc, 0x34, 0x25, 0xd5, 0x03, 0xdb, 0xad, 0x12,
	0xd8, 0x81, 0x1c, 0xde, 0xef, 0xa6, 0xb3, 0x3d, 0x20, 0x19, 0x3b, 0x32, 0xd4, 0x48, 0x7f, 0xf2,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xa9, 0xf1, 0x50, 0x01, 0x06, 0x00, 0x00,
}
