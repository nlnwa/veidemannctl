// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package veidemann_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CrawlExecutionStatus_State int32

const (
	CrawlExecutionStatus_UNDEFINED       CrawlExecutionStatus_State = 0
	CrawlExecutionStatus_CREATED         CrawlExecutionStatus_State = 1
	CrawlExecutionStatus_FETCHING        CrawlExecutionStatus_State = 2
	CrawlExecutionStatus_SLEEPING        CrawlExecutionStatus_State = 3
	CrawlExecutionStatus_FINISHED        CrawlExecutionStatus_State = 4
	CrawlExecutionStatus_ABORTED_TIMEOUT CrawlExecutionStatus_State = 5
	CrawlExecutionStatus_ABORTED_SIZE    CrawlExecutionStatus_State = 6
	CrawlExecutionStatus_ABORTED_MANUAL  CrawlExecutionStatus_State = 7
	CrawlExecutionStatus_FAILED          CrawlExecutionStatus_State = 8
	CrawlExecutionStatus_DIED            CrawlExecutionStatus_State = 9
)

var CrawlExecutionStatus_State_name = map[int32]string{
	0: "UNDEFINED",
	1: "CREATED",
	2: "FETCHING",
	3: "SLEEPING",
	4: "FINISHED",
	5: "ABORTED_TIMEOUT",
	6: "ABORTED_SIZE",
	7: "ABORTED_MANUAL",
	8: "FAILED",
	9: "DIED",
}
var CrawlExecutionStatus_State_value = map[string]int32{
	"UNDEFINED":       0,
	"CREATED":         1,
	"FETCHING":        2,
	"SLEEPING":        3,
	"FINISHED":        4,
	"ABORTED_TIMEOUT": 5,
	"ABORTED_SIZE":    6,
	"ABORTED_MANUAL":  7,
	"FAILED":          8,
	"DIED":            9,
}

func (x CrawlExecutionStatus_State) String() string {
	return proto.EnumName(CrawlExecutionStatus_State_name, int32(x))
}
func (CrawlExecutionStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor6, []int{0, 0}
}

type CrawlExecutionStatus struct {
	Id                  string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State               CrawlExecutionStatus_State `protobuf:"varint,2,opt,name=state,enum=veidemann.api.CrawlExecutionStatus_State" json:"state,omitempty"`
	JobId               string                     `protobuf:"bytes,3,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	SeedId              string                     `protobuf:"bytes,4,opt,name=seed_id,json=seedId" json:"seed_id,omitempty"`
	Scope               *CrawlScope                `protobuf:"bytes,5,opt,name=scope" json:"scope,omitempty"`
	StartTime           *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime             *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	DocumentsCrawled    int64                      `protobuf:"varint,8,opt,name=documents_crawled,json=documentsCrawled" json:"documents_crawled,omitempty"`
	BytesCrawled        int64                      `protobuf:"varint,9,opt,name=bytes_crawled,json=bytesCrawled" json:"bytes_crawled,omitempty"`
	UrisCrawled         int64                      `protobuf:"varint,10,opt,name=uris_crawled,json=urisCrawled" json:"uris_crawled,omitempty"`
	DocumentsFailed     int64                      `protobuf:"varint,11,opt,name=documents_failed,json=documentsFailed" json:"documents_failed,omitempty"`
	DocumentsOutOfScope int64                      `protobuf:"varint,12,opt,name=documents_out_of_scope,json=documentsOutOfScope" json:"documents_out_of_scope,omitempty"`
	DocumentsRetried    int64                      `protobuf:"varint,13,opt,name=documents_retried,json=documentsRetried" json:"documents_retried,omitempty"`
	DocumentsDenied     int64                      `protobuf:"varint,14,opt,name=documents_denied,json=documentsDenied" json:"documents_denied,omitempty"`
	CurrentUri          string                     `protobuf:"bytes,20,opt,name=current_uri,json=currentUri" json:"current_uri,omitempty"`
}

func (m *CrawlExecutionStatus) Reset()                    { *m = CrawlExecutionStatus{} }
func (m *CrawlExecutionStatus) String() string            { return proto.CompactTextString(m) }
func (*CrawlExecutionStatus) ProtoMessage()               {}
func (*CrawlExecutionStatus) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *CrawlExecutionStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlExecutionStatus) GetState() CrawlExecutionStatus_State {
	if m != nil {
		return m.State
	}
	return CrawlExecutionStatus_UNDEFINED
}

func (m *CrawlExecutionStatus) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *CrawlExecutionStatus) GetSeedId() string {
	if m != nil {
		return m.SeedId
	}
	return ""
}

func (m *CrawlExecutionStatus) GetScope() *CrawlScope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (m *CrawlExecutionStatus) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *CrawlExecutionStatus) GetEndTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *CrawlExecutionStatus) GetDocumentsCrawled() int64 {
	if m != nil {
		return m.DocumentsCrawled
	}
	return 0
}

func (m *CrawlExecutionStatus) GetBytesCrawled() int64 {
	if m != nil {
		return m.BytesCrawled
	}
	return 0
}

func (m *CrawlExecutionStatus) GetUrisCrawled() int64 {
	if m != nil {
		return m.UrisCrawled
	}
	return 0
}

func (m *CrawlExecutionStatus) GetDocumentsFailed() int64 {
	if m != nil {
		return m.DocumentsFailed
	}
	return 0
}

func (m *CrawlExecutionStatus) GetDocumentsOutOfScope() int64 {
	if m != nil {
		return m.DocumentsOutOfScope
	}
	return 0
}

func (m *CrawlExecutionStatus) GetDocumentsRetried() int64 {
	if m != nil {
		return m.DocumentsRetried
	}
	return 0
}

func (m *CrawlExecutionStatus) GetDocumentsDenied() int64 {
	if m != nil {
		return m.DocumentsDenied
	}
	return 0
}

func (m *CrawlExecutionStatus) GetCurrentUri() string {
	if m != nil {
		return m.CurrentUri
	}
	return ""
}

type CrawlLog struct {
	WarcId       string                     `protobuf:"bytes,1,opt,name=warc_id,json=warcId" json:"warc_id,omitempty"`
	TimeStamp    *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Surt         string                     `protobuf:"bytes,3,opt,name=surt" json:"surt,omitempty"`
	StatusCode   int32                      `protobuf:"varint,4,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Size         int64                      `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	RequestedUri string                     `protobuf:"bytes,6,opt,name=requested_uri,json=requestedUri" json:"requested_uri,omitempty"`
	ResponseUri  string                     `protobuf:"bytes,7,opt,name=response_uri,json=responseUri" json:"response_uri,omitempty"`
	// *
	// Get the discoveryPath,
	//  R - Redirect
	//  E - Embed
	//  X - Speculative embed (aggressive/Javascript link extraction)
	//  L - Link
	//  P - Prerequisite (as for DNS or robots.txt before another URI)
	DiscoveryPath  string                     `protobuf:"bytes,8,opt,name=discovery_path,json=discoveryPath" json:"discovery_path,omitempty"`
	Referrer       string                     `protobuf:"bytes,9,opt,name=referrer" json:"referrer,omitempty"`
	ContentType    string                     `protobuf:"bytes,10,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	FetchTimeStamp *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=fetch_time_stamp,json=fetchTimeStamp" json:"fetch_time_stamp,omitempty"`
	FetchTimeMs    int64                      `protobuf:"varint,12,opt,name=fetch_time_ms,json=fetchTimeMs" json:"fetch_time_ms,omitempty"`
	BlockDigest    string                     `protobuf:"bytes,13,opt,name=block_digest,json=blockDigest" json:"block_digest,omitempty"`
	PayloadDigest  string                     `protobuf:"bytes,14,opt,name=payload_digest,json=payloadDigest" json:"payload_digest,omitempty"`
	StorageRef     string                     `protobuf:"bytes,15,opt,name=storage_ref,json=storageRef" json:"storage_ref,omitempty"`
	RecordType     string                     `protobuf:"bytes,16,opt,name=record_type,json=recordType" json:"record_type,omitempty"`
	WarcRefersTo   string                     `protobuf:"bytes,17,opt,name=warc_refers_to,json=warcRefersTo" json:"warc_refers_to,omitempty"`
	IpAddress      string                     `protobuf:"bytes,18,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	ExecutionId    string                     `protobuf:"bytes,19,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	Retries        int32                      `protobuf:"varint,20,opt,name=retries" json:"retries,omitempty"`
	Error          *FetchError                `protobuf:"bytes,21,opt,name=error" json:"error,omitempty"`
}

func (m *CrawlLog) Reset()                    { *m = CrawlLog{} }
func (m *CrawlLog) String() string            { return proto.CompactTextString(m) }
func (*CrawlLog) ProtoMessage()               {}
func (*CrawlLog) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *CrawlLog) GetWarcId() string {
	if m != nil {
		return m.WarcId
	}
	return ""
}

func (m *CrawlLog) GetTimeStamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.TimeStamp
	}
	return nil
}

func (m *CrawlLog) GetSurt() string {
	if m != nil {
		return m.Surt
	}
	return ""
}

func (m *CrawlLog) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *CrawlLog) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CrawlLog) GetRequestedUri() string {
	if m != nil {
		return m.RequestedUri
	}
	return ""
}

func (m *CrawlLog) GetResponseUri() string {
	if m != nil {
		return m.ResponseUri
	}
	return ""
}

func (m *CrawlLog) GetDiscoveryPath() string {
	if m != nil {
		return m.DiscoveryPath
	}
	return ""
}

func (m *CrawlLog) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *CrawlLog) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *CrawlLog) GetFetchTimeStamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.FetchTimeStamp
	}
	return nil
}

func (m *CrawlLog) GetFetchTimeMs() int64 {
	if m != nil {
		return m.FetchTimeMs
	}
	return 0
}

func (m *CrawlLog) GetBlockDigest() string {
	if m != nil {
		return m.BlockDigest
	}
	return ""
}

func (m *CrawlLog) GetPayloadDigest() string {
	if m != nil {
		return m.PayloadDigest
	}
	return ""
}

func (m *CrawlLog) GetStorageRef() string {
	if m != nil {
		return m.StorageRef
	}
	return ""
}

func (m *CrawlLog) GetRecordType() string {
	if m != nil {
		return m.RecordType
	}
	return ""
}

func (m *CrawlLog) GetWarcRefersTo() string {
	if m != nil {
		return m.WarcRefersTo
	}
	return ""
}

func (m *CrawlLog) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *CrawlLog) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *CrawlLog) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *CrawlLog) GetError() *FetchError {
	if m != nil {
		return m.Error
	}
	return nil
}

// Log for each page including discovered resources and links
type PageLog struct {
	WarcId      string              `protobuf:"bytes,1,opt,name=warc_id,json=warcId" json:"warc_id,omitempty"`
	Uri         string              `protobuf:"bytes,2,opt,name=uri" json:"uri,omitempty"`
	ExecutionId string              `protobuf:"bytes,3,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	Referrer    string              `protobuf:"bytes,4,opt,name=referrer" json:"referrer,omitempty"`
	Resource    []*PageLog_Resource `protobuf:"bytes,10,rep,name=resource" json:"resource,omitempty"`
	Outlink     []string            `protobuf:"bytes,11,rep,name=outlink" json:"outlink,omitempty"`
}

func (m *PageLog) Reset()                    { *m = PageLog{} }
func (m *PageLog) String() string            { return proto.CompactTextString(m) }
func (*PageLog) ProtoMessage()               {}
func (*PageLog) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *PageLog) GetWarcId() string {
	if m != nil {
		return m.WarcId
	}
	return ""
}

func (m *PageLog) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *PageLog) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *PageLog) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *PageLog) GetResource() []*PageLog_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *PageLog) GetOutlink() []string {
	if m != nil {
		return m.Outlink
	}
	return nil
}

// A resource used to complete a page. It might be embedded images, javascripts, stylesheets etc.
type PageLog_Resource struct {
	Uri           string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	FromCache     bool   `protobuf:"varint,2,opt,name=from_cache,json=fromCache" json:"from_cache,omitempty"`
	Renderable    bool   `protobuf:"varint,3,opt,name=renderable" json:"renderable,omitempty"`
	ResourceType  string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType" json:"resource_type,omitempty"`
	MimeType      string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	StatusCode    int32  `protobuf:"varint,6,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	DiscoveryPath string `protobuf:"bytes,7,opt,name=discovery_path,json=discoveryPath" json:"discovery_path,omitempty"`
	WarcId        string `protobuf:"bytes,8,opt,name=warc_id,json=warcId" json:"warc_id,omitempty"`
	Referrer      string `protobuf:"bytes,9,opt,name=referrer" json:"referrer,omitempty"`
}

func (m *PageLog_Resource) Reset()                    { *m = PageLog_Resource{} }
func (m *PageLog_Resource) String() string            { return proto.CompactTextString(m) }
func (*PageLog_Resource) ProtoMessage()               {}
func (*PageLog_Resource) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2, 0} }

func (m *PageLog_Resource) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *PageLog_Resource) GetFromCache() bool {
	if m != nil {
		return m.FromCache
	}
	return false
}

func (m *PageLog_Resource) GetRenderable() bool {
	if m != nil {
		return m.Renderable
	}
	return false
}

func (m *PageLog_Resource) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *PageLog_Resource) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *PageLog_Resource) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *PageLog_Resource) GetDiscoveryPath() string {
	if m != nil {
		return m.DiscoveryPath
	}
	return ""
}

func (m *PageLog_Resource) GetWarcId() string {
	if m != nil {
		return m.WarcId
	}
	return ""
}

func (m *PageLog_Resource) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

type CrawledContent struct {
	Digest string `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	WarcId string `protobuf:"bytes,2,opt,name=warc_id,json=warcId" json:"warc_id,omitempty"`
}

func (m *CrawledContent) Reset()                    { *m = CrawledContent{} }
func (m *CrawledContent) String() string            { return proto.CompactTextString(m) }
func (*CrawledContent) ProtoMessage()               {}
func (*CrawledContent) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *CrawledContent) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *CrawledContent) GetWarcId() string {
	if m != nil {
		return m.WarcId
	}
	return ""
}

type ExtractedText struct {
	WarcId         string `protobuf:"bytes,1,opt,name=warc_id,json=warcId" json:"warc_id,omitempty"`
	Text           string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	SentenceCount  int64  `protobuf:"varint,3,opt,name=sentence_count,json=sentenceCount" json:"sentence_count,omitempty"`
	WordCount      int64  `protobuf:"varint,4,opt,name=word_count,json=wordCount" json:"word_count,omitempty"`
	LongWordCount  int64  `protobuf:"varint,5,opt,name=long_word_count,json=longWordCount" json:"long_word_count,omitempty"`
	CharacterCount int64  `protobuf:"varint,6,opt,name=character_count,json=characterCount" json:"character_count,omitempty"`
	Lix            int64  `protobuf:"varint,7,opt,name=lix" json:"lix,omitempty"`
	Language       string `protobuf:"bytes,8,opt,name=language" json:"language,omitempty"`
}

func (m *ExtractedText) Reset()                    { *m = ExtractedText{} }
func (m *ExtractedText) String() string            { return proto.CompactTextString(m) }
func (*ExtractedText) ProtoMessage()               {}
func (*ExtractedText) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *ExtractedText) GetWarcId() string {
	if m != nil {
		return m.WarcId
	}
	return ""
}

func (m *ExtractedText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ExtractedText) GetSentenceCount() int64 {
	if m != nil {
		return m.SentenceCount
	}
	return 0
}

func (m *ExtractedText) GetWordCount() int64 {
	if m != nil {
		return m.WordCount
	}
	return 0
}

func (m *ExtractedText) GetLongWordCount() int64 {
	if m != nil {
		return m.LongWordCount
	}
	return 0
}

func (m *ExtractedText) GetCharacterCount() int64 {
	if m != nil {
		return m.CharacterCount
	}
	return 0
}

func (m *ExtractedText) GetLix() int64 {
	if m != nil {
		return m.Lix
	}
	return 0
}

func (m *ExtractedText) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type CrawlHostGroup struct {
	Id            string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	PolitenessId  string                     `protobuf:"bytes,2,opt,name=politeness_id,json=politenessId" json:"politeness_id,omitempty"`
	NextFetchTime *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=next_fetch_time,json=nextFetchTime" json:"next_fetch_time,omitempty"`
	Busy          bool                       `protobuf:"varint,4,opt,name=busy" json:"busy,omitempty"`
}

func (m *CrawlHostGroup) Reset()                    { *m = CrawlHostGroup{} }
func (m *CrawlHostGroup) String() string            { return proto.CompactTextString(m) }
func (*CrawlHostGroup) ProtoMessage()               {}
func (*CrawlHostGroup) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *CrawlHostGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CrawlHostGroup) GetPolitenessId() string {
	if m != nil {
		return m.PolitenessId
	}
	return ""
}

func (m *CrawlHostGroup) GetNextFetchTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.NextFetchTime
	}
	return nil
}

func (m *CrawlHostGroup) GetBusy() bool {
	if m != nil {
		return m.Busy
	}
	return false
}

type FetchError struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *FetchError) Reset()                    { *m = FetchError{} }
func (m *FetchError) String() string            { return proto.CompactTextString(m) }
func (*FetchError) ProtoMessage()               {}
func (*FetchError) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *FetchError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FetchError) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type QueuedUri struct {
	Id                  string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ExecutionId         string                     `protobuf:"bytes,2,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	DiscoveredTimeStamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=discovered_time_stamp,json=discoveredTimeStamp" json:"discovered_time_stamp,omitempty"`
	// Sequence number to order the fetch of uris from a seed
	Sequence int64  `protobuf:"varint,4,opt,name=sequence" json:"sequence,omitempty"`
	Uri      string `protobuf:"bytes,5,opt,name=uri" json:"uri,omitempty"`
	Surt     string `protobuf:"bytes,6,opt,name=surt" json:"surt,omitempty"`
	Ip       string `protobuf:"bytes,7,opt,name=ip" json:"ip,omitempty"`
	// *
	// Get the discoveryPath,
	//  R - Redirect
	//  E - Embed
	//  X - Speculative embed (aggressive/Javascript link extraction)
	//  L - Link
	//  P - Prerequisite (as for DNS or robots.txt before another URI)
	DiscoveryPath          string                     `protobuf:"bytes,8,opt,name=discovery_path,json=discoveryPath" json:"discovery_path,omitempty"`
	Referrer               string                     `protobuf:"bytes,9,opt,name=referrer" json:"referrer,omitempty"`
	Cookies                []*Cookie                  `protobuf:"bytes,10,rep,name=cookies" json:"cookies,omitempty"`
	PageFetchTimeMs        int64                      `protobuf:"varint,11,opt,name=page_fetch_time_ms,json=pageFetchTimeMs" json:"page_fetch_time_ms,omitempty"`
	Retries                int32                      `protobuf:"varint,12,opt,name=retries" json:"retries,omitempty"`
	EarliestFetchTimeStamp *google_protobuf.Timestamp `protobuf:"bytes,13,opt,name=earliest_fetch_time_stamp,json=earliestFetchTimeStamp" json:"earliest_fetch_time_stamp,omitempty"`
	CrawlHostGroupId       string                     `protobuf:"bytes,14,opt,name=crawl_host_group_id,json=crawlHostGroupId" json:"crawl_host_group_id,omitempty"`
	PolitenessId           string                     `protobuf:"bytes,15,opt,name=politeness_id,json=politenessId" json:"politeness_id,omitempty"`
	Error                  *FetchError                `protobuf:"bytes,16,opt,name=error" json:"error,omitempty"`
}

func (m *QueuedUri) Reset()                    { *m = QueuedUri{} }
func (m *QueuedUri) String() string            { return proto.CompactTextString(m) }
func (*QueuedUri) ProtoMessage()               {}
func (*QueuedUri) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *QueuedUri) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueuedUri) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *QueuedUri) GetDiscoveredTimeStamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.DiscoveredTimeStamp
	}
	return nil
}

func (m *QueuedUri) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *QueuedUri) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *QueuedUri) GetSurt() string {
	if m != nil {
		return m.Surt
	}
	return ""
}

func (m *QueuedUri) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *QueuedUri) GetDiscoveryPath() string {
	if m != nil {
		return m.DiscoveryPath
	}
	return ""
}

func (m *QueuedUri) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

func (m *QueuedUri) GetCookies() []*Cookie {
	if m != nil {
		return m.Cookies
	}
	return nil
}

func (m *QueuedUri) GetPageFetchTimeMs() int64 {
	if m != nil {
		return m.PageFetchTimeMs
	}
	return 0
}

func (m *QueuedUri) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *QueuedUri) GetEarliestFetchTimeStamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.EarliestFetchTimeStamp
	}
	return nil
}

func (m *QueuedUri) GetCrawlHostGroupId() string {
	if m != nil {
		return m.CrawlHostGroupId
	}
	return ""
}

func (m *QueuedUri) GetPolitenessId() string {
	if m != nil {
		return m.PolitenessId
	}
	return ""
}

func (m *QueuedUri) GetError() *FetchError {
	if m != nil {
		return m.Error
	}
	return nil
}

type Cookie struct {
	// Cookie name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Cookie value.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// Cookie domain.
	Domain string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Cookie path.
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// Cookie expiration date as the number of seconds since the UNIX epoch.
	Expires float64 `protobuf:"fixed64,5,opt,name=expires" json:"expires,omitempty"`
	// Cookie size.
	Size int32 `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
	// True if cookie is http-only.
	HttpOnly bool `protobuf:"varint,7,opt,name=http_only,json=httpOnly" json:"http_only,omitempty"`
	// True if cookie is secure.
	Secure bool `protobuf:"varint,8,opt,name=secure" json:"secure,omitempty"`
	// True in case of session cookie.
	Session bool `protobuf:"varint,9,opt,name=session" json:"session,omitempty"`
	// Cookie SameSite type.
	SameSite string `protobuf:"bytes,10,opt,name=same_site,json=sameSite" json:"same_site,omitempty"`
}

func (m *Cookie) Reset()                    { *m = Cookie{} }
func (m *Cookie) String() string            { return proto.CompactTextString(m) }
func (*Cookie) ProtoMessage()               {}
func (*Cookie) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *Cookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cookie) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Cookie) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Cookie) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Cookie) GetExpires() float64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *Cookie) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Cookie) GetHttpOnly() bool {
	if m != nil {
		return m.HttpOnly
	}
	return false
}

func (m *Cookie) GetSecure() bool {
	if m != nil {
		return m.Secure
	}
	return false
}

func (m *Cookie) GetSession() bool {
	if m != nil {
		return m.Session
	}
	return false
}

func (m *Cookie) GetSameSite() string {
	if m != nil {
		return m.SameSite
	}
	return ""
}

type Screenshot struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ExecutionId string `protobuf:"bytes,2,opt,name=execution_id,json=executionId" json:"execution_id,omitempty"`
	Uri         string `protobuf:"bytes,3,opt,name=uri" json:"uri,omitempty"`
	Img         []byte `protobuf:"bytes,4,opt,name=img,proto3" json:"img,omitempty"`
}

func (m *Screenshot) Reset()                    { *m = Screenshot{} }
func (m *Screenshot) String() string            { return proto.CompactTextString(m) }
func (*Screenshot) ProtoMessage()               {}
func (*Screenshot) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *Screenshot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Screenshot) GetExecutionId() string {
	if m != nil {
		return m.ExecutionId
	}
	return ""
}

func (m *Screenshot) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Screenshot) GetImg() []byte {
	if m != nil {
		return m.Img
	}
	return nil
}

func init() {
	proto.RegisterType((*CrawlExecutionStatus)(nil), "veidemann.api.CrawlExecutionStatus")
	proto.RegisterType((*CrawlLog)(nil), "veidemann.api.CrawlLog")
	proto.RegisterType((*PageLog)(nil), "veidemann.api.PageLog")
	proto.RegisterType((*PageLog_Resource)(nil), "veidemann.api.PageLog.Resource")
	proto.RegisterType((*CrawledContent)(nil), "veidemann.api.CrawledContent")
	proto.RegisterType((*ExtractedText)(nil), "veidemann.api.ExtractedText")
	proto.RegisterType((*CrawlHostGroup)(nil), "veidemann.api.CrawlHostGroup")
	proto.RegisterType((*FetchError)(nil), "veidemann.api.FetchError")
	proto.RegisterType((*QueuedUri)(nil), "veidemann.api.QueuedUri")
	proto.RegisterType((*Cookie)(nil), "veidemann.api.Cookie")
	proto.RegisterType((*Screenshot)(nil), "veidemann.api.Screenshot")
	proto.RegisterEnum("veidemann.api.CrawlExecutionStatus_State", CrawlExecutionStatus_State_name, CrawlExecutionStatus_State_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1603 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0xe3, 0xc8,
	0x11, 0x8e, 0xfe, 0xa9, 0xd2, 0x8f, 0xb9, 0xed, 0x99, 0x59, 0xad, 0x17, 0x9b, 0x71, 0xb4, 0xf9,
	0xf1, 0x62, 0x11, 0x0d, 0x30, 0x8b, 0x20, 0x08, 0x72, 0x08, 0x3c, 0x96, 0xbc, 0x23, 0x60, 0xc6,
	0x76, 0x68, 0x19, 0x01, 0xf6, 0x42, 0x50, 0x64, 0x49, 0xe6, 0x8e, 0xc4, 0x66, 0xba, 0x9b, 0x33,
	0x76, 0x6e, 0x79, 0x8d, 0x00, 0xc9, 0x3d, 0x4f, 0x96, 0x47, 0x48, 0x4e, 0x41, 0x50, 0xd5, 0x24,
	0x25, 0xd9, 0xce, 0x38, 0x08, 0xf6, 0xa4, 0xae, 0xaf, 0xbf, 0x6e, 0x76, 0x55, 0x7f, 0x55, 0xd5,
	0x82, 0xfe, 0x1a, 0xb5, 0x0e, 0x96, 0xa8, 0x47, 0xa9, 0x92, 0x46, 0x8a, 0xde, 0x7b, 0x8c, 0x23,
	0x5c, 0x07, 0x49, 0x32, 0x0a, 0xd2, 0xf8, 0xe0, 0xf9, 0x52, 0xca, 0xe5, 0x0a, 0x5f, 0xf0, 0xe4,
	0x3c, 0x5b, 0xbc, 0x30, 0xf1, 0x1a, 0xb5, 0x09, 0xd6, 0xa9, 0xe5, 0x1f, 0x74, 0x43, 0x99, 0x2c,
	0xe2, 0xa5, 0xb5, 0x86, 0x7f, 0x6f, 0xc2, 0x93, 0x13, 0x15, 0x7c, 0x58, 0x4d, 0x6e, 0x30, 0xcc,
	0x4c, 0x2c, 0x93, 0x4b, 0x13, 0x98, 0x4c, 0x8b, 0x3e, 0x54, 0xe3, 0x68, 0x50, 0x39, 0xac, 0x1c,
	0xb5, 0xbd, 0x6a, 0x1c, 0x89, 0xdf, 0x41, 0x43, 0x9b, 0xc0, 0xe0, 0xa0, 0x7a, 0x58, 0x39, 0xea,
	0xbf, 0xfc, 0x6a, 0xb4, 0xf3, 0xd9, 0xd1, 0x43, 0x7b, 0x8c, 0xe8, 0x07, 0x3d, 0xbb, 0x4e, 0x3c,
	0x85, 0xe6, 0xf7, 0x72, 0xee, 0xc7, 0xd1, 0xa0, 0xc6, 0x9b, 0x36, 0xbe, 0x97, 0xf3, 0x69, 0x24,
	0x3e, 0x85, 0x96, 0x46, 0x8c, 0x08, 0xaf, 0x33, 0xde, 0x24, 0x73, 0x1a, 0x89, 0x17, 0xd0, 0xd0,
	0xa1, 0x4c, 0x71, 0xd0, 0x38, 0xac, 0x1c, 0x75, 0x5e, 0x7e, 0xf6, 0xd0, 0x07, 0x2f, 0x89, 0xe0,
	0x59, 0x9e, 0xf8, 0x0d, 0x80, 0x36, 0x81, 0x32, 0x3e, 0x79, 0x3c, 0x68, 0xf2, 0xaa, 0x83, 0x91,
	0x0d, 0xc7, 0xa8, 0x08, 0xc7, 0x68, 0x56, 0x84, 0xc3, 0x6b, 0x33, 0x9b, 0x6c, 0xf1, 0x2b, 0x70,
	0x30, 0x89, 0xec, 0xc2, 0xd6, 0xa3, 0x0b, 0x5b, 0x98, 0x44, 0xbc, 0xec, 0x6b, 0xf8, 0x24, 0x92,
	0x61, 0xb6, 0xc6, 0xc4, 0x68, 0x3f, 0xa4, 0x03, 0x61, 0x34, 0x70, 0x0e, 0x2b, 0x47, 0x35, 0xcf,
	0x2d, 0x27, 0x4e, 0x2c, 0x2e, 0xbe, 0x84, 0xde, 0xfc, 0xd6, 0xe0, 0x86, 0xd8, 0x66, 0x62, 0x97,
	0xc1, 0x82, 0xf4, 0x13, 0xe8, 0x66, 0x2a, 0xde, 0x70, 0x80, 0x39, 0x1d, 0xc2, 0x0a, 0xca, 0x57,
	0xb0, 0xd9, 0xdb, 0x5f, 0x04, 0x31, 0xd1, 0x3a, 0x4c, 0xdb, 0x2b, 0xf1, 0x53, 0x86, 0xc5, 0x37,
	0xf0, 0x6c, 0x43, 0x95, 0x99, 0xf1, 0xe5, 0xc2, 0xb7, 0x31, 0xed, 0xf2, 0x82, 0xfd, 0x72, 0xf6,
	0x3c, 0x33, 0xe7, 0x0b, 0x8e, 0xe6, 0xae, 0x53, 0x0a, 0x8d, 0x8a, 0x31, 0x1a, 0xf4, 0xee, 0x38,
	0xe5, 0x59, 0x7c, 0xf7, 0x30, 0x11, 0x26, 0xc4, 0xed, 0xdf, 0x39, 0xcc, 0x98, 0x61, 0xf1, 0x1c,
	0x3a, 0x61, 0xa6, 0x14, 0x26, 0xc6, 0xcf, 0x54, 0x3c, 0x78, 0xc2, 0x97, 0x0d, 0x39, 0x74, 0xa5,
	0xe2, 0xe1, 0xdf, 0x2a, 0xd0, 0x60, 0xc5, 0x88, 0x1e, 0xb4, 0xaf, 0xce, 0xc6, 0x93, 0xd3, 0xe9,
	0xd9, 0x64, 0xec, 0xfe, 0x48, 0x74, 0xa0, 0x75, 0xe2, 0x4d, 0x8e, 0x67, 0x93, 0xb1, 0x5b, 0x11,
	0x5d, 0x70, 0x4e, 0x27, 0xb3, 0x93, 0xd7, 0xd3, 0xb3, 0x6f, 0xdd, 0x2a, 0x59, 0x97, 0x6f, 0x26,
	0x93, 0x0b, 0xb2, 0x6a, 0x3c, 0x37, 0x3d, 0x9b, 0x5e, 0xbe, 0x9e, 0x8c, 0xdd, 0xba, 0xd8, 0x87,
	0xbd, 0xe3, 0x57, 0xe7, 0xde, 0x6c, 0x32, 0xf6, 0x67, 0xd3, 0xb7, 0x93, 0xf3, 0xab, 0x99, 0xdb,
	0x10, 0x2e, 0x74, 0x0b, 0xf0, 0x72, 0xfa, 0xdd, 0xc4, 0x6d, 0x0a, 0x01, 0xfd, 0x02, 0x79, 0x7b,
	0x7c, 0x76, 0x75, 0xfc, 0xc6, 0x6d, 0x09, 0x80, 0xe6, 0xe9, 0xf1, 0xf4, 0xcd, 0x64, 0xec, 0x3a,
	0xc2, 0x81, 0xfa, 0x78, 0x3a, 0x19, 0xbb, 0xed, 0xe1, 0xbf, 0x1b, 0xe0, 0xf0, 0x2d, 0xbc, 0x91,
	0x4b, 0xd2, 0xed, 0x87, 0x40, 0x85, 0x7e, 0x99, 0x24, 0x4d, 0x32, 0xa7, 0x11, 0xc9, 0x90, 0x74,
	0xe4, 0xb3, 0x56, 0x38, 0x5b, 0x1e, 0x91, 0x21, 0xb1, 0x2f, 0x69, 0x28, 0x04, 0xd4, 0x75, 0xa6,
	0x4c, 0x9e, 0x20, 0x3c, 0xa6, 0xb0, 0x69, 0xce, 0x26, 0x3f, 0x94, 0x11, 0x72, 0x8e, 0x34, 0x3c,
	0xb0, 0xd0, 0x89, 0x8c, 0x90, 0x17, 0xc5, 0x7f, 0xb2, 0x69, 0x52, 0xf3, 0x78, 0x4c, 0x5a, 0x53,
	0xf8, 0xc7, 0x0c, 0xb5, 0xc1, 0x88, 0xa3, 0xdd, 0xe4, 0x1d, 0xbb, 0x25, 0x78, 0xa5, 0x62, 0xd2,
	0x9a, 0x42, 0x9d, 0xca, 0x44, 0x23, 0x73, 0x5a, 0xcc, 0xe9, 0x14, 0x18, 0x51, 0x7e, 0x06, 0xfd,
	0x28, 0xd6, 0xa1, 0x7c, 0x8f, 0xea, 0xd6, 0x4f, 0x03, 0x73, 0xcd, 0xea, 0x6e, 0x7b, 0xbd, 0x12,
	0xbd, 0x08, 0xcc, 0xb5, 0x38, 0x00, 0x47, 0xe1, 0x02, 0x95, 0x42, 0xc5, 0xaa, 0x6e, 0x7b, 0xa5,
	0x4d, 0x5f, 0x09, 0x65, 0x62, 0xe8, 0xda, 0xcd, 0x6d, 0x8a, 0xac, 0xe8, 0xb6, 0xd7, 0xc9, 0xb1,
	0xd9, 0x6d, 0x8a, 0x62, 0x0c, 0xee, 0x02, 0x4d, 0x78, 0xed, 0x6f, 0xc5, 0xad, 0xf3, 0x68, 0xdc,
	0xfa, 0xbc, 0x66, 0x56, 0x06, 0x6f, 0x08, 0xbd, 0xad, 0x5d, 0xd6, 0x3a, 0xd7, 0x78, 0xa7, 0xa4,
	0xbd, 0xd5, 0x74, 0x98, 0xf9, 0x4a, 0x86, 0xef, 0xfc, 0x28, 0x5e, 0xa2, 0x36, 0x2c, 0xeb, 0xb6,
	0xd7, 0x61, 0x6c, 0xcc, 0x10, 0xb9, 0x9c, 0x06, 0xb7, 0x2b, 0x19, 0x44, 0x05, 0xa9, 0x6f, 0x5d,
	0xce, 0xd1, 0x9c, 0xc6, 0xd7, 0x22, 0x55, 0xb0, 0x44, 0x5f, 0xe1, 0x62, 0xb0, 0x67, 0xd5, 0x9c,
	0x43, 0x1e, 0x2e, 0x88, 0xa0, 0x30, 0x94, 0x2a, 0xb2, 0x6e, 0xbb, 0x96, 0x60, 0x21, 0xf6, 0xfa,
	0xa7, 0xd0, 0x67, 0x01, 0x71, 0xa4, 0xb4, 0x6f, 0xe4, 0xe0, 0x13, 0x7b, 0x49, 0x84, 0x7a, 0x0c,
	0xce, 0xa4, 0xf8, 0x02, 0x20, 0x4e, 0xfd, 0x20, 0x8a, 0x14, 0x6a, 0x3d, 0x10, 0xcc, 0x68, 0xc7,
	0xe9, 0xb1, 0x05, 0xc8, 0x21, 0x2c, 0x8a, 0x2e, 0x49, 0x71, 0xdf, 0x3a, 0x54, 0x62, 0xd3, 0x48,
	0x0c, 0xa0, 0x65, 0xb3, 0x58, 0x73, 0xce, 0x35, 0xbc, 0xc2, 0xa4, 0x0a, 0x8b, 0x4a, 0x49, 0x35,
	0x78, 0xfa, 0x60, 0x85, 0x3d, 0xa5, 0xc0, 0x4d, 0x88, 0xe0, 0x59, 0xde, 0xf0, 0x1f, 0x35, 0x68,
	0x5d, 0x04, 0x4b, 0xfc, 0xa8, 0xfe, 0x5d, 0xa8, 0x91, 0x9a, 0xaa, 0x0c, 0xd2, 0xf0, 0xde, 0x21,
	0x6b, 0xf7, 0x0f, 0xb9, 0xad, 0xa0, 0xfa, 0x1d, 0x05, 0xfd, 0x96, 0xe6, 0xb4, 0xcc, 0x54, 0x48,
	0xea, 0xa9, 0x1d, 0x75, 0x5e, 0x3e, 0xbf, 0x73, 0xd2, 0xfc, 0x4c, 0x23, 0x2f, 0xa7, 0x79, 0xe5,
	0x02, 0xf2, 0x5e, 0x66, 0x66, 0x15, 0x27, 0xef, 0x06, 0x9d, 0xc3, 0xda, 0x51, 0xdb, 0x2b, 0xcc,
	0x83, 0xbf, 0x54, 0xc1, 0x29, 0x16, 0x14, 0x87, 0xae, 0x6c, 0x0e, 0xfd, 0x05, 0xc0, 0x42, 0xc9,
	0xb5, 0x1f, 0x06, 0xe1, 0xb5, 0x6d, 0x7a, 0x8e, 0xd7, 0x26, 0xe4, 0x84, 0x00, 0xf1, 0x63, 0x00,
	0x85, 0x49, 0x84, 0x2a, 0x98, 0xaf, 0x90, 0x3d, 0x72, 0xbc, 0x2d, 0xc4, 0x66, 0xa0, 0xdd, 0xdc,
	0x0a, 0xa0, 0x5e, 0x64, 0xa0, 0x05, 0x59, 0x02, 0x9f, 0x43, 0x7b, 0x4d, 0x62, 0x65, 0x42, 0xc3,
	0xba, 0x4d, 0x00, 0x4f, 0xde, 0x49, 0xfc, 0xe6, 0xbd, 0xc4, 0xbf, 0x9f, 0x9c, 0xad, 0x87, 0x92,
	0x73, 0xeb, 0xa2, 0x9c, 0x9d, 0x8b, 0xfa, 0x48, 0xd6, 0x0e, 0x8f, 0xa1, 0x9f, 0xf7, 0x9b, 0x13,
	0x9b, 0xa8, 0xe2, 0x19, 0x34, 0xf3, 0x7c, 0xc8, 0xaf, 0xdb, 0x5a, 0xdb, 0xdb, 0x57, 0xb7, 0xb7,
	0x1f, 0xfe, 0xb9, 0x0a, 0xbd, 0xc9, 0x8d, 0x51, 0x41, 0x68, 0x30, 0x9a, 0xe1, 0x8d, 0xf9, 0xef,
	0x92, 0x11, 0x50, 0x37, 0x78, 0x63, 0xf2, 0x0d, 0x78, 0x4c, 0xde, 0x69, 0xa4, 0x4f, 0x87, 0xe8,
	0x87, 0x32, 0x4b, 0x6c, 0x55, 0xac, 0x79, 0xbd, 0x02, 0x3d, 0x21, 0x90, 0xae, 0xe9, 0x03, 0x25,
	0x99, 0xa5, 0xd4, 0x99, 0xd2, 0x26, 0xc4, 0x4e, 0xff, 0x1c, 0xf6, 0x56, 0x32, 0x59, 0xfa, 0x5b,
	0x1c, 0x5b, 0x27, 0x7b, 0x04, 0xff, 0xa1, 0xe4, 0xfd, 0x02, 0xf6, 0xc2, 0xeb, 0x80, 0xcf, 0xaa,
	0x72, 0x5e, 0x93, 0x79, 0xfd, 0x12, 0xb6, 0x44, 0x17, 0x6a, 0xab, 0xf8, 0x86, 0x23, 0x5d, 0xf3,
	0x68, 0x48, 0x61, 0x5c, 0x05, 0xc9, 0x32, 0x0b, 0x96, 0x98, 0x07, 0xb8, 0xb4, 0x87, 0x7f, 0xad,
	0xe4, 0x71, 0x7c, 0x2d, 0xb5, 0xf9, 0x56, 0xc9, 0x2c, 0xbd, 0xf7, 0xae, 0xfa, 0x12, 0x7a, 0xa9,
	0x5c, 0xc5, 0x06, 0x13, 0xd4, 0x7a, 0x13, 0xc5, 0xee, 0x06, 0x9c, 0x46, 0xe2, 0x15, 0xec, 0x25,
	0x78, 0x63, 0xfc, 0x4d, 0x81, 0xe3, 0x68, 0x7c, 0xbc, 0x40, 0xf6, 0x68, 0xc9, 0x69, 0x51, 0xfd,
	0x28, 0xc8, 0xf3, 0x4c, 0xdf, 0x72, 0x8c, 0x1c, 0x8f, 0xc7, 0xc3, 0x97, 0x00, 0x9b, 0x2c, 0x27,
	0x06, 0x4b, 0xad, 0xc2, 0x52, 0xe3, 0x31, 0xf9, 0xbb, 0xd6, 0xcb, 0x22, 0x9b, 0xd7, 0x7a, 0x39,
	0xfc, 0x67, 0x1d, 0xda, 0xbf, 0xcf, 0x30, 0xb3, 0x4d, 0xe4, 0xae, 0x3b, 0x77, 0x73, 0xbd, 0x7a,
	0x3f, 0xd7, 0xcf, 0xe0, 0x69, 0xa1, 0x50, 0x8c, 0xb6, 0x6b, 0xfe, 0xe3, 0x2e, 0xed, 0x6f, 0x16,
	0x6e, 0x0a, 0xff, 0x01, 0x38, 0x9a, 0xfa, 0x5a, 0x12, 0x62, 0x2e, 0x80, 0xd2, 0x2e, 0xf2, 0xba,
	0xb1, 0xc9, 0xeb, 0xa2, 0xc7, 0x36, 0xb7, 0x7a, 0x2c, 0x39, 0x91, 0xe6, 0xd9, 0x53, 0x8d, 0xd3,
	0x1f, 0xa2, 0xed, 0xbd, 0x80, 0x56, 0x28, 0xe5, 0x3b, 0xaa, 0xba, 0xb6, 0x66, 0x3d, 0xbd, 0xfb,
	0x7e, 0xe5, 0x59, 0xaf, 0x60, 0x89, 0xaf, 0x41, 0xa4, 0xd4, 0x4d, 0x76, 0x7b, 0x58, 0xfe, 0xb0,
	0xa3, 0x99, 0xd3, 0xad, 0x3e, 0xb6, 0x55, 0xd3, 0xbb, 0xbb, 0x35, 0xfd, 0x0a, 0x3e, 0xc3, 0x40,
	0xad, 0x62, 0xd4, 0xdb, 0x6a, 0xc9, 0x03, 0xdc, 0x7b, 0x34, 0xc0, 0xcf, 0x8a, 0xc5, 0xa7, 0xbb,
	0xcd, 0xf5, 0x97, 0xb0, 0xcf, 0x4f, 0x52, 0xff, 0x5a, 0x6a, 0xe3, 0x2f, 0x49, 0xc9, 0x74, 0xbb,
	0xb6, 0x35, 0xba, 0xe1, 0x8e, 0xc4, 0xa7, 0x0f, 0x88, 0x7a, 0xef, 0x01, 0x51, 0x97, 0xed, 0xc7,
	0xfd, 0x1f, 0xdb, 0xcf, 0xbf, 0x2a, 0xd0, 0xb4, 0x61, 0xa3, 0x5b, 0x4c, 0x82, 0x35, 0xe6, 0xc2,
	0xe3, 0xb1, 0x78, 0x02, 0x8d, 0xf7, 0xc1, 0x2a, 0xc3, 0x5c, 0x73, 0xd6, 0xe0, 0xba, 0x25, 0xd7,
	0x41, 0x9c, 0xe4, 0x6d, 0x27, 0xb7, 0x68, 0x07, 0xbe, 0x59, 0x5b, 0x97, 0x79, 0x4c, 0x61, 0xc5,
	0x9b, 0x34, 0x56, 0xa8, 0x59, 0x31, 0x15, 0xaf, 0x30, 0xcb, 0x47, 0x96, 0xad, 0xc2, 0xf6, 0x91,
	0xf5, 0x39, 0xb4, 0xaf, 0x8d, 0x49, 0x7d, 0x99, 0xac, 0x6e, 0x59, 0x3c, 0x8e, 0xe7, 0x10, 0x70,
	0x9e, 0xac, 0x6e, 0xe9, 0xb3, 0x1a, 0xc3, 0x4c, 0xd9, 0x9a, 0xe0, 0x78, 0xb9, 0x45, 0x9f, 0xd0,
	0xa8, 0x75, 0x2c, 0x13, 0x96, 0x8c, 0xe3, 0x15, 0x26, 0x6d, 0xa7, 0x03, 0xba, 0xaa, 0xd8, 0x14,
	0xaf, 0x24, 0x87, 0x80, 0xcb, 0xd8, 0xe0, 0x30, 0x04, 0xb8, 0x0c, 0x15, 0x62, 0xa2, 0xaf, 0xa5,
	0xf9, 0x7f, 0x92, 0x2e, 0x4f, 0x84, 0xda, 0x26, 0x11, 0x5c, 0xa8, 0xc5, 0xeb, 0x25, 0xfb, 0xdf,
	0xf5, 0x68, 0xf8, 0xea, 0xd7, 0xf0, 0x69, 0x22, 0x47, 0xc9, 0x7c, 0x94, 0x24, 0xc1, 0xee, 0x65,
	0xbc, 0xea, 0xbd, 0xcd, 0xff, 0x74, 0x5e, 0x90, 0x66, 0xbe, 0xdb, 0xfc, 0xe7, 0xf4, 0x83, 0x34,
	0x9e, 0x37, 0x59, 0x49, 0xdf, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x25, 0xd2, 0xb9, 0xe8, 0x9b,
	0x0e, 0x00, 0x00,
}
