// Code generated by go-bindata.
// sources:
// res/completion.sh
// res/crawlexecution.template
// res/crawllog.template
// res/jobexecution.template
// res/json.template
// res/pagelog.template
// res/screenshot.template
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4f\x6f\xa3\x46\x14\x3f\xc3\xa7\x78\x9a\x52\x01\x6d\xb0\x9d\x3d\x36\x4b\xdb\xed\x2a\xaa\x2a\xb5\xdd\xd5\xf6\x50\x55\xc4\x41\x78\x78\x76\xd8\x1d\x66\xc8\xcc\x90\x34\x4b\xf9\xee\xd5\xcc\x60\x1b\x6c\xc7\x95\xda\x5c\x7a\x01\xde\xff\xbf\xbf\x47\x9e\x3f\x60\x55\x62\x5d\x70\x4e\x35\xcb\x9b\x42\x2a\xcc\x37\xa8\xa3\x18\x3a\x1f\x00\xa0\x44\xca\x0a\x89\x90\xc8\x37\xa0\x8b\x15\x43\x95\x46\x90\x11\xe4\xba\xd2\x4f\x64\x99\x12\x2a\xf8\xba\xda\xe4\x54\x16\x8f\x2c\xb7\xec\x0a\x15\x81\x8c\xac\xa4\x78\x54\x28\x47\x3a\x03\x27\x77\xa4\x22\x70\x63\x43\x00\x64\xc4\x9a\x3b\xfe\x91\xd3\x9d\x7a\x46\x36\x52\xb4\xcd\x91\xc2\x9d\x50\x3a\xb7\xa2\xb1\xee\x47\xb1\x3a\xd2\xfc\x28\x56\x93\xb0\x8d\x60\x95\x46\x8e\x4a\x8d\x54\xf7\xcc\xb1\x3b\x29\x18\x1a\xa5\x52\x6c\x0c\xa9\xe8\x1d\x96\xad\x63\x4d\x42\x6c\x05\xa7\xaa\x54\x54\x56\x8d\x3e\xd1\x11\x27\xb0\x71\x14\x62\x39\xd2\x30\xa4\x22\x10\x5b\x1f\x4c\xd0\x82\xb9\x31\xa4\x41\xe7\xc6\x91\x05\x97\xcb\x1e\xee\x5b\x94\x4f\xa0\xb1\x6e\x58\xa1\x11\x26\x43\x15\xad\xf6\x7d\xaf\x5a\x43\x06\xc9\x67\x20\x81\xb5\x23\xb0\xbc\x02\x7d\x87\x7c\x48\x4e\xa2\x6e\x25\x87\x85\x25\xd7\x95\x6f\xdf\xd6\x6b\x4a\xe4\xcc\x9a\x44\xe1\x10\xb3\x0f\x63\xb2\x75\xc8\x81\x04\xb4\x95\x87\xee\x06\xcb\xa0\xb3\x1f\xfd\x6c\x85\xfa\x11\x91\x1b\x17\xb4\x95\x7d\x78\x01\xc3\xd7\xe7\xf0\x02\xba\x8a\x97\xf8\xe7\x37\x61\x55\x86\x7d\x4c\xb6\x19\x78\x87\x3e\x84\x2c\x51\xfe\xf0\x14\x4d\xd4\x67\x0d\x6b\xe9\xa7\xc8\x10\x83\xe9\xb6\x09\x29\xe9\xba\x46\x56\x5c\x33\x0e\xb3\xaa\xec\x7b\x27\xae\xd6\x50\x17\xcd\xba\x62\x08\x89\x3e\x6a\x14\xbc\x86\xd7\xd1\x84\x0b\x12\x1b\x21\xf5\xd0\xe1\x5d\x36\x04\x12\xb1\xef\x77\xa2\x49\xd0\x6d\x29\x23\x53\xaf\x16\xf0\xea\xdb\x79\x89\x0f\x73\xde\x32\x06\xf1\xa4\x3b\x30\x4e\xe1\xed\xbb\x5f\xde\x7f\xb8\x7e\xff\xf3\x1f\x2e\x36\x15\x75\xb3\x41\x0e\xc9\xef\x40\x82\x08\x6c\x05\x6b\x08\xbf\xbc\x87\xd0\x44\x3f\x4c\x38\xfb\x7e\xd9\x13\x88\x09\x24\xc9\x76\x12\x7f\x41\xf1\xf8\x09\xc2\x39\xcc\xa1\x73\xf6\x40\x6e\x08\x09\x16\xe6\x09\x3d\xcc\x6f\xb3\x5b\x58\x7e\x1d\xec\xc5\xc1\x02\xfa\x70\xd8\xb1\x75\xe5\xf7\xbe\x7f\x70\x17\x36\xa8\x73\x89\x4a\xb4\x92\xe2\xee\x34\x98\x05\xc8\x20\xe8\xbe\xe0\xa2\xe5\xca\x24\x02\x09\xde\xc3\x02\x96\xcb\x83\x6a\x87\xe5\xba\xdc\x06\x30\xaf\xe7\x2e\x0f\x04\x9d\xf3\x37\x75\x7c\xb9\xec\xc7\x41\xbf\xfb\x87\x50\x8b\xe7\x6b\xb1\xf3\x3b\xae\xc6\x61\xeb\x08\x38\xff\x7d\x65\x92\xfb\xff\xf9\x26\xd0\x56\x69\x51\xe7\xeb\x96\xd3\x5d\xb7\x68\xa1\x10\x82\x8e\x15\x4a\xe7\x54\xd4\x75\xc1\xcb\x1e\xaa\x7d\x55\x87\xdb\x13\xef\x24\x27\x66\x3f\xde\xae\x89\x9e\x1b\xe6\x84\x75\x75\x75\x3a\x86\x6b\xb9\x1b\x6e\xec\x7b\x9e\x77\x76\xea\x46\x61\x70\xee\x79\xde\xc8\xe7\x57\xf1\xa9\x68\xa8\x0a\xfa\x0c\x2a\x78\x51\xbf\x04\x22\x3c\xb7\x7e\xc6\xce\xf7\xcc\x33\x3d\x0f\x83\xe1\x4f\x30\x5c\x9c\xe7\xef\x5e\x8d\xba\x98\x99\x1c\xb7\xe7\xef\x25\xd7\xdc\xa0\x95\x04\x26\x3b\x62\x7f\x04\xb7\xee\xa4\x0f\xe7\x6f\x7a\x1f\x61\x7a\x20\x4f\x21\xc2\x3b\x0f\x87\xfd\xfe\xdf\xf0\x33\x00\x70\x3b\x9f\x3c\xc0\x4f\x3f\xfe\xfa\xee\xc3\xf5\xdb\x37\xbf\x5d\xa7\x97\x86\x6e\xd2\x01\x15\x61\xd7\xa4\xa9\x6a\x57\x4a\xcb\x28\x58\x5c\x2c\x2e\x18\xf2\x8d\xbe\x8b\x9a\x38\xee\xc1\x62\xe5\xdf\x41\xe5\xef\x00\x00\x00\xff\xff\x53\x6f\x3d\xd7\x4c\x09\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 2380, mode: os.FileMode(436), modTime: time.Unix(1528789428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _crawlexecutionTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x4e\xc3\x30\x10\x86\xf7\x3c\xc5\xaf\x93\x18\x6b\x01\x85\x0e\x6c\xa8\xcd\x10\x54\xc1\x40\xc4\x9c\x50\x5f\xc1\x52\xe2\x54\x17\x87\x0e\x27\xbf\x3b\xb2\x13\xa1\xb0\x9c\xcf\x9f\x7e\x5b\xdf\x9d\xaa\xe5\xb3\xf3\x0c\x3a\x56\xaf\x25\x61\x13\xa3\xea\x45\x9c\x0f\x67\x34\x37\xdb\xdd\x88\xb9\xdc\x3d\xa6\x72\x6b\x1b\x98\xca\xc2\xbc\x0c\x9f\xe9\x78\x0f\x6d\x60\x98\xc3\x70\x9a\x7a\xf6\x61\xdc\x4b\x7b\xed\xd8\xc6\x08\xd5\xe0\x7a\xce\x09\x09\xb5\xeb\x79\xc5\x4a\x6f\x67\xa2\x7a\x75\xe1\x1b\xa6\x14\x19\x24\xc6\x02\x80\xaa\xa4\xf7\x99\x3c\x41\xd5\xa4\x14\x7b\x3b\x8b\x09\x8f\x1c\x56\xa4\x50\x75\xfe\x87\x65\xe4\x7f\xda\x9b\xed\xce\x64\xeb\xbf\x66\xd1\x4f\xe8\xfe\x61\xa9\x0d\xa8\xb2\x04\xca\xb3\x10\x28\x0f\x43\xa0\xc3\x70\x1a\xe7\xab\x04\x24\x63\x02\x95\xde\xce\xed\xca\xa2\x50\x95\xd6\x7f\x31\xcc\x47\xdb\x4d\xd9\x20\x70\x7f\xe9\xd2\x4a\x96\x6d\x9a\x9c\x62\x6f\x63\x2c\xea\xb7\xfa\xf9\x88\xc5\x12\x66\x3f\x4c\x3e\x7d\xf2\x1b\x00\x00\xff\xff\xea\xfd\x52\x48\x81\x01\x00\x00")

func crawlexecutionTemplateBytes() ([]byte, error) {
	return bindataRead(
		_crawlexecutionTemplate,
		"crawlexecution.template",
	)
}

func crawlexecutionTemplate() (*asset, error) {
	bytes, err := crawlexecutionTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "crawlexecution.template", size: 385, mode: os.FileMode(436), modTime: time.Unix(1528471708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _crawllogTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xcd\x6e\xdb\x30\x0c\x80\xef\x7d\x0a\x82\x80\x8f\x11\x9a\x9f\xa6\xe9\x31\xc8\x32\xc0\x40\xd3\x0d\x89\xb7\x5e\xe3\x59\x74\x22\xa0\x91\x3d\x4a\xee\x96\x19\x7e\xf7\x81\x52\xe7\x24\x4b\x0f\xbd\x10\x96\x04\x92\x1f\xf8\xd1\x6d\xab\xa9\x34\x96\x00\x1f\xd3\xa7\x25\xc2\xa0\xeb\x6e\xda\xb6\x66\x63\x7d\x09\xdb\x64\x3c\x55\xe3\xa9\x83\x64\x30\xbc\x93\xf8\x30\x52\x0f\x23\xf9\x98\xa9\x99\x83\xb7\xd7\x2d\xa8\xe7\x9c\x8b\x54\x83\xfa\x64\x5c\x51\xbd\x12\x1f\xbf\xe6\x7e\x0f\x6a\x4d\x3f\x1b\x72\x9e\xf4\x37\x36\x72\x2a\x2a\xd6\xd9\xb1\xa6\x98\xb0\xa6\x92\xd8\x65\x55\xe8\xf8\x83\xcd\x6e\xef\x8b\x63\x6e\xbb\xee\x03\xfd\x87\x77\x2a\xdc\x8c\x35\x24\xc3\xa1\x86\xe4\x5e\x43\x32\xd2\x5b\x50\xcb\xdf\x54\x34\xde\x54\x56\x78\xd2\x7a\xae\x35\x93\x73\xd2\xdd\xd5\x95\x75\x14\x50\x16\x95\xf5\x64\x7d\x64\xd9\xf8\xdc\x37\x6e\x51\x69\xf9\x36\x7f\x08\xd4\x67\xf2\xc5\x3e\x33\x07\x5a\x85\x44\xcf\x86\x9c\x60\x31\x39\xf2\x01\xf7\x0a\x74\x30\xbd\x55\xd3\xdb\x30\x9a\x89\x9a\x4d\x64\x28\x1b\x5f\x71\xbe\xa3\x35\x95\x52\xa4\x24\x66\xe2\xae\x83\xb6\xf5\xe6\x40\xa0\xa4\xfe\xc6\xe7\x87\x3a\xdc\xfd\x32\x32\xb0\x25\x73\xc5\x52\x37\x8e\x83\x49\xcb\x41\x49\x20\xab\x2f\x11\xc8\xea\x60\xeb\xe6\xa4\x70\x35\x4f\x9f\xfe\x29\x34\xf6\x95\xd8\xd1\x25\xe4\xd5\x38\x03\xb0\x84\xc9\xc8\x6d\x01\x9f\xe7\xeb\x05\xa4\x1a\x01\x45\x20\x02\x9e\x1b\x0c\xc7\x42\x66\x86\x80\xe7\x02\xf1\x12\xec\x52\xe5\xc7\x39\xa2\x50\x27\x42\x1d\x24\xf7\xe1\x6a\x28\x54\xbd\xd2\x88\xd6\x4b\x0d\x40\xbd\x55\x04\x3c\xd3\x1a\xdf\x10\x50\x8c\x22\x60\x50\xba\x8a\x29\x9e\x8f\xf8\xbe\xce\x77\x61\xcf\xcc\x4a\x1c\xc5\x28\x7b\x8f\x27\xc5\xa1\x70\x74\x8c\x80\xbd\x5b\x04\x0c\x4e\xff\xeb\xc7\xb9\xdd\x11\xa8\xef\xf9\x4b\x13\x9a\x79\x3a\xd4\x2f\xb9\xef\xff\xc2\x93\xf1\x9b\xec\x4b\x36\x7f\x84\x37\x1e\xd9\xdc\xc6\x5e\xf9\x3f\xa5\xc7\x0d\x50\x5d\xf7\x37\x00\x00\xff\xff\x98\x4f\x85\xcc\xd8\x03\x00\x00")

func crawllogTemplateBytes() ([]byte, error) {
	return bindataRead(
		_crawllogTemplate,
		"crawllog.template",
	)
}

func crawllogTemplate() (*asset, error) {
	bytes, err := crawllogTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "crawllog.template", size: 984, mode: os.FileMode(436), modTime: time.Unix(1518713311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jobexecutionTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x41\x4f\xfb\x30\x0c\xc5\xef\xfb\x14\x4f\xd6\x76\xfb\x2f\xd2\xfe\x63\x13\x42\xe2\x80\xb6\x1e\x86\x26\x38\x30\x38\xb7\x34\x1e\x8a\x68\xd3\x29\x49\x07\x28\xca\x77\x47\x49\x3a\xb4\x1e\xec\xba\x56\xfc\xfc\x7e\x89\xf7\x92\x8f\x4a\x33\x68\xbf\x7b\x2a\x08\xf3\x10\xbc\x3f\x19\xa5\xdd\x11\xe5\x6c\xb9\xb6\xc8\x69\xb1\xb2\x98\xdd\xca\x18\x25\xc4\x4e\x42\x3c\x76\xef\xf1\xf3\xe2\x2a\xc7\x10\xdb\xae\xee\x5b\xd6\xce\x6e\x4c\xf5\xd5\xb0\x84\x78\x35\xea\xf2\x13\x02\xbc\x77\xaa\xe5\x74\xdc\xb8\x83\x6a\xf9\xaa\x57\x68\x99\x3b\x13\xef\x4d\xa5\x3f\x18\xd3\x4f\xfe\xf9\x87\xe9\xb9\x6a\x7a\xc6\xdd\x3d\x44\xf1\xcd\x75\xef\x54\xa7\x6d\xda\x37\x32\xb9\x88\xfe\x56\xb2\x4c\x53\xc3\x50\xd2\x62\x2d\x23\xcf\xa8\x52\xfa\xcc\xc6\x8e\x05\xe6\xcb\xb5\x48\x90\x7f\x45\xa6\x1d\x62\xfe\xff\x66\xc8\x25\x68\x27\x09\x94\xd0\x09\x94\xbc\x10\x68\xdb\xd5\x96\x40\x91\x38\x77\x8d\x43\x44\x23\x50\xa1\x65\x2e\xe3\x46\xc3\x96\xdd\x15\xa6\x78\xcb\x5e\xbd\x77\xdc\x9e\x9a\x78\x91\xc3\x33\x88\x8b\xed\x10\x26\x87\xe7\xc3\xc3\x1e\x83\x5f\x88\x4d\xd7\xeb\x28\xf2\x1b\x00\x00\xff\xff\x3d\x35\x93\x89\xba\x01\x00\x00")

func jobexecutionTemplateBytes() ([]byte, error) {
	return bindataRead(
		_jobexecutionTemplate,
		"jobexecution.template",
	)
}

func jobexecutionTemplate() (*asset, error) {
	bytes, err := jobexecutionTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jobexecution.template", size: 442, mode: os.FileMode(436), modTime: time.Unix(1528471708, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x2e\x28\x4a\x2d\x29\xa9\xf4\x2a\xce\xcf\x53\xd0\xab\xad\xe5\x02\x04\x00\x00\xff\xff\xb2\xed\x24\x61\x11\x00\x00\x00")

func jsonTemplateBytes() ([]byte, error) {
	return bindataRead(
		_jsonTemplate,
		"json.template",
	)
}

func jsonTemplate() (*asset, error) {
	bytes, err := jsonTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "json.template", size: 17, mode: os.FileMode(436), modTime: time.Unix(1528724652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagelogTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcf\x6e\xe2\x30\x10\xc6\xef\x7d\x8a\x91\xa5\x1c\x63\x35\x8e\x28\xa2\x37\x94\x65\x57\xd1\xb6\xa5\x4a\x61\x7b\xc5\x24\x53\xb0\x36\x38\xc8\x76\xba\x8b\x22\xde\x7d\x35\x6e\xc9\x1f\x16\xd4\x43\x24\x7b\x26\x9e\xf9\xbe\xf9\x4d\xd3\x14\xf8\xa6\x34\x02\xcb\x66\x2f\xf3\x65\x96\xcc\x18\x84\xc7\xe3\x4d\xd3\xac\x8d\xda\x6c\xdd\x4e\x6e\x50\x3b\x79\x3c\x36\xcd\xde\x28\xed\xde\x60\x15\xc4\x77\x3c\xbe\xb3\x10\x84\x23\x07\x41\x5c\x40\x10\x8d\xe8\x36\x11\x7c\x22\xe8\x10\x09\x1e\x89\x53\x3e\x14\x82\x0b\x61\x57\xc0\x5f\xa5\xc9\xd3\x02\xf8\x77\x53\xed\x12\x99\x6f\x11\xf8\x8b\x93\xae\xb6\x49\x55\x20\xf0\x6f\xca\xe6\xd5\x3b\x9a\xc3\xb3\x74\x5b\xe0\x4b\xa3\x80\x67\x68\xab\xda\xe4\xb8\x38\xec\x91\x6e\xba\x40\x23\xd7\x25\x02\x7f\x54\x3b\x1f\x25\x61\x06\x2d\x3a\xaf\x19\x75\xe1\xd5\xdf\x74\xb6\xe6\xcb\xc5\x43\xfa\xf4\x73\xe8\x2a\x3f\x48\xdd\xb7\x04\x21\xc9\x1e\xdf\xf2\x68\x7c\x4b\x52\xbf\xac\xfa\x3c\xfd\xd1\x0e\x4a\xe9\x77\x34\x16\x07\x23\x0a\xdb\x19\xb5\x87\x48\xc4\x76\x05\xec\x75\x9a\x25\x90\x16\x0c\xd8\xec\x2f\xe6\xb5\x53\x95\xf6\xb7\xa5\x51\x6c\xd8\x76\x5d\x95\x05\x45\x0e\x58\x96\xd5\x9f\x8b\x04\xda\xe2\xfd\xf9\xf6\xea\xfa\x31\x0e\xab\xf6\xd4\x5e\x25\x7c\x1a\xbb\xbd\x87\x40\x8c\xb8\x20\xbc\xf4\xc5\xb6\x63\xfd\x61\xc9\x53\xe6\x3e\x24\x04\x1f\x0d\x0d\x7a\xc8\x0c\x58\x86\x96\x01\x23\xac\xe4\x33\x4b\x7d\x28\x27\x7a\xfe\xa4\xe9\x5f\xe2\x79\xe6\xdf\x48\xbd\xc1\x6e\x07\x28\xe9\x70\xb7\x2f\xa5\x1b\x6c\xab\x87\x75\x42\x74\xc1\xdf\x39\xeb\x20\x8c\x26\x63\x12\x3a\xaf\x5d\xa9\xf4\x6f\x7b\x7f\xb9\xef\x67\x7a\xd8\xb6\xdd\xa6\x53\xd7\x6b\x0b\xf2\x38\x4d\x9f\x58\xbf\xdc\x2f\x59\xd6\x67\x1e\x3e\x96\xa8\x57\x69\x31\x5f\x4c\x1f\xe0\x53\x2a\xf0\xa4\xaa\xf5\x7f\x1b\xd8\x3d\xf7\x2d\xe8\xf9\xbf\x00\x00\x00\xff\xff\x7c\xa2\xe6\x10\xc4\x03\x00\x00")

func pagelogTemplateBytes() ([]byte, error) {
	return bindataRead(
		_pagelogTemplate,
		"pagelog.template",
	)
}

func pagelogTemplate() (*asset, error) {
	bytes, err := pagelogTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pagelog.template", size: 964, mode: os.FileMode(436), modTime: time.Unix(1518713311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _screenshotTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xc1\x8a\x83\x40\x0c\x06\xe0\xbb\x4f\x11\x02\x7b\x34\xa0\x03\xde\x97\xc5\x83\x20\xbb\x17\xdd\xb3\xd2\x89\x65\xc0\x46\x99\x19\x4b\x61\x98\x77\x2f\xa3\x45\xda\x4b\x48\x20\xff\x97\x84\xa0\x79\x32\xc2\x80\x6d\xf3\x5b\x23\xe4\x31\x86\xb0\x5a\x23\x7e\x82\xe1\x4b\x55\x0e\x8e\x92\x17\xa5\xa2\xa2\x54\x6e\x00\x6a\x34\x50\xfd\xe0\xcb\xe6\xcd\x22\x69\xe8\xad\x49\x31\x16\x9d\xf2\x59\x08\x46\xee\x6c\x1d\x7f\x58\xb9\xaa\xe8\xa0\xce\xe6\xf0\xb0\xd1\x08\xf8\x06\x22\x60\x6f\x0d\xa6\xb4\x65\xc7\x7e\x27\xed\x28\x57\x06\xfa\x1f\xe7\x6d\x77\x3d\xdf\xd6\x79\xf4\xe7\xe3\xb4\x6f\xb1\xe8\x18\xb3\xee\xaf\xfb\x6e\xe1\x75\x1b\xe8\x67\xd9\x24\x21\xcf\x00\x00\x00\xff\xff\x79\xbe\x4d\x7f\xec\x00\x00\x00")

func screenshotTemplateBytes() ([]byte, error) {
	return bindataRead(
		_screenshotTemplate,
		"screenshot.template",
	)
}

func screenshotTemplate() (*asset, error) {
	bytes, err := screenshotTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "screenshot.template", size: 236, mode: os.FileMode(436), modTime: time.Unix(1518713311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
	"crawlexecution.template": crawlexecutionTemplate,
	"crawllog.template": crawllogTemplate,
	"jobexecution.template": jobexecutionTemplate,
	"json.template": jsonTemplate,
	"pagelog.template": pagelogTemplate,
	"screenshot.template": screenshotTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
	"crawlexecution.template": &bintree{crawlexecutionTemplate, map[string]*bintree{}},
	"crawllog.template": &bintree{crawllogTemplate, map[string]*bintree{}},
	"jobexecution.template": &bintree{jobexecutionTemplate, map[string]*bintree{}},
	"json.template": &bintree{jsonTemplate, map[string]*bintree{}},
	"pagelog.template": &bintree{pagelogTemplate, map[string]*bintree{}},
	"screenshot.template": &bintree{screenshotTemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

